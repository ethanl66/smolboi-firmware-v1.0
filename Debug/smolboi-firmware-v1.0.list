
smolboi-firmware-v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08008664  08008664  00009664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087ac  080087ac  0000a218  2**0
                  CONTENTS
  4 .ARM          00000000  080087ac  080087ac  0000a218  2**0
                  CONTENTS
  5 .preinit_array 00000000  080087ac  080087ac  0000a218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087ac  080087ac  000097ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087b0  080087b0  000097b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  080087b4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000868  20000218  080089cc  0000a218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a80  080089cc  0000aa80  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ffe  00000000  00000000  0000a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033c0  00000000  00000000  0001b23e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  0001e600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000cbf  00000000  00000000  0001f6c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d470  00000000  00000000  00020387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015804  00000000  00000000  0003d7f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f7b7  00000000  00000000  00052ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f27b2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b2c  00000000  00000000  000f27f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  000f6324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000218 	.word	0x20000218
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800864c 	.word	0x0800864c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000021c 	.word	0x2000021c
 8000104:	0800864c 	.word	0x0800864c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	691b      	ldr	r3, [r3, #16]
 800022e:	683a      	ldr	r2, [r7, #0]
 8000230:	4013      	ands	r3, r2
 8000232:	683a      	ldr	r2, [r7, #0]
 8000234:	1ad3      	subs	r3, r2, r3
 8000236:	425a      	negs	r2, r3
 8000238:	4153      	adcs	r3, r2
 800023a:	b2db      	uxtb	r3, r3
}
 800023c:	0018      	movs	r0, r3
 800023e:	46bd      	mov	sp, r7
 8000240:	b002      	add	sp, #8
 8000242:	bd80      	pop	{r7, pc}

08000244 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
 800024c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	683a      	ldr	r2, [r7, #0]
 8000252:	619a      	str	r2, [r3, #24]
}
 8000254:	46c0      	nop			@ (mov r8, r8)
 8000256:	46bd      	mov	sp, r7
 8000258:	b002      	add	sp, #8
 800025a:	bd80      	pop	{r7, pc}

0800025c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
 8000264:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	683a      	ldr	r2, [r7, #0]
 800026a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800026c:	46c0      	nop			@ (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b002      	add	sp, #8
 8000272:	bd80      	pop	{r7, pc}

08000274 <scanMatrix>:
	  HAL_Delay(15);

	  //HAL_Delay(1000);
  }

uint8_t scanMatrix() {
 8000274:	b580      	push	{r7, lr}
 8000276:	b082      	sub	sp, #8
 8000278:	af00      	add	r7, sp, #0

	uint8_t col;
	uint8_t row;
	uint8_t key_pressed = 0;	// 0: no key pressed at all. 1: any key pressed
 800027a:	1d7b      	adds	r3, r7, #5
 800027c:	2200      	movs	r2, #0
 800027e:	701a      	strb	r2, [r3, #0]
	uint32_t current_row_state;

	// Columns should've been initialized low

	// Scanning loop
	for (col = 0; col < NUM_COLS; col++) {
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	2200      	movs	r2, #0
 8000284:	701a      	strb	r2, [r3, #0]
 8000286:	e062      	b.n	800034e <scanMatrix+0xda>

		// Set a column to high
		LL_GPIO_SetOutputPin(col_pins[col].port, col_pins[col].pin);
 8000288:	1dfb      	adds	r3, r7, #7
 800028a:	781a      	ldrb	r2, [r3, #0]
 800028c:	4b35      	ldr	r3, [pc, #212]	@ (8000364 <scanMatrix+0xf0>)
 800028e:	00d2      	lsls	r2, r2, #3
 8000290:	58d0      	ldr	r0, [r2, r3]
 8000292:	1dfb      	adds	r3, r7, #7
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	4a33      	ldr	r2, [pc, #204]	@ (8000364 <scanMatrix+0xf0>)
 8000298:	00db      	lsls	r3, r3, #3
 800029a:	18d3      	adds	r3, r2, r3
 800029c:	3304      	adds	r3, #4
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	0019      	movs	r1, r3
 80002a2:	f7ff ffcf 	bl	8000244 <LL_GPIO_SetOutputPin>

		// Read rows.
		// If any row is high, that means key at key[row][col] was pressed.
		for (row = 0; row < NUM_ROWS; row++) {
 80002a6:	1dbb      	adds	r3, r7, #6
 80002a8:	2200      	movs	r2, #0
 80002aa:	701a      	strb	r2, [r3, #0]
 80002ac:	e037      	b.n	800031e <scanMatrix+0xaa>
			current_row_state = LL_GPIO_IsInputPinSet(row_pins[row].port, row_pins[row].pin);	// State of current row?
 80002ae:	1dbb      	adds	r3, r7, #6
 80002b0:	781a      	ldrb	r2, [r3, #0]
 80002b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000368 <scanMatrix+0xf4>)
 80002b4:	00d2      	lsls	r2, r2, #3
 80002b6:	58d0      	ldr	r0, [r2, r3]
 80002b8:	1dbb      	adds	r3, r7, #6
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000368 <scanMatrix+0xf4>)
 80002be:	00db      	lsls	r3, r3, #3
 80002c0:	18d3      	adds	r3, r2, r3
 80002c2:	3304      	adds	r3, #4
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	0019      	movs	r1, r3
 80002c8:	f7ff ffaa 	bl	8000220 <LL_GPIO_IsInputPinSet>
 80002cc:	0003      	movs	r3, r0
 80002ce:	603b      	str	r3, [r7, #0]
			if (current_row_state == 1) {
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d10f      	bne.n	80002f6 <scanMatrix+0x82>
				// Key was pressed! Or maybe... (debouncing will figure out the truth)
				// For now (before debouncing implementation), assume pressed
				matrix_scan_result[row][col] = 1;	// Mark key (row state) as pressed
 80002d6:	1dbb      	adds	r3, r7, #6
 80002d8:	781a      	ldrb	r2, [r3, #0]
 80002da:	1dfb      	adds	r3, r7, #7
 80002dc:	7819      	ldrb	r1, [r3, #0]
 80002de:	4823      	ldr	r0, [pc, #140]	@ (800036c <scanMatrix+0xf8>)
 80002e0:	0013      	movs	r3, r2
 80002e2:	005b      	lsls	r3, r3, #1
 80002e4:	189b      	adds	r3, r3, r2
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	18c3      	adds	r3, r0, r3
 80002ea:	2201      	movs	r2, #1
 80002ec:	545a      	strb	r2, [r3, r1]
				key_pressed = 1;
 80002ee:	1d7b      	adds	r3, r7, #5
 80002f0:	2201      	movs	r2, #1
 80002f2:	701a      	strb	r2, [r3, #0]
 80002f4:	e00e      	b.n	8000314 <scanMatrix+0xa0>
			} else if (current_row_state == 0) {
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d10b      	bne.n	8000314 <scanMatrix+0xa0>
				matrix_scan_result[row][col] = 0;	// Mark key (row state) as not pressed
 80002fc:	1dbb      	adds	r3, r7, #6
 80002fe:	781a      	ldrb	r2, [r3, #0]
 8000300:	1dfb      	adds	r3, r7, #7
 8000302:	7819      	ldrb	r1, [r3, #0]
 8000304:	4819      	ldr	r0, [pc, #100]	@ (800036c <scanMatrix+0xf8>)
 8000306:	0013      	movs	r3, r2
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	189b      	adds	r3, r3, r2
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	18c3      	adds	r3, r0, r3
 8000310:	2200      	movs	r2, #0
 8000312:	545a      	strb	r2, [r3, r1]
		for (row = 0; row < NUM_ROWS; row++) {
 8000314:	1dbb      	adds	r3, r7, #6
 8000316:	781a      	ldrb	r2, [r3, #0]
 8000318:	1dbb      	adds	r3, r7, #6
 800031a:	3201      	adds	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
 800031e:	1dbb      	adds	r3, r7, #6
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b03      	cmp	r3, #3
 8000324:	d9c3      	bls.n	80002ae <scanMatrix+0x3a>
			}
			// No delay needed between columns
		}

		// Return column to low
		LL_GPIO_ResetOutputPin(col_pins[col].port, col_pins[col].pin);
 8000326:	1dfb      	adds	r3, r7, #7
 8000328:	781a      	ldrb	r2, [r3, #0]
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <scanMatrix+0xf0>)
 800032c:	00d2      	lsls	r2, r2, #3
 800032e:	58d0      	ldr	r0, [r2, r3]
 8000330:	1dfb      	adds	r3, r7, #7
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	4a0b      	ldr	r2, [pc, #44]	@ (8000364 <scanMatrix+0xf0>)
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	18d3      	adds	r3, r2, r3
 800033a:	3304      	adds	r3, #4
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	0019      	movs	r1, r3
 8000340:	f7ff ff8c 	bl	800025c <LL_GPIO_ResetOutputPin>
	for (col = 0; col < NUM_COLS; col++) {
 8000344:	1dfb      	adds	r3, r7, #7
 8000346:	781a      	ldrb	r2, [r3, #0]
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	3201      	adds	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
 800034e:	1dfb      	adds	r3, r7, #7
 8000350:	781b      	ldrb	r3, [r3, #0]
 8000352:	2b0b      	cmp	r3, #11
 8000354:	d998      	bls.n	8000288 <scanMatrix+0x14>
	}

	return key_pressed;
 8000356:	1d7b      	adds	r3, r7, #5
 8000358:	781b      	ldrb	r3, [r3, #0]
}
 800035a:	0018      	movs	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	b002      	add	sp, #8
 8000360:	bd80      	pop	{r7, pc}
 8000362:	46c0      	nop			@ (mov r8, r8)
 8000364:	0800869c 	.word	0x0800869c
 8000368:	080086fc 	.word	0x080086fc
 800036c:	20000248 	.word	0x20000248

08000370 <isModKey>:
		LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);

	return key_pressed;
}

uint8_t isModKey(uint8_t scan_result[NUM_ROWS][NUM_COLS]) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]

	uint8_t mod_key_byte = 0;
 8000378:	210f      	movs	r1, #15
 800037a:	187b      	adds	r3, r7, r1
 800037c:	2200      	movs	r2, #0
 800037e:	701a      	strb	r2, [r3, #0]

	if (scan_result[2][11]) {
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3318      	adds	r3, #24
 8000384:	7adb      	ldrb	r3, [r3, #11]
 8000386:	2b00      	cmp	r3, #0
 8000388:	d005      	beq.n	8000396 <isModKey+0x26>
		mod_key_byte |= KEY_LEFT_SHIFT;
 800038a:	187b      	adds	r3, r7, r1
 800038c:	187a      	adds	r2, r7, r1
 800038e:	7812      	ldrb	r2, [r2, #0]
 8000390:	2102      	movs	r1, #2
 8000392:	430a      	orrs	r2, r1
 8000394:	701a      	strb	r2, [r3, #0]
	}
	if (scan_result[3][0]) {
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	3324      	adds	r3, #36	@ 0x24
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b00      	cmp	r3, #0
 800039e:	d006      	beq.n	80003ae <isModKey+0x3e>
		// Left ctrl
		mod_key_byte |= KEY_LEFT_CTRL;
 80003a0:	220f      	movs	r2, #15
 80003a2:	18bb      	adds	r3, r7, r2
 80003a4:	18ba      	adds	r2, r7, r2
 80003a6:	7812      	ldrb	r2, [r2, #0]
 80003a8:	2101      	movs	r1, #1
 80003aa:	430a      	orrs	r2, r1
 80003ac:	701a      	strb	r2, [r3, #0]
	}
	if (scan_result[3][1]) {
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	3324      	adds	r3, #36	@ 0x24
 80003b2:	785b      	ldrb	r3, [r3, #1]
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d006      	beq.n	80003c6 <isModKey+0x56>
		// Left win
		mod_key_byte |= KEY_LEFT_GUI;
 80003b8:	220f      	movs	r2, #15
 80003ba:	18bb      	adds	r3, r7, r2
 80003bc:	18ba      	adds	r2, r7, r2
 80003be:	7812      	ldrb	r2, [r2, #0]
 80003c0:	2108      	movs	r1, #8
 80003c2:	430a      	orrs	r2, r1
 80003c4:	701a      	strb	r2, [r3, #0]
	}
	if (scan_result[3][2]) {
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	3324      	adds	r3, #36	@ 0x24
 80003ca:	789b      	ldrb	r3, [r3, #2]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d006      	beq.n	80003de <isModKey+0x6e>
		// Left alt
		mod_key_byte |= KEY_LEFT_ALT;
 80003d0:	220f      	movs	r2, #15
 80003d2:	18bb      	adds	r3, r7, r2
 80003d4:	18ba      	adds	r2, r7, r2
 80003d6:	7812      	ldrb	r2, [r2, #0]
 80003d8:	2104      	movs	r1, #4
 80003da:	430a      	orrs	r2, r1
 80003dc:	701a      	strb	r2, [r3, #0]
	}
	if (scan_result[2][0]) {
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	3318      	adds	r3, #24
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d006      	beq.n	80003f6 <isModKey+0x86>
		// Left shift
		mod_key_byte |= KEY_LEFT_SHIFT;
 80003e8:	220f      	movs	r2, #15
 80003ea:	18bb      	adds	r3, r7, r2
 80003ec:	18ba      	adds	r2, r7, r2
 80003ee:	7812      	ldrb	r2, [r2, #0]
 80003f0:	2102      	movs	r1, #2
 80003f2:	430a      	orrs	r2, r1
 80003f4:	701a      	strb	r2, [r3, #0]
	}

	return mod_key_byte;
 80003f6:	230f      	movs	r3, #15
 80003f8:	18fb      	adds	r3, r7, r3
 80003fa:	781b      	ldrb	r3, [r3, #0]
}
 80003fc:	0018      	movs	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	b004      	add	sp, #16
 8000402:	bd80      	pop	{r7, pc}

08000404 <isFnKey>:

uint8_t isFnKey(uint8_t scan_result[NUM_ROWS][NUM_COLS]) {
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	if (scan_result[3][3] == 1 || scan_result[3][7] == 1) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3324      	adds	r3, #36	@ 0x24
 8000410:	78db      	ldrb	r3, [r3, #3]
 8000412:	2b01      	cmp	r3, #1
 8000414:	d004      	beq.n	8000420 <isFnKey+0x1c>
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3324      	adds	r3, #36	@ 0x24
 800041a:	79db      	ldrb	r3, [r3, #7]
 800041c:	2b01      	cmp	r3, #1
 800041e:	d101      	bne.n	8000424 <isFnKey+0x20>
			return 2;	// fn up
 8000420:	2302      	movs	r3, #2
 8000422:	e00e      	b.n	8000442 <isFnKey+0x3e>
		} else if (scan_result[3][4] == 1) {
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	3324      	adds	r3, #36	@ 0x24
 8000428:	791b      	ldrb	r3, [r3, #4]
 800042a:	2b01      	cmp	r3, #1
 800042c:	d101      	bne.n	8000432 <isFnKey+0x2e>
			return 1;	// fn down
 800042e:	2301      	movs	r3, #1
 8000430:	e007      	b.n	8000442 <isFnKey+0x3e>
		} else if (scan_result[3][10] == 1) {
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	3324      	adds	r3, #36	@ 0x24
 8000436:	7a9b      	ldrb	r3, [r3, #10]
 8000438:	2b01      	cmp	r3, #1
 800043a:	d101      	bne.n	8000440 <isFnKey+0x3c>
			return 3;	// fn
 800043c:	2303      	movs	r3, #3
 800043e:	e000      	b.n	8000442 <isFnKey+0x3e>
		}
		return 0;
 8000440:	2300      	movs	r3, #0
}
 8000442:	0018      	movs	r0, r3
 8000444:	46bd      	mov	sp, r7
 8000446:	b002      	add	sp, #8
 8000448:	bd80      	pop	{r7, pc}
	...

0800044c <capsWord>:

// Evaluate on every keypress
uint8_t capsWord(uint8_t scan_result[NUM_ROWS][NUM_COLS], uint8_t *caps_word, uint8_t fn) {
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	1dfb      	adds	r3, r7, #7
 8000458:	701a      	strb	r2, [r3, #0]

	// Caps word pressed, toggle state
	if (scan_result[2][11] == 1 && fn == 0) {
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	3318      	adds	r3, #24
 800045e:	7adb      	ldrb	r3, [r3, #11]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d10a      	bne.n	800047a <capsWord+0x2e>
 8000464:	1dfb      	adds	r3, r7, #7
 8000466:	781b      	ldrb	r3, [r3, #0]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d106      	bne.n	800047a <capsWord+0x2e>
		*caps_word ^= 1;	// Toggle caps word on state
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2201      	movs	r2, #1
 8000472:	4053      	eors	r3, r2
 8000474:	b2da      	uxtb	r2, r3
 8000476:	68bb      	ldr	r3, [r7, #8]
 8000478:	701a      	strb	r2, [r3, #0]
	}

	int i;
	// If normal keys not in the call list, set state to 0
	for (i = 2; i < 8; i++) {
 800047a:	2302      	movs	r3, #2
 800047c:	617b      	str	r3, [r7, #20]
 800047e:	e021      	b.n	80004c4 <capsWord+0x78>
		if (	(*caps_word == 1) &&
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	2b01      	cmp	r3, #1
 8000486:	d11a      	bne.n	80004be <capsWord+0x72>
				((HID_input_buffer[i] < 40) || 	// A-Z, 0-9, KEY_NONE
 8000488:	4a18      	ldr	r2, [pc, #96]	@ (80004ec <capsWord+0xa0>)
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	18d3      	adds	r3, r2, r3
 800048e:	781b      	ldrb	r3, [r3, #0]
		if (	(*caps_word == 1) &&
 8000490:	2b27      	cmp	r3, #39	@ 0x27
 8000492:	d911      	bls.n	80004b8 <capsWord+0x6c>
				(HID_input_buffer[i] == KEY_MINUS) || 
 8000494:	4a15      	ldr	r2, [pc, #84]	@ (80004ec <capsWord+0xa0>)
 8000496:	697b      	ldr	r3, [r7, #20]
 8000498:	18d3      	adds	r3, r2, r3
 800049a:	781b      	ldrb	r3, [r3, #0]
				((HID_input_buffer[i] < 40) || 	// A-Z, 0-9, KEY_NONE
 800049c:	2b2d      	cmp	r3, #45	@ 0x2d
 800049e:	d00b      	beq.n	80004b8 <capsWord+0x6c>
				(HID_input_buffer[i] == KEY_BACKSPACE) || 
 80004a0:	4a12      	ldr	r2, [pc, #72]	@ (80004ec <capsWord+0xa0>)
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	18d3      	adds	r3, r2, r3
 80004a6:	781b      	ldrb	r3, [r3, #0]
				(HID_input_buffer[i] == KEY_MINUS) || 
 80004a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80004aa:	d005      	beq.n	80004b8 <capsWord+0x6c>
				(HID_input_buffer[i] == KEY_DELETE))
 80004ac:	4a0f      	ldr	r2, [pc, #60]	@ (80004ec <capsWord+0xa0>)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	18d3      	adds	r3, r2, r3
 80004b2:	781b      	ldrb	r3, [r3, #0]
				(HID_input_buffer[i] == KEY_BACKSPACE) || 
 80004b4:	2b4c      	cmp	r3, #76	@ 0x4c
 80004b6:	d102      	bne.n	80004be <capsWord+0x72>
		) {
			*caps_word = 0;	
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	2200      	movs	r2, #0
 80004bc:	701a      	strb	r2, [r3, #0]
	for (i = 2; i < 8; i++) {
 80004be:	697b      	ldr	r3, [r7, #20]
 80004c0:	3301      	adds	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
 80004c4:	697b      	ldr	r3, [r7, #20]
 80004c6:	2b07      	cmp	r3, #7
 80004c8:	ddda      	ble.n	8000480 <capsWord+0x34>
		}
	}	

	// Set shift if caps word state is on (after toggling and checking for call list keys)
	if (*caps_word == 1) {
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	d106      	bne.n	80004e0 <capsWord+0x94>
		HID_input_buffer[0] |= KEY_LEFT_SHIFT;
 80004d2:	4b06      	ldr	r3, [pc, #24]	@ (80004ec <capsWord+0xa0>)
 80004d4:	781b      	ldrb	r3, [r3, #0]
 80004d6:	2202      	movs	r2, #2
 80004d8:	4313      	orrs	r3, r2
 80004da:	b2da      	uxtb	r2, r3
 80004dc:	4b03      	ldr	r3, [pc, #12]	@ (80004ec <capsWord+0xa0>)
 80004de:	701a      	strb	r2, [r3, #0]
	}


	return 0;
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	0018      	movs	r0, r3
 80004e4:	46bd      	mov	sp, r7
 80004e6:	b006      	add	sp, #24
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	2000023c 	.word	0x2000023c

080004f0 <fillHidInputBuffer>:
		}
	}
	return 0;
}

void fillHidInputBuffer() {
 80004f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004f2:	b087      	sub	sp, #28
 80004f4:	af00      	add	r7, sp, #0
	int i, j;
	uint8_t fn;
	int count = 0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
	uint8_t current_key, mod_key_pressed_at_all = 0, norm_key_pressed_at_all = 0;
 80004fa:	250b      	movs	r5, #11
 80004fc:	197b      	adds	r3, r7, r5
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
 8000502:	230a      	movs	r3, #10
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]

	// Check fn layer keys to switch layers
	fn = isFnKey(matrix_scan_result);	// 0 if no fn key, 1 if fn up, 2 if fn down, 3 if fn
 800050a:	2609      	movs	r6, #9
 800050c:	19bc      	adds	r4, r7, r6
 800050e:	4b8f      	ldr	r3, [pc, #572]	@ (800074c <fillHidInputBuffer+0x25c>)
 8000510:	0018      	movs	r0, r3
 8000512:	f7ff ff77 	bl	8000404 <isFnKey>
 8000516:	0003      	movs	r3, r0
 8000518:	7023      	strb	r3, [r4, #0]
	int row_offset = fn * 4;
 800051a:	19bb      	adds	r3, r7, r6
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	607b      	str	r3, [r7, #4]
	==========================================================================================================
	========== NOTE: CHECKING MOD KEYS IN THIS METHOD ONLY WORKS IF THEY ARE PRESENT IN EVERY LAYER ==========
								Otherwise, we need to check using the current_key
	==========================================================================================================
*/
	uint8_t mod_key_byte = isModKey(matrix_scan_result);	// Mod key byte
 8000522:	1cfc      	adds	r4, r7, #3
 8000524:	4b89      	ldr	r3, [pc, #548]	@ (800074c <fillHidInputBuffer+0x25c>)
 8000526:	0018      	movs	r0, r3
 8000528:	f7ff ff22 	bl	8000370 <isModKey>
 800052c:	0003      	movs	r3, r0
 800052e:	7023      	strb	r3, [r4, #0]
	if (mod_key_byte) {
 8000530:	1cfb      	adds	r3, r7, #3
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d006      	beq.n	8000546 <fillHidInputBuffer+0x56>
		mod_key_pressed_at_all = 1;		// Mark that a mod key was pressed
 8000538:	197b      	adds	r3, r7, r5
 800053a:	2201      	movs	r2, #1
 800053c:	701a      	strb	r2, [r3, #0]
		HID_input_buffer[0] = mod_key_byte;
 800053e:	4b84      	ldr	r3, [pc, #528]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000540:	1cfa      	adds	r2, r7, #3
 8000542:	7812      	ldrb	r2, [r2, #0]
 8000544:	701a      	strb	r2, [r3, #0]

	// Caps word: If caps lock is on, set shift 


	// Check all other keys: Traverse matrix_scan_result
	for (i = 0; i < NUM_ROWS; i++) {
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
 800054a:	e0c4      	b.n	80006d6 <fillHidInputBuffer+0x1e6>
		for (j = 0; j < NUM_COLS; j++) {
 800054c:	2300      	movs	r3, #0
 800054e:	613b      	str	r3, [r7, #16]
 8000550:	e0ba      	b.n	80006c8 <fillHidInputBuffer+0x1d8>

			current_key = usb_keymap[row_offset + i][j];		// Current key to be checked
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	697b      	ldr	r3, [r7, #20]
 8000556:	18d2      	adds	r2, r2, r3
 8000558:	1cb9      	adds	r1, r7, #2
 800055a:	487e      	ldr	r0, [pc, #504]	@ (8000754 <fillHidInputBuffer+0x264>)
 800055c:	0013      	movs	r3, r2
 800055e:	005b      	lsls	r3, r3, #1
 8000560:	189b      	adds	r3, r3, r2
 8000562:	009b      	lsls	r3, r3, #2
 8000564:	18c2      	adds	r2, r0, r3
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	18d3      	adds	r3, r2, r3
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	700b      	strb	r3, [r1, #0]
			
			// Check buffer overflow
			if (count >= 6) {					
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b05      	cmp	r3, #5
 8000572:	dd12      	ble.n	800059a <fillHidInputBuffer+0xaa>
				HID_input_buffer[2] = KEY_ERR_OVF;
 8000574:	4b76      	ldr	r3, [pc, #472]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000576:	2201      	movs	r2, #1
 8000578:	709a      	strb	r2, [r3, #2]
				HID_input_buffer[3] = KEY_ERR_OVF;
 800057a:	4b75      	ldr	r3, [pc, #468]	@ (8000750 <fillHidInputBuffer+0x260>)
 800057c:	2201      	movs	r2, #1
 800057e:	70da      	strb	r2, [r3, #3]
				HID_input_buffer[4] = KEY_ERR_OVF;
 8000580:	4b73      	ldr	r3, [pc, #460]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000582:	2201      	movs	r2, #1
 8000584:	711a      	strb	r2, [r3, #4]
				HID_input_buffer[5] = KEY_ERR_OVF;
 8000586:	4b72      	ldr	r3, [pc, #456]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000588:	2201      	movs	r2, #1
 800058a:	715a      	strb	r2, [r3, #5]
				HID_input_buffer[6] = KEY_ERR_OVF;
 800058c:	4b70      	ldr	r3, [pc, #448]	@ (8000750 <fillHidInputBuffer+0x260>)
 800058e:	2201      	movs	r2, #1
 8000590:	719a      	strb	r2, [r3, #6]
				HID_input_buffer[7] = KEY_ERR_OVF;
 8000592:	4b6f      	ldr	r3, [pc, #444]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000594:	2201      	movs	r2, #1
 8000596:	71da      	strb	r2, [r3, #7]
				return;
 8000598:	e0d4      	b.n	8000744 <fillHidInputBuffer+0x254>
			}

			// Check all other keys (non-mod/fn keys)
			if (
				(matrix_scan_result[i][j] == 1) &&
 800059a:	496c      	ldr	r1, [pc, #432]	@ (800074c <fillHidInputBuffer+0x25c>)
 800059c:	697a      	ldr	r2, [r7, #20]
 800059e:	0013      	movs	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	189b      	adds	r3, r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	18ca      	adds	r2, r1, r3
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	18d3      	adds	r3, r2, r3
 80005ac:	781b      	ldrb	r3, [r3, #0]
			if (
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d000      	beq.n	80005b4 <fillHidInputBuffer+0xc4>
 80005b2:	e086      	b.n	80006c2 <fillHidInputBuffer+0x1d2>
				(matrix_scan_result[i][j] == 1) &&
 80005b4:	1cbb      	adds	r3, r7, #2
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d100      	bne.n	80005be <fillHidInputBuffer+0xce>
 80005bc:	e081      	b.n	80006c2 <fillHidInputBuffer+0x1d2>
				(current_key != KEY_LEFT_CTRL) &&
 80005be:	1cbb      	adds	r3, r7, #2
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	2b02      	cmp	r3, #2
 80005c4:	d100      	bne.n	80005c8 <fillHidInputBuffer+0xd8>
 80005c6:	e07c      	b.n	80006c2 <fillHidInputBuffer+0x1d2>
				//(current_key != KEY_LEFT_GUI) &&
				//(current_key != KEY_LEFT_ALT) &&
				(current_key != KEY_LEFT_SHIFT) &&
 80005c8:	1cbb      	adds	r3, r7, #2
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d100      	bne.n	80005d2 <fillHidInputBuffer+0xe2>
 80005d0:	e077      	b.n	80006c2 <fillHidInputBuffer+0x1d2>
					#define KEY_RIGHT_SHIFT 0x20
					#define KEY_RIGHT_ALT   0x40
					#define KEY_RIGHT_GUI   0x80
				*/
				// Check scan_result[][] directly
				if (	current_key == 4 ||
 80005d2:	1cbb      	adds	r3, r7, #2
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b04      	cmp	r3, #4
 80005d8:	d013      	beq.n	8000602 <fillHidInputBuffer+0x112>
 80005da:	1cbb      	adds	r3, r7, #2
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b08      	cmp	r3, #8
 80005e0:	d00f      	beq.n	8000602 <fillHidInputBuffer+0x112>
						current_key == 8 ||
 80005e2:	1cbb      	adds	r3, r7, #2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b10      	cmp	r3, #16
 80005e8:	d00b      	beq.n	8000602 <fillHidInputBuffer+0x112>
						current_key == 0x10 ||
 80005ea:	1cbb      	adds	r3, r7, #2
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b20      	cmp	r3, #32
 80005f0:	d007      	beq.n	8000602 <fillHidInputBuffer+0x112>
						current_key == 0x20 ||
 80005f2:	1cbb      	adds	r3, r7, #2
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	2b40      	cmp	r3, #64	@ 0x40
 80005f8:	d003      	beq.n	8000602 <fillHidInputBuffer+0x112>
						current_key == 0x40 ||
 80005fa:	1cbb      	adds	r3, r7, #2
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	2b80      	cmp	r3, #128	@ 0x80
 8000600:	d152      	bne.n	80006a8 <fillHidInputBuffer+0x1b8>
						current_key == 0x80
					) {
					if (matrix_scan_result[0][3] == 1) {
 8000602:	4b52      	ldr	r3, [pc, #328]	@ (800074c <fillHidInputBuffer+0x25c>)
 8000604:	78db      	ldrb	r3, [r3, #3]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d10c      	bne.n	8000624 <fillHidInputBuffer+0x134>
						norm_key_pressed_at_all = 1;
 800060a:	230a      	movs	r3, #10
 800060c:	18fb      	adds	r3, r7, r3
 800060e:	2201      	movs	r2, #1
 8000610:	701a      	strb	r2, [r3, #0]
						HID_input_buffer[2 + count] = current_key;	// E or 3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3302      	adds	r3, #2
 8000616:	4a4e      	ldr	r2, [pc, #312]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000618:	1cb9      	adds	r1, r7, #2
 800061a:	7809      	ldrb	r1, [r1, #0]
 800061c:	54d1      	strb	r1, [r2, r3]
						count++;
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	3301      	adds	r3, #1
 8000622:	60fb      	str	r3, [r7, #12]
					}
					if (matrix_scan_result[1][1] == 1) {
 8000624:	4b49      	ldr	r3, [pc, #292]	@ (800074c <fillHidInputBuffer+0x25c>)
 8000626:	7b5b      	ldrb	r3, [r3, #13]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d10b      	bne.n	8000644 <fillHidInputBuffer+0x154>
						norm_key_pressed_at_all = 1;
 800062c:	230a      	movs	r3, #10
 800062e:	18fb      	adds	r3, r7, r3
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
						HID_input_buffer[2 + count] = 4;	// A
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	3302      	adds	r3, #2
 8000638:	4a45      	ldr	r2, [pc, #276]	@ (8000750 <fillHidInputBuffer+0x260>)
 800063a:	2104      	movs	r1, #4
 800063c:	54d1      	strb	r1, [r2, r3]
						count++;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
					}
					if (matrix_scan_result[2][7] == 1) {
 8000644:	4b41      	ldr	r3, [pc, #260]	@ (800074c <fillHidInputBuffer+0x25c>)
 8000646:	7fdb      	ldrb	r3, [r3, #31]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d10b      	bne.n	8000664 <fillHidInputBuffer+0x174>
						norm_key_pressed_at_all = 1;
 800064c:	230a      	movs	r3, #10
 800064e:	18fb      	adds	r3, r7, r3
 8000650:	2201      	movs	r2, #1
 8000652:	701a      	strb	r2, [r3, #0]
						HID_input_buffer[2 + count] = KEY_M;	// M
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3302      	adds	r3, #2
 8000658:	4a3d      	ldr	r2, [pc, #244]	@ (8000750 <fillHidInputBuffer+0x260>)
 800065a:	2110      	movs	r1, #16
 800065c:	54d1      	strb	r1, [r2, r3]
						count++;
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	3301      	adds	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]
					}
					if (matrix_scan_result[0][7] == 1) {
 8000664:	4b39      	ldr	r3, [pc, #228]	@ (800074c <fillHidInputBuffer+0x25c>)
 8000666:	79db      	ldrb	r3, [r3, #7]
 8000668:	2b01      	cmp	r3, #1
 800066a:	d10b      	bne.n	8000684 <fillHidInputBuffer+0x194>
						norm_key_pressed_at_all = 1;
 800066c:	230a      	movs	r3, #10
 800066e:	18fb      	adds	r3, r7, r3
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
						HID_input_buffer[2 + count] = 0x40;	// F7
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	3302      	adds	r3, #2
 8000678:	4a35      	ldr	r2, [pc, #212]	@ (8000750 <fillHidInputBuffer+0x260>)
 800067a:	2140      	movs	r1, #64	@ 0x40
 800067c:	54d1      	strb	r1, [r2, r3]
						count++;
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	3301      	adds	r3, #1
 8000682:	60fb      	str	r3, [r7, #12]
					}
					if (matrix_scan_result[3][9] == 1) {
 8000684:	4b31      	ldr	r3, [pc, #196]	@ (800074c <fillHidInputBuffer+0x25c>)
 8000686:	222d      	movs	r2, #45	@ 0x2d
 8000688:	5c9b      	ldrb	r3, [r3, r2]
 800068a:	2b01      	cmp	r3, #1
 800068c:	d119      	bne.n	80006c2 <fillHidInputBuffer+0x1d2>
						norm_key_pressed_at_all = 1;
 800068e:	230a      	movs	r3, #10
 8000690:	18fb      	adds	r3, r7, r3
 8000692:	2201      	movs	r2, #1
 8000694:	701a      	strb	r2, [r3, #0]
						HID_input_buffer[2 + count] = 0x80;	// KEY_VOL_UP
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3302      	adds	r3, #2
 800069a:	4a2d      	ldr	r2, [pc, #180]	@ (8000750 <fillHidInputBuffer+0x260>)
 800069c:	2180      	movs	r1, #128	@ 0x80
 800069e:	54d1      	strb	r1, [r2, r3]
						count++;
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
					if (matrix_scan_result[3][9] == 1) {
 80006a6:	e00c      	b.n	80006c2 <fillHidInputBuffer+0x1d2>
					}
				} else {
					// Not E or A
					norm_key_pressed_at_all = 1;		// Mark that a normal key was pressed
 80006a8:	230a      	movs	r3, #10
 80006aa:	18fb      	adds	r3, r7, r3
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
					HID_input_buffer[2 + count] = current_key;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	3302      	adds	r3, #2
 80006b4:	4a26      	ldr	r2, [pc, #152]	@ (8000750 <fillHidInputBuffer+0x260>)
 80006b6:	1cb9      	adds	r1, r7, #2
 80006b8:	7809      	ldrb	r1, [r1, #0]
 80006ba:	54d1      	strb	r1, [r2, r3]
					count++;
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3301      	adds	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < NUM_COLS; j++) {
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	3301      	adds	r3, #1
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	2b0b      	cmp	r3, #11
 80006cc:	dc00      	bgt.n	80006d0 <fillHidInputBuffer+0x1e0>
 80006ce:	e740      	b.n	8000552 <fillHidInputBuffer+0x62>
	for (i = 0; i < NUM_ROWS; i++) {
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	3301      	adds	r3, #1
 80006d4:	617b      	str	r3, [r7, #20]
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	dc00      	bgt.n	80006de <fillHidInputBuffer+0x1ee>
 80006dc:	e736      	b.n	800054c <fillHidInputBuffer+0x5c>
			}
		}
	}

	// No keys pressed
	if (!mod_key_pressed_at_all) {
 80006de:	230b      	movs	r3, #11
 80006e0:	18fb      	adds	r3, r7, r3
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <fillHidInputBuffer+0x1fe>
		HID_input_buffer[0] = 0;
 80006e8:	4b19      	ldr	r3, [pc, #100]	@ (8000750 <fillHidInputBuffer+0x260>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]
	}
	if (!norm_key_pressed_at_all) {
 80006ee:	230a      	movs	r3, #10
 80006f0:	18fb      	adds	r3, r7, r3
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d111      	bne.n	800071c <fillHidInputBuffer+0x22c>
		HID_input_buffer[2] = 0;
 80006f8:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <fillHidInputBuffer+0x260>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	709a      	strb	r2, [r3, #2]
		HID_input_buffer[3] = 0;
 80006fe:	4b14      	ldr	r3, [pc, #80]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000700:	2200      	movs	r2, #0
 8000702:	70da      	strb	r2, [r3, #3]
		HID_input_buffer[4] = 0;
 8000704:	4b12      	ldr	r3, [pc, #72]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000706:	2200      	movs	r2, #0
 8000708:	711a      	strb	r2, [r3, #4]
		HID_input_buffer[5] = 0;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <fillHidInputBuffer+0x260>)
 800070c:	2200      	movs	r2, #0
 800070e:	715a      	strb	r2, [r3, #5]
		HID_input_buffer[6] = 0;
 8000710:	4b0f      	ldr	r3, [pc, #60]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000712:	2200      	movs	r2, #0
 8000714:	719a      	strb	r2, [r3, #6]
		HID_input_buffer[7] = 0;
 8000716:	4b0e      	ldr	r3, [pc, #56]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000718:	2200      	movs	r2, #0
 800071a:	71da      	strb	r2, [r3, #7]
	}

	// If SHIFT is tapped, send a QUOTE key
	if (mod_key_byte == KEY_LEFT_SHIFT && !norm_key_pressed_at_all) {
 800071c:	1cfb      	adds	r3, r7, #3
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b02      	cmp	r3, #2
 8000722:	d107      	bne.n	8000734 <fillHidInputBuffer+0x244>
 8000724:	230a      	movs	r3, #10
 8000726:	18fb      	adds	r3, r7, r3
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d102      	bne.n	8000734 <fillHidInputBuffer+0x244>
		HID_input_buffer[2] = KEY_QUOTE;
 800072e:	4b08      	ldr	r3, [pc, #32]	@ (8000750 <fillHidInputBuffer+0x260>)
 8000730:	2234      	movs	r2, #52	@ 0x34
 8000732:	709a      	strb	r2, [r3, #2]
		//HID_input_buffer[0] = 0;	// We want double quotes
	}

	// Caps word
	capsWord(matrix_scan_result, &caps_word, fn);
 8000734:	2309      	movs	r3, #9
 8000736:	18fb      	adds	r3, r7, r3
 8000738:	781a      	ldrb	r2, [r3, #0]
 800073a:	4907      	ldr	r1, [pc, #28]	@ (8000758 <fillHidInputBuffer+0x268>)
 800073c:	4b03      	ldr	r3, [pc, #12]	@ (800074c <fillHidInputBuffer+0x25c>)
 800073e:	0018      	movs	r0, r3
 8000740:	f7ff fe84 	bl	800044c <capsWord>
}
 8000744:	46bd      	mov	sp, r7
 8000746:	b007      	add	sp, #28
 8000748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	20000248 	.word	0x20000248
 8000750:	2000023c 	.word	0x2000023c
 8000754:	20000000 	.word	0x20000000
 8000758:	20000244 	.word	0x20000244

0800075c <fillHidInputReport>:

void fillHidInputReport() {
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
	int i;
	for (i = 0; i < 8; i++) {
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	e00b      	b.n	8000780 <fillHidInputReport+0x24>
		HID_input_report[i] = HID_input_buffer[i];
 8000768:	4a09      	ldr	r2, [pc, #36]	@ (8000790 <fillHidInputReport+0x34>)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	18d3      	adds	r3, r2, r3
 800076e:	7819      	ldrb	r1, [r3, #0]
 8000770:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <fillHidInputReport+0x38>)
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	18d3      	adds	r3, r2, r3
 8000776:	1c0a      	adds	r2, r1, #0
 8000778:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	3301      	adds	r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b07      	cmp	r3, #7
 8000784:	ddf0      	ble.n	8000768 <fillHidInputReport+0xc>
	}
}
 8000786:	46c0      	nop			@ (mov r8, r8)
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b002      	add	sp, #8
 800078e:	bd80      	pop	{r7, pc}
 8000790:	2000023c 	.word	0x2000023c
 8000794:	20000234 	.word	0x20000234

08000798 <sendHidReport>:

void sendHidReport() {
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	USBD_HID_SendReport(&hUsbDeviceFS, HID_input_report, 8);
 800079c:	4905      	ldr	r1, [pc, #20]	@ (80007b4 <sendHidReport+0x1c>)
 800079e:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <sendHidReport+0x20>)
 80007a0:	2208      	movs	r2, #8
 80007a2:	0018      	movs	r0, r3
 80007a4:	f006 f846 	bl	8006834 <USBD_HID_SendReport>
	HAL_Delay(15);		// USB processing time to finish
 80007a8:	200f      	movs	r0, #15
 80007aa:	f000 fbdf 	bl	8000f6c <HAL_Delay>
}
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000234 	.word	0x20000234
 80007b8:	200002cc 	.word	0x200002cc

080007bc <LL_GPIO_ResetOutputPin>:
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	683a      	ldr	r2, [r7, #0]
 80007ca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b002      	add	sp, #8
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <LL_AHB1_GRP1_EnableClock+0x28>)
 80007de:	6959      	ldr	r1, [r3, #20]
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <LL_AHB1_GRP1_EnableClock+0x28>)
 80007e2:	687a      	ldr	r2, [r7, #4]
 80007e4:	430a      	orrs	r2, r1
 80007e6:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80007e8:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <LL_AHB1_GRP1_EnableClock+0x28>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	4013      	ands	r3, r2
 80007f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007f2:	68fb      	ldr	r3, [r7, #12]
}
 80007f4:	46c0      	nop			@ (mov r8, r8)
 80007f6:	46bd      	mov	sp, r7
 80007f8:	b004      	add	sp, #16
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000

08000800 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fb4e 	bl	8000ea4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f822 	bl	8000850 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800080c:	f000 f8ce 	bl	80009ac <MX_GPIO_Init>
  MX_TIM1_Init();
 8000810:	f000 f872 	bl	80008f8 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000814:	f007 fa66 	bl	8007ce4 <MX_USB_DEVICE_Init>

  // Columns already initiated to high


  // Start timer
  HAL_TIM_Base_Start_IT(&htim1);	// Will throw interrupts automatically to be used in superloop
 8000818:	4b0b      	ldr	r3, [pc, #44]	@ (8000848 <main+0x48>)
 800081a:	0018      	movs	r0, r3
 800081c:	f003 f8f2 	bl	8003a04 <HAL_TIM_Base_Start_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Currently 10 Hz
	  if (timer1_interrupt == 1) {
 8000820:	4b0a      	ldr	r3, [pc, #40]	@ (800084c <main+0x4c>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d1fb      	bne.n	8000820 <main+0x20>
		scanMatrix();
 8000828:	f7ff fd24 	bl	8000274 <scanMatrix>
		fillHidInputBuffer();
 800082c:	f7ff fe60 	bl	80004f0 <fillHidInputBuffer>
		fillHidInputReport();
 8000830:	f7ff ff94 	bl	800075c <fillHidInputReport>
		sendHidReport();
 8000834:	f7ff ffb0 	bl	8000798 <sendHidReport>
		// Temporary debouncing delay?
		LL_mDelay(20);	// delay 20 ms
 8000838:	2014      	movs	r0, #20
 800083a:	f005 fe79 	bl	8006530 <LL_mDelay>

		// End of if, reset timer1_interrupt state to 0!
		timer1_interrupt = 0;
 800083e:	4b03      	ldr	r3, [pc, #12]	@ (800084c <main+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]
	  if (timer1_interrupt == 1) {
 8000844:	e7ec      	b.n	8000820 <main+0x20>
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	20000278 	.word	0x20000278
 800084c:	200002c0 	.word	0x200002c0

08000850 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b099      	sub	sp, #100	@ 0x64
 8000854:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	242c      	movs	r4, #44	@ 0x2c
 8000858:	193b      	adds	r3, r7, r4
 800085a:	0018      	movs	r0, r3
 800085c:	2334      	movs	r3, #52	@ 0x34
 800085e:	001a      	movs	r2, r3
 8000860:	2100      	movs	r1, #0
 8000862:	f007 fec7 	bl	80085f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000866:	231c      	movs	r3, #28
 8000868:	18fb      	adds	r3, r7, r3
 800086a:	0018      	movs	r0, r3
 800086c:	2310      	movs	r3, #16
 800086e:	001a      	movs	r2, r3
 8000870:	2100      	movs	r1, #0
 8000872:	f007 febf 	bl	80085f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000876:	003b      	movs	r3, r7
 8000878:	0018      	movs	r0, r3
 800087a:	231c      	movs	r3, #28
 800087c:	001a      	movs	r2, r3
 800087e:	2100      	movs	r1, #0
 8000880:	f007 feb8 	bl	80085f4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000884:	193b      	adds	r3, r7, r4
 8000886:	2220      	movs	r2, #32
 8000888:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800088a:	193b      	adds	r3, r7, r4
 800088c:	2201      	movs	r2, #1
 800088e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000890:	193b      	adds	r3, r7, r4
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000896:	193b      	adds	r3, r7, r4
 8000898:	0018      	movs	r0, r3
 800089a:	f002 fa93 	bl	8002dc4 <HAL_RCC_OscConfig>
 800089e:	1e03      	subs	r3, r0, #0
 80008a0:	d001      	beq.n	80008a6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80008a2:	f000 fa37 	bl	8000d14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a6:	211c      	movs	r1, #28
 80008a8:	187b      	adds	r3, r7, r1
 80008aa:	2207      	movs	r2, #7
 80008ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80008ae:	187b      	adds	r3, r7, r1
 80008b0:	2203      	movs	r2, #3
 80008b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b4:	187b      	adds	r3, r7, r1
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008ba:	187b      	adds	r3, r7, r1
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2101      	movs	r1, #1
 80008c4:	0018      	movs	r0, r3
 80008c6:	f002 fe03 	bl	80034d0 <HAL_RCC_ClockConfig>
 80008ca:	1e03      	subs	r3, r0, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80008ce:	f000 fa21 	bl	8000d14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80008d2:	003b      	movs	r3, r7
 80008d4:	2280      	movs	r2, #128	@ 0x80
 80008d6:	0292      	lsls	r2, r2, #10
 80008d8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80008da:	003b      	movs	r3, r7
 80008dc:	2200      	movs	r2, #0
 80008de:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008e0:	003b      	movs	r3, r7
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 ff40 	bl	8003768 <HAL_RCCEx_PeriphCLKConfig>
 80008e8:	1e03      	subs	r3, r0, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80008ec:	f000 fa12 	bl	8000d14 <Error_Handler>
  }
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b019      	add	sp, #100	@ 0x64
 80008f6:	bd90      	pop	{r4, r7, pc}

080008f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008fe:	2308      	movs	r3, #8
 8000900:	18fb      	adds	r3, r7, r3
 8000902:	0018      	movs	r0, r3
 8000904:	2310      	movs	r3, #16
 8000906:	001a      	movs	r2, r3
 8000908:	2100      	movs	r1, #0
 800090a:	f007 fe73 	bl	80085f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800090e:	003b      	movs	r3, r7
 8000910:	0018      	movs	r0, r3
 8000912:	2308      	movs	r3, #8
 8000914:	001a      	movs	r2, r3
 8000916:	2100      	movs	r1, #0
 8000918:	f007 fe6c 	bl	80085f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 800091e:	4a21      	ldr	r2, [pc, #132]	@ (80009a4 <MX_TIM1_Init+0xac>)
 8000920:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4800;
 8000922:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 8000924:	2296      	movs	r2, #150	@ 0x96
 8000926:	0152      	lsls	r2, r2, #5
 8000928:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800092a:	4b1d      	ldr	r3, [pc, #116]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000 - 1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 8000932:	4a1d      	ldr	r2, [pc, #116]	@ (80009a8 <MX_TIM1_Init+0xb0>)
 8000934:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b1a      	ldr	r3, [pc, #104]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800093c:	4b18      	ldr	r3, [pc, #96]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000942:	4b17      	ldr	r3, [pc, #92]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000948:	4b15      	ldr	r3, [pc, #84]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 800094a:	0018      	movs	r0, r3
 800094c:	f003 f80a 	bl	8003964 <HAL_TIM_Base_Init>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <MX_TIM1_Init+0x60>
  {
    Error_Handler();
 8000954:	f000 f9de 	bl	8000d14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000958:	2108      	movs	r1, #8
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2280      	movs	r2, #128	@ 0x80
 800095e:	0152      	lsls	r2, r2, #5
 8000960:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000962:	187a      	adds	r2, r7, r1
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 8000966:	0011      	movs	r1, r2
 8000968:	0018      	movs	r0, r3
 800096a:	f003 f98b 	bl	8003c84 <HAL_TIM_ConfigClockSource>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000972:	f000 f9cf 	bl	8000d14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000976:	003b      	movs	r3, r7
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800097c:	003b      	movs	r3, r7
 800097e:	2200      	movs	r2, #0
 8000980:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000982:	003a      	movs	r2, r7
 8000984:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <MX_TIM1_Init+0xa8>)
 8000986:	0011      	movs	r1, r2
 8000988:	0018      	movs	r0, r3
 800098a:	f003 fb97 	bl	80040bc <HAL_TIMEx_MasterConfigSynchronization>
 800098e:	1e03      	subs	r3, r0, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000992:	f000 f9bf 	bl	8000d14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b006      	add	sp, #24
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			@ (mov r8, r8)
 80009a0:	20000278 	.word	0x20000278
 80009a4:	40012c00 	.word	0x40012c00
 80009a8:	000003e7 	.word	0x000003e7

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	003b      	movs	r3, r7
 80009b4:	0018      	movs	r0, r3
 80009b6:	2318      	movs	r3, #24
 80009b8:	001a      	movs	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	f007 fe1a 	bl	80085f4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80009c0:	2380      	movs	r3, #128	@ 0x80
 80009c2:	029b      	lsls	r3, r3, #10
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff ff05 	bl	80007d4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80009ca:	2380      	movs	r3, #128	@ 0x80
 80009cc:	02db      	lsls	r3, r3, #11
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff ff00 	bl	80007d4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 80009d4:	2390      	movs	r3, #144	@ 0x90
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	2110      	movs	r1, #16
 80009da:	0018      	movs	r0, r3
 80009dc:	f7ff feee 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 80009e0:	2390      	movs	r3, #144	@ 0x90
 80009e2:	05db      	lsls	r3, r3, #23
 80009e4:	2120      	movs	r1, #32
 80009e6:	0018      	movs	r0, r3
 80009e8:	f7ff fee8 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 80009ec:	2390      	movs	r3, #144	@ 0x90
 80009ee:	05db      	lsls	r3, r3, #23
 80009f0:	2140      	movs	r1, #64	@ 0x40
 80009f2:	0018      	movs	r0, r3
 80009f4:	f7ff fee2 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 80009f8:	2390      	movs	r3, #144	@ 0x90
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	2180      	movs	r1, #128	@ 0x80
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fedc 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0);
 8000a04:	4bb8      	ldr	r3, [pc, #736]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff fed7 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000a0e:	4bb6      	ldr	r3, [pc, #728]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000a10:	2102      	movs	r1, #2
 8000a12:	0018      	movs	r0, r3
 8000a14:	f7ff fed2 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_2);
 8000a18:	4bb3      	ldr	r3, [pc, #716]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000a1a:	2104      	movs	r1, #4
 8000a1c:	0018      	movs	r0, r3
 8000a1e:	f7ff fecd 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10);
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	4ab0      	ldr	r2, [pc, #704]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000a28:	0019      	movs	r1, r3
 8000a2a:	0010      	movs	r0, r2
 8000a2c:	f7ff fec6 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_11);
 8000a30:	2380      	movs	r3, #128	@ 0x80
 8000a32:	011b      	lsls	r3, r3, #4
 8000a34:	4aac      	ldr	r2, [pc, #688]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000a36:	0019      	movs	r1, r3
 8000a38:	0010      	movs	r0, r2
 8000a3a:	f7ff febf 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000a3e:	4baa      	ldr	r3, [pc, #680]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000a40:	2110      	movs	r1, #16
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff feba 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000a48:	4ba7      	ldr	r3, [pc, #668]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000a4a:	2120      	movs	r1, #32
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f7ff feb5 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_6);
 8000a52:	4ba5      	ldr	r3, [pc, #660]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000a54:	2140      	movs	r1, #64	@ 0x40
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff feb0 	bl	80007bc <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	2210      	movs	r2, #16
 8000a60:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2201      	movs	r2, #1
 8000a66:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a68:	003b      	movs	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a74:	003b      	movs	r3, r7
 8000a76:	2200      	movs	r2, #0
 8000a78:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7a:	003a      	movs	r2, r7
 8000a7c:	2390      	movs	r3, #144	@ 0x90
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f003 fc41 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000a88:	003b      	movs	r3, r7
 8000a8a:	2220      	movs	r2, #32
 8000a8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a8e:	003b      	movs	r3, r7
 8000a90:	2201      	movs	r2, #1
 8000a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a94:	003b      	movs	r3, r7
 8000a96:	2200      	movs	r2, #0
 8000a98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a9a:	003b      	movs	r3, r7
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aa0:	003b      	movs	r3, r7
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	003a      	movs	r2, r7
 8000aa8:	2390      	movs	r3, #144	@ 0x90
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	0011      	movs	r1, r2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f003 fc2b 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000ab4:	003b      	movs	r3, r7
 8000ab6:	2240      	movs	r2, #64	@ 0x40
 8000ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000aba:	003b      	movs	r3, r7
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ac0:	003b      	movs	r3, r7
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ac6:	003b      	movs	r3, r7
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000acc:	003b      	movs	r3, r7
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad2:	003a      	movs	r2, r7
 8000ad4:	2390      	movs	r3, #144	@ 0x90
 8000ad6:	05db      	lsls	r3, r3, #23
 8000ad8:	0011      	movs	r1, r2
 8000ada:	0018      	movs	r0, r3
 8000adc:	f003 fc15 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000ae0:	003b      	movs	r3, r7
 8000ae2:	2280      	movs	r2, #128	@ 0x80
 8000ae4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000ae6:	003b      	movs	r3, r7
 8000ae8:	2201      	movs	r2, #1
 8000aea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aec:	003b      	movs	r3, r7
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000af2:	003b      	movs	r3, r7
 8000af4:	2200      	movs	r2, #0
 8000af6:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000af8:	003b      	movs	r3, r7
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	003a      	movs	r2, r7
 8000b00:	2390      	movs	r3, #144	@ 0x90
 8000b02:	05db      	lsls	r3, r3, #23
 8000b04:	0011      	movs	r1, r2
 8000b06:	0018      	movs	r0, r3
 8000b08:	f003 fbff 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000b0c:	003b      	movs	r3, r7
 8000b0e:	2201      	movs	r2, #1
 8000b10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2201      	movs	r2, #1
 8000b16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b18:	003b      	movs	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b1e:	003b      	movs	r3, r7
 8000b20:	2200      	movs	r2, #0
 8000b22:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b24:	003b      	movs	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2a:	003b      	movs	r3, r7
 8000b2c:	4a6e      	ldr	r2, [pc, #440]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000b2e:	0019      	movs	r1, r3
 8000b30:	0010      	movs	r0, r2
 8000b32:	f003 fbea 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8000b36:	003b      	movs	r3, r7
 8000b38:	2202      	movs	r2, #2
 8000b3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b3c:	003b      	movs	r3, r7
 8000b3e:	2201      	movs	r2, #1
 8000b40:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b42:	003b      	movs	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b48:	003b      	movs	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	003b      	movs	r3, r7
 8000b56:	4a64      	ldr	r2, [pc, #400]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000b58:	0019      	movs	r1, r3
 8000b5a:	0010      	movs	r0, r2
 8000b5c:	f003 fbd5 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000b60:	003b      	movs	r3, r7
 8000b62:	2204      	movs	r2, #4
 8000b64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b66:	003b      	movs	r3, r7
 8000b68:	2201      	movs	r2, #1
 8000b6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b6c:	003b      	movs	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b72:	003b      	movs	r3, r7
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b78:	003b      	movs	r3, r7
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7e:	003b      	movs	r3, r7
 8000b80:	4a59      	ldr	r2, [pc, #356]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000b82:	0019      	movs	r1, r3
 8000b84:	0010      	movs	r0, r2
 8000b86:	f003 fbc0 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b8a:	003b      	movs	r3, r7
 8000b8c:	2280      	movs	r2, #128	@ 0x80
 8000b8e:	00d2      	lsls	r2, r2, #3
 8000b90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000b92:	003b      	movs	r3, r7
 8000b94:	2201      	movs	r2, #1
 8000b96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000b98:	003b      	movs	r3, r7
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000baa:	003b      	movs	r3, r7
 8000bac:	4a4e      	ldr	r2, [pc, #312]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000bae:	0019      	movs	r1, r3
 8000bb0:	0010      	movs	r0, r2
 8000bb2:	f003 fbaa 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	2280      	movs	r2, #128	@ 0x80
 8000bba:	0112      	lsls	r2, r2, #4
 8000bbc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000bbe:	003b      	movs	r3, r7
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000bc4:	003b      	movs	r3, r7
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bca:	003b      	movs	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bd0:	003b      	movs	r3, r7
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd6:	003b      	movs	r3, r7
 8000bd8:	4a43      	ldr	r2, [pc, #268]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000bda:	0019      	movs	r1, r3
 8000bdc:	0010      	movs	r0, r2
 8000bde:	f003 fb94 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_14;
 8000be2:	003b      	movs	r3, r7
 8000be4:	2280      	movs	r2, #128	@ 0x80
 8000be6:	01d2      	lsls	r2, r2, #7
 8000be8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000bea:	003b      	movs	r3, r7
 8000bec:	2200      	movs	r2, #0
 8000bee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000bf0:	003b      	movs	r3, r7
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf6:	003a      	movs	r2, r7
 8000bf8:	2390      	movs	r3, #144	@ 0x90
 8000bfa:	05db      	lsls	r3, r3, #23
 8000bfc:	0011      	movs	r1, r2
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f003 fb83 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2280      	movs	r2, #128	@ 0x80
 8000c08:	0212      	lsls	r2, r2, #8
 8000c0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2202      	movs	r2, #2
 8000c16:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	003a      	movs	r2, r7
 8000c1a:	2390      	movs	r3, #144	@ 0x90
 8000c1c:	05db      	lsls	r3, r3, #23
 8000c1e:	0011      	movs	r1, r2
 8000c20:	0018      	movs	r0, r3
 8000c22:	f003 fb72 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000c26:	003b      	movs	r3, r7
 8000c28:	2208      	movs	r2, #8
 8000c2a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000c2c:	003b      	movs	r3, r7
 8000c2e:	2200      	movs	r2, #0
 8000c30:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000c32:	003b      	movs	r3, r7
 8000c34:	2202      	movs	r2, #2
 8000c36:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c38:	003b      	movs	r3, r7
 8000c3a:	4a2b      	ldr	r2, [pc, #172]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000c3c:	0019      	movs	r1, r3
 8000c3e:	0010      	movs	r0, r2
 8000c40:	f003 fb63 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000c44:	003b      	movs	r3, r7
 8000c46:	2210      	movs	r2, #16
 8000c48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c4a:	003b      	movs	r3, r7
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c50:	003b      	movs	r3, r7
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c56:	003b      	movs	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c5c:	003b      	movs	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	003b      	movs	r3, r7
 8000c64:	4a20      	ldr	r2, [pc, #128]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000c66:	0019      	movs	r1, r3
 8000c68:	0010      	movs	r0, r2
 8000c6a:	f003 fb4e 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8000c6e:	003b      	movs	r3, r7
 8000c70:	2220      	movs	r2, #32
 8000c72:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c74:	003b      	movs	r3, r7
 8000c76:	2201      	movs	r2, #1
 8000c78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c7a:	003b      	movs	r3, r7
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c80:	003b      	movs	r3, r7
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c86:	003b      	movs	r3, r7
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	003b      	movs	r3, r7
 8000c8e:	4a16      	ldr	r2, [pc, #88]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000c90:	0019      	movs	r1, r3
 8000c92:	0010      	movs	r0, r2
 8000c94:	f003 fb39 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8000c98:	003b      	movs	r3, r7
 8000c9a:	2240      	movs	r2, #64	@ 0x40
 8000c9c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000c9e:	003b      	movs	r3, r7
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ca4:	003b      	movs	r3, r7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000caa:	003b      	movs	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cb0:	003b      	movs	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb6:	003b      	movs	r3, r7
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000cba:	0019      	movs	r1, r3
 8000cbc:	0010      	movs	r0, r2
 8000cbe:	f003 fb24 	bl	800430a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8000cc2:	003b      	movs	r3, r7
 8000cc4:	2280      	movs	r2, #128	@ 0x80
 8000cc6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000cc8:	003b      	movs	r3, r7
 8000cca:	2200      	movs	r2, #0
 8000ccc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8000cce:	003b      	movs	r3, r7
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd4:	003b      	movs	r3, r7
 8000cd6:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <MX_GPIO_Init+0x33c>)
 8000cd8:	0019      	movs	r1, r3
 8000cda:	0010      	movs	r0, r2
 8000cdc:	f003 fb15 	bl	800430a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ce0:	46c0      	nop			@ (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b006      	add	sp, #24
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	48000400 	.word	0x48000400

08000cec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: Timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	4b05      	ldr	r3, [pc, #20]	@ (8000d0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d102      	bne.n	8000d02 <HAL_TIM_PeriodElapsedCallback+0x16>
		timer1_interrupt = 1;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	@ (8000d10 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
	}
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b002      	add	sp, #8
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	20000278 	.word	0x20000278
 8000d10:	200002c0 	.word	0x200002c0

08000d14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d18:	b672      	cpsid	i
}
 8000d1a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	e7fd      	b.n	8000d1c <Error_Handler+0x8>

08000d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d28:	699a      	ldr	r2, [r3, #24]
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	619a      	str	r2, [r3, #24]
 8000d32:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d34:	699b      	ldr	r3, [r3, #24]
 8000d36:	2201      	movs	r2, #1
 8000d38:	4013      	ands	r3, r2
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d40:	69da      	ldr	r2, [r3, #28]
 8000d42:	4b08      	ldr	r3, [pc, #32]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d44:	2180      	movs	r1, #128	@ 0x80
 8000d46:	0549      	lsls	r1, r1, #21
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	61da      	str	r2, [r3, #28]
 8000d4c:	4b05      	ldr	r3, [pc, #20]	@ (8000d64 <HAL_MspInit+0x44>)
 8000d4e:	69da      	ldr	r2, [r3, #28]
 8000d50:	2380      	movs	r3, #128	@ 0x80
 8000d52:	055b      	lsls	r3, r3, #21
 8000d54:	4013      	ands	r3, r2
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b002      	add	sp, #8
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	40021000 	.word	0x40021000

08000d68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <HAL_TIM_Base_MspInit+0x58>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d11d      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d7a:	4b12      	ldr	r3, [pc, #72]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x5c>)
 8000d7c:	699a      	ldr	r2, [r3, #24]
 8000d7e:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x5c>)
 8000d80:	2180      	movs	r1, #128	@ 0x80
 8000d82:	0109      	lsls	r1, r1, #4
 8000d84:	430a      	orrs	r2, r1
 8000d86:	619a      	str	r2, [r3, #24]
 8000d88:	4b0e      	ldr	r3, [pc, #56]	@ (8000dc4 <HAL_TIM_Base_MspInit+0x5c>)
 8000d8a:	699a      	ldr	r2, [r3, #24]
 8000d8c:	2380      	movs	r3, #128	@ 0x80
 8000d8e:	011b      	lsls	r3, r3, #4
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	200d      	movs	r0, #13
 8000d9c:	f000 f9b6 	bl	800110c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000da0:	200d      	movs	r0, #13
 8000da2:	f000 f9c8 	bl	8001136 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2100      	movs	r1, #0
 8000daa:	200e      	movs	r0, #14
 8000dac:	f000 f9ae 	bl	800110c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000db0:	200e      	movs	r0, #14
 8000db2:	f000 f9c0 	bl	8001136 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000db6:	46c0      	nop			@ (mov r8, r8)
 8000db8:	46bd      	mov	sp, r7
 8000dba:	b004      	add	sp, #16
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	40012c00 	.word	0x40012c00
 8000dc4:	40021000 	.word	0x40021000

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dcc:	46c0      	nop			@ (mov r8, r8)
 8000dce:	e7fd      	b.n	8000dcc <NMI_Handler+0x4>

08000dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd4:	46c0      	nop			@ (mov r8, r8)
 8000dd6:	e7fd      	b.n	8000dd4 <HardFault_Handler+0x4>

08000dd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ddc:	46c0      	nop			@ (mov r8, r8)
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de6:	46c0      	nop			@ (mov r8, r8)
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df0:	f000 f8a0 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df4:	46c0      	nop			@ (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
	...

08000dfc <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e00:	4b03      	ldr	r3, [pc, #12]	@ (8000e10 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f002 fe50 	bl	8003aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	20000278 	.word	0x20000278

08000e14 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e18:	4b03      	ldr	r3, [pc, #12]	@ (8000e28 <TIM1_CC_IRQHandler+0x14>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f002 fe44 	bl	8003aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000e20:	46c0      	nop			@ (mov r8, r8)
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			@ (mov r8, r8)
 8000e28:	20000278 	.word	0x20000278

08000e2c <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <USB_IRQHandler+0x14>)
 8000e32:	0018      	movs	r0, r3
 8000e34:	f000 fab6 	bl	80013a4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	46c0      	nop			@ (mov r8, r8)
 8000e40:	20000790 	.word	0x20000790

08000e44 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000e48:	46c0      	nop			@ (mov r8, r8)
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e50:	480d      	ldr	r0, [pc, #52]	@ (8000e88 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e52:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e54:	f7ff fff6 	bl	8000e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480c      	ldr	r0, [pc, #48]	@ (8000e8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5a:	490d      	ldr	r1, [pc, #52]	@ (8000e90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <LoopForever+0xe>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e70:	4c0a      	ldr	r4, [pc, #40]	@ (8000e9c <LoopForever+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e7e:	f007 fbc1 	bl	8008604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e82:	f7ff fcbd 	bl	8000800 <main>

08000e86 <LoopForever>:

LoopForever:
    b LoopForever
 8000e86:	e7fe      	b.n	8000e86 <LoopForever>
  ldr   r0, =_estack
 8000e88:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000e8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e90:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8000e94:	080087b4 	.word	0x080087b4
  ldr r2, =_sbss
 8000e98:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8000e9c:	20000a80 	.word	0x20000a80

08000ea0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ea0:	e7fe      	b.n	8000ea0 <ADC1_COMP_IRQHandler>
	...

08000ea4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <HAL_Init+0x24>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <HAL_Init+0x24>)
 8000eae:	2110      	movs	r1, #16
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000eb4:	2003      	movs	r0, #3
 8000eb6:	f000 f809 	bl	8000ecc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eba:	f7ff ff31 	bl	8000d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			@ (mov r8, r8)
 8000ec8:	40022000 	.word	0x40022000

08000ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <HAL_InitTick+0x5c>)
 8000ed6:	681c      	ldr	r4, [r3, #0]
 8000ed8:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <HAL_InitTick+0x60>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	0019      	movs	r1, r3
 8000ede:	23fa      	movs	r3, #250	@ 0xfa
 8000ee0:	0098      	lsls	r0, r3, #2
 8000ee2:	f7ff f911 	bl	8000108 <__udivsi3>
 8000ee6:	0003      	movs	r3, r0
 8000ee8:	0019      	movs	r1, r3
 8000eea:	0020      	movs	r0, r4
 8000eec:	f7ff f90c 	bl	8000108 <__udivsi3>
 8000ef0:	0003      	movs	r3, r0
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f000 f92f 	bl	8001156 <HAL_SYSTICK_Config>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000efc:	2301      	movs	r3, #1
 8000efe:	e00f      	b.n	8000f20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2b03      	cmp	r3, #3
 8000f04:	d80b      	bhi.n	8000f1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f06:	6879      	ldr	r1, [r7, #4]
 8000f08:	2301      	movs	r3, #1
 8000f0a:	425b      	negs	r3, r3
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 f8fc 	bl	800110c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4b06      	ldr	r3, [pc, #24]	@ (8000f30 <HAL_InitTick+0x64>)
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	0018      	movs	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b003      	add	sp, #12
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	200000c0 	.word	0x200000c0
 8000f2c:	200000c8 	.word	0x200000c8
 8000f30:	200000c4 	.word	0x200000c4

08000f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b05      	ldr	r3, [pc, #20]	@ (8000f50 <HAL_IncTick+0x1c>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	001a      	movs	r2, r3
 8000f3e:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	18d2      	adds	r2, r2, r3
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f46:	601a      	str	r2, [r3, #0]
}
 8000f48:	46c0      	nop			@ (mov r8, r8)
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			@ (mov r8, r8)
 8000f50:	200000c8 	.word	0x200000c8
 8000f54:	200002c4 	.word	0x200002c4

08000f58 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b02      	ldr	r3, [pc, #8]	@ (8000f68 <HAL_GetTick+0x10>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	0018      	movs	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	200002c4 	.word	0x200002c4

08000f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f74:	f7ff fff0 	bl	8000f58 <HAL_GetTick>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	3301      	adds	r3, #1
 8000f84:	d005      	beq.n	8000f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_Delay+0x44>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	189b      	adds	r3, r3, r2
 8000f90:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f92:	46c0      	nop			@ (mov r8, r8)
 8000f94:	f7ff ffe0 	bl	8000f58 <HAL_GetTick>
 8000f98:	0002      	movs	r2, r0
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	1ad3      	subs	r3, r2, r3
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d8f7      	bhi.n	8000f94 <HAL_Delay+0x28>
  {
  }
}
 8000fa4:	46c0      	nop			@ (mov r8, r8)
 8000fa6:	46c0      	nop			@ (mov r8, r8)
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	b004      	add	sp, #16
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	46c0      	nop			@ (mov r8, r8)
 8000fb0:	200000c8 	.word	0x200000c8

08000fb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	0002      	movs	r2, r0
 8000fbc:	1dfb      	adds	r3, r7, #7
 8000fbe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fc6:	d809      	bhi.n	8000fdc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc8:	1dfb      	adds	r3, r7, #7
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	001a      	movs	r2, r3
 8000fce:	231f      	movs	r3, #31
 8000fd0:	401a      	ands	r2, r3
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <__NVIC_EnableIRQ+0x30>)
 8000fd4:	2101      	movs	r1, #1
 8000fd6:	4091      	lsls	r1, r2
 8000fd8:	000a      	movs	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]
  }
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	b002      	add	sp, #8
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	e000e100 	.word	0xe000e100

08000fe8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	0002      	movs	r2, r0
 8000ff0:	6039      	str	r1, [r7, #0]
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ff6:	1dfb      	adds	r3, r7, #7
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ffc:	d828      	bhi.n	8001050 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <__NVIC_SetPriority+0xd4>)
 8001000:	1dfb      	adds	r3, r7, #7
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	089b      	lsrs	r3, r3, #2
 8001008:	33c0      	adds	r3, #192	@ 0xc0
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	589b      	ldr	r3, [r3, r2]
 800100e:	1dfa      	adds	r2, r7, #7
 8001010:	7812      	ldrb	r2, [r2, #0]
 8001012:	0011      	movs	r1, r2
 8001014:	2203      	movs	r2, #3
 8001016:	400a      	ands	r2, r1
 8001018:	00d2      	lsls	r2, r2, #3
 800101a:	21ff      	movs	r1, #255	@ 0xff
 800101c:	4091      	lsls	r1, r2
 800101e:	000a      	movs	r2, r1
 8001020:	43d2      	mvns	r2, r2
 8001022:	401a      	ands	r2, r3
 8001024:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	019b      	lsls	r3, r3, #6
 800102a:	22ff      	movs	r2, #255	@ 0xff
 800102c:	401a      	ands	r2, r3
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	0018      	movs	r0, r3
 8001034:	2303      	movs	r3, #3
 8001036:	4003      	ands	r3, r0
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800103c:	481f      	ldr	r0, [pc, #124]	@ (80010bc <__NVIC_SetPriority+0xd4>)
 800103e:	1dfb      	adds	r3, r7, #7
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	b25b      	sxtb	r3, r3
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	430a      	orrs	r2, r1
 8001048:	33c0      	adds	r3, #192	@ 0xc0
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800104e:	e031      	b.n	80010b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001050:	4a1b      	ldr	r2, [pc, #108]	@ (80010c0 <__NVIC_SetPriority+0xd8>)
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	0019      	movs	r1, r3
 8001058:	230f      	movs	r3, #15
 800105a:	400b      	ands	r3, r1
 800105c:	3b08      	subs	r3, #8
 800105e:	089b      	lsrs	r3, r3, #2
 8001060:	3306      	adds	r3, #6
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	18d3      	adds	r3, r2, r3
 8001066:	3304      	adds	r3, #4
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	1dfa      	adds	r2, r7, #7
 800106c:	7812      	ldrb	r2, [r2, #0]
 800106e:	0011      	movs	r1, r2
 8001070:	2203      	movs	r2, #3
 8001072:	400a      	ands	r2, r1
 8001074:	00d2      	lsls	r2, r2, #3
 8001076:	21ff      	movs	r1, #255	@ 0xff
 8001078:	4091      	lsls	r1, r2
 800107a:	000a      	movs	r2, r1
 800107c:	43d2      	mvns	r2, r2
 800107e:	401a      	ands	r2, r3
 8001080:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	019b      	lsls	r3, r3, #6
 8001086:	22ff      	movs	r2, #255	@ 0xff
 8001088:	401a      	ands	r2, r3
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	0018      	movs	r0, r3
 8001090:	2303      	movs	r3, #3
 8001092:	4003      	ands	r3, r0
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001098:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <__NVIC_SetPriority+0xd8>)
 800109a:	1dfb      	adds	r3, r7, #7
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	001c      	movs	r4, r3
 80010a0:	230f      	movs	r3, #15
 80010a2:	4023      	ands	r3, r4
 80010a4:	3b08      	subs	r3, #8
 80010a6:	089b      	lsrs	r3, r3, #2
 80010a8:	430a      	orrs	r2, r1
 80010aa:	3306      	adds	r3, #6
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	18c3      	adds	r3, r0, r3
 80010b0:	3304      	adds	r3, #4
 80010b2:	601a      	str	r2, [r3, #0]
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b003      	add	sp, #12
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	e000e100 	.word	0xe000e100
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	2380      	movs	r3, #128	@ 0x80
 80010d2:	045b      	lsls	r3, r3, #17
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d301      	bcc.n	80010dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d8:	2301      	movs	r3, #1
 80010da:	e010      	b.n	80010fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <SysTick_Config+0x44>)
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	3a01      	subs	r2, #1
 80010e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2103      	movs	r1, #3
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff ff7c 	bl	8000fe8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f0:	4b05      	ldr	r3, [pc, #20]	@ (8001108 <SysTick_Config+0x44>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f6:	4b04      	ldr	r3, [pc, #16]	@ (8001108 <SysTick_Config+0x44>)
 80010f8:	2207      	movs	r2, #7
 80010fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010fc:	2300      	movs	r3, #0
}
 80010fe:	0018      	movs	r0, r3
 8001100:	46bd      	mov	sp, r7
 8001102:	b002      	add	sp, #8
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			@ (mov r8, r8)
 8001108:	e000e010 	.word	0xe000e010

0800110c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	60b9      	str	r1, [r7, #8]
 8001114:	607a      	str	r2, [r7, #4]
 8001116:	210f      	movs	r1, #15
 8001118:	187b      	adds	r3, r7, r1
 800111a:	1c02      	adds	r2, r0, #0
 800111c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	187b      	adds	r3, r7, r1
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	b25b      	sxtb	r3, r3
 8001126:	0011      	movs	r1, r2
 8001128:	0018      	movs	r0, r3
 800112a:	f7ff ff5d 	bl	8000fe8 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	46bd      	mov	sp, r7
 8001132:	b004      	add	sp, #16
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	0002      	movs	r2, r0
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	0018      	movs	r0, r3
 800114a:	f7ff ff33 	bl	8000fb4 <__NVIC_EnableIRQ>
}
 800114e:	46c0      	nop			@ (mov r8, r8)
 8001150:	46bd      	mov	sp, r7
 8001152:	b002      	add	sp, #8
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	0018      	movs	r0, r3
 8001162:	f7ff ffaf 	bl	80010c4 <SysTick_Config>
 8001166:	0003      	movs	r3, r0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b085      	sub	sp, #20
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d101      	bne.n	8001182 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	e0e4      	b.n	800134c <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a73      	ldr	r2, [pc, #460]	@ (8001354 <HAL_PCD_Init+0x1e4>)
 8001186:	5c9b      	ldrb	r3, [r3, r2]
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d108      	bne.n	80011a0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	23a4      	movs	r3, #164	@ 0xa4
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	2100      	movs	r1, #0
 8001196:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	0018      	movs	r0, r3
 800119c:	f006 fef8 	bl	8007f90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a6c      	ldr	r2, [pc, #432]	@ (8001354 <HAL_PCD_Init+0x1e4>)
 80011a4:	2103      	movs	r1, #3
 80011a6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0018      	movs	r0, r3
 80011ae:	f003 f91f 	bl	80043f0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b2:	230f      	movs	r3, #15
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e047      	b.n	800124c <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011bc:	200f      	movs	r0, #15
 80011be:	183b      	adds	r3, r7, r0
 80011c0:	781a      	ldrb	r2, [r3, #0]
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	0013      	movs	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	189b      	adds	r3, r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	18cb      	adds	r3, r1, r3
 80011ce:	3311      	adds	r3, #17
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011d4:	183b      	adds	r3, r7, r0
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	6879      	ldr	r1, [r7, #4]
 80011da:	0013      	movs	r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	189b      	adds	r3, r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	18cb      	adds	r3, r1, r3
 80011e4:	3310      	adds	r3, #16
 80011e6:	183a      	adds	r2, r7, r0
 80011e8:	7812      	ldrb	r2, [r2, #0]
 80011ea:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011ec:	183b      	adds	r3, r7, r0
 80011ee:	781a      	ldrb	r2, [r3, #0]
 80011f0:	6879      	ldr	r1, [r7, #4]
 80011f2:	0013      	movs	r3, r2
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	189b      	adds	r3, r3, r2
 80011f8:	00db      	lsls	r3, r3, #3
 80011fa:	18cb      	adds	r3, r1, r3
 80011fc:	3313      	adds	r3, #19
 80011fe:	2200      	movs	r2, #0
 8001200:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001202:	183b      	adds	r3, r7, r0
 8001204:	781a      	ldrb	r2, [r3, #0]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	0013      	movs	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	189b      	adds	r3, r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	18cb      	adds	r3, r1, r3
 8001212:	3320      	adds	r3, #32
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001218:	183b      	adds	r3, r7, r0
 800121a:	781a      	ldrb	r2, [r3, #0]
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	0013      	movs	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	189b      	adds	r3, r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	18cb      	adds	r3, r1, r3
 8001228:	3324      	adds	r3, #36	@ 0x24
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800122e:	183b      	adds	r3, r7, r0
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	0013      	movs	r3, r2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	189b      	adds	r3, r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	2200      	movs	r2, #0
 8001240:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001242:	183b      	adds	r3, r7, r0
 8001244:	781a      	ldrb	r2, [r3, #0]
 8001246:	183b      	adds	r3, r7, r0
 8001248:	3201      	adds	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	791b      	ldrb	r3, [r3, #4]
 8001250:	210f      	movs	r1, #15
 8001252:	187a      	adds	r2, r7, r1
 8001254:	7812      	ldrb	r2, [r2, #0]
 8001256:	429a      	cmp	r2, r3
 8001258:	d3b0      	bcc.n	80011bc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800125a:	187b      	adds	r3, r7, r1
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
 8001260:	e056      	b.n	8001310 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001262:	240f      	movs	r4, #15
 8001264:	193b      	adds	r3, r7, r4
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	2352      	movs	r3, #82	@ 0x52
 800126c:	33ff      	adds	r3, #255	@ 0xff
 800126e:	0019      	movs	r1, r3
 8001270:	0013      	movs	r3, r2
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	189b      	adds	r3, r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	18c3      	adds	r3, r0, r3
 800127a:	185b      	adds	r3, r3, r1
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001280:	193b      	adds	r3, r7, r4
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	23a8      	movs	r3, #168	@ 0xa8
 8001288:	0059      	lsls	r1, r3, #1
 800128a:	0013      	movs	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	189b      	adds	r3, r3, r2
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	18c3      	adds	r3, r0, r3
 8001294:	185b      	adds	r3, r3, r1
 8001296:	193a      	adds	r2, r7, r4
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800129c:	193b      	adds	r3, r7, r4
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	2354      	movs	r3, #84	@ 0x54
 80012a4:	33ff      	adds	r3, #255	@ 0xff
 80012a6:	0019      	movs	r1, r3
 80012a8:	0013      	movs	r3, r2
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	189b      	adds	r3, r3, r2
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	18c3      	adds	r3, r0, r3
 80012b2:	185b      	adds	r3, r3, r1
 80012b4:	2200      	movs	r2, #0
 80012b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012b8:	193b      	adds	r3, r7, r4
 80012ba:	781a      	ldrb	r2, [r3, #0]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	23b0      	movs	r3, #176	@ 0xb0
 80012c0:	0059      	lsls	r1, r3, #1
 80012c2:	0013      	movs	r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	189b      	adds	r3, r3, r2
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	18c3      	adds	r3, r0, r3
 80012cc:	185b      	adds	r3, r3, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012d2:	193b      	adds	r3, r7, r4
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	23b2      	movs	r3, #178	@ 0xb2
 80012da:	0059      	lsls	r1, r3, #1
 80012dc:	0013      	movs	r3, r2
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	189b      	adds	r3, r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	18c3      	adds	r3, r0, r3
 80012e6:	185b      	adds	r3, r3, r1
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012ec:	193b      	adds	r3, r7, r4
 80012ee:	781a      	ldrb	r2, [r3, #0]
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	23b4      	movs	r3, #180	@ 0xb4
 80012f4:	0059      	lsls	r1, r3, #1
 80012f6:	0013      	movs	r3, r2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	189b      	adds	r3, r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	18c3      	adds	r3, r0, r3
 8001300:	185b      	adds	r3, r3, r1
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001306:	193b      	adds	r3, r7, r4
 8001308:	781a      	ldrb	r2, [r3, #0]
 800130a:	193b      	adds	r3, r7, r4
 800130c:	3201      	adds	r2, #1
 800130e:	701a      	strb	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	791b      	ldrb	r3, [r3, #4]
 8001314:	220f      	movs	r2, #15
 8001316:	18ba      	adds	r2, r7, r2
 8001318:	7812      	ldrb	r2, [r2, #0]
 800131a:	429a      	cmp	r2, r3
 800131c:	d3a1      	bcc.n	8001262 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6818      	ldr	r0, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6859      	ldr	r1, [r3, #4]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	f003 f87c 	bl	8004424 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a07      	ldr	r2, [pc, #28]	@ (8001354 <HAL_PCD_Init+0x1e4>)
 8001336:	2101      	movs	r1, #1
 8001338:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7a9b      	ldrb	r3, [r3, #10]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d103      	bne.n	800134a <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	0018      	movs	r0, r3
 8001346:	f001 fd07 	bl	8002d58 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	0018      	movs	r0, r3
 800134e:	46bd      	mov	sp, r7
 8001350:	b005      	add	sp, #20
 8001352:	bd90      	pop	{r4, r7, pc}
 8001354:	00000291 	.word	0x00000291

08001358 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	23a4      	movs	r3, #164	@ 0xa4
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	2b01      	cmp	r3, #1
 800136a:	d101      	bne.n	8001370 <HAL_PCD_Start+0x18>
 800136c:	2302      	movs	r3, #2
 800136e:	e014      	b.n	800139a <HAL_PCD_Start+0x42>
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	23a4      	movs	r3, #164	@ 0xa4
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	2101      	movs	r1, #1
 8001378:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	0018      	movs	r0, r3
 8001380:	f003 f820 	bl	80043c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	0018      	movs	r0, r3
 800138a:	f005 f815 	bl	80063b8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	23a4      	movs	r3, #164	@ 0xa4
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	2100      	movs	r1, #0
 8001396:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	0018      	movs	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	b002      	add	sp, #8
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	0018      	movs	r0, r3
 80013b2:	f005 f817 	bl	80063e4 <USB_ReadInterrupts>
 80013b6:	0003      	movs	r3, r0
 80013b8:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80013ba:	68fa      	ldr	r2, [r7, #12]
 80013bc:	2380      	movs	r3, #128	@ 0x80
 80013be:	021b      	lsls	r3, r3, #8
 80013c0:	4013      	ands	r3, r2
 80013c2:	d004      	beq.n	80013ce <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	0018      	movs	r0, r3
 80013c8:	f000 fb48 	bl	8001a5c <PCD_EP_ISR_Handler>

    return;
 80013cc:	e11d      	b.n	800160a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	2380      	movs	r3, #128	@ 0x80
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4013      	ands	r3, r2
 80013d6:	d015      	beq.n	8001404 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2244      	movs	r2, #68	@ 0x44
 80013de:	5a9b      	ldrh	r3, [r3, r2]
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	498a      	ldr	r1, [pc, #552]	@ (8001610 <HAL_PCD_IRQHandler+0x26c>)
 80013e8:	400a      	ands	r2, r1
 80013ea:	b291      	uxth	r1, r2
 80013ec:	2244      	movs	r2, #68	@ 0x44
 80013ee:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	0018      	movs	r0, r3
 80013f4:	f006 fe57 	bl	80080a6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2100      	movs	r1, #0
 80013fc:	0018      	movs	r0, r3
 80013fe:	f000 f915 	bl	800162c <HAL_PCD_SetAddress>

    return;
 8001402:	e102      	b.n	800160a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	2380      	movs	r3, #128	@ 0x80
 8001408:	01db      	lsls	r3, r3, #7
 800140a:	4013      	ands	r3, r2
 800140c:	d00c      	beq.n	8001428 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2244      	movs	r2, #68	@ 0x44
 8001414:	5a9b      	ldrh	r3, [r3, r2]
 8001416:	b29a      	uxth	r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	497d      	ldr	r1, [pc, #500]	@ (8001614 <HAL_PCD_IRQHandler+0x270>)
 800141e:	400a      	ands	r2, r1
 8001420:	b291      	uxth	r1, r2
 8001422:	2244      	movs	r2, #68	@ 0x44
 8001424:	5299      	strh	r1, [r3, r2]

    return;
 8001426:	e0f0      	b.n	800160a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	2380      	movs	r3, #128	@ 0x80
 800142c:	019b      	lsls	r3, r3, #6
 800142e:	4013      	ands	r3, r2
 8001430:	d00c      	beq.n	800144c <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2244      	movs	r2, #68	@ 0x44
 8001438:	5a9b      	ldrh	r3, [r3, r2]
 800143a:	b29a      	uxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4975      	ldr	r1, [pc, #468]	@ (8001618 <HAL_PCD_IRQHandler+0x274>)
 8001442:	400a      	ands	r2, r1
 8001444:	b291      	uxth	r1, r2
 8001446:	2244      	movs	r2, #68	@ 0x44
 8001448:	5299      	strh	r1, [r3, r2]

    return;
 800144a:	e0de      	b.n	800160a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	2380      	movs	r3, #128	@ 0x80
 8001450:	015b      	lsls	r3, r3, #5
 8001452:	4013      	ands	r3, r2
 8001454:	d038      	beq.n	80014c8 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2240      	movs	r2, #64	@ 0x40
 800145c:	5a9b      	ldrh	r3, [r3, r2]
 800145e:	b29a      	uxth	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2104      	movs	r1, #4
 8001466:	438a      	bics	r2, r1
 8001468:	b291      	uxth	r1, r2
 800146a:	2240      	movs	r2, #64	@ 0x40
 800146c:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2240      	movs	r2, #64	@ 0x40
 8001474:	5a9b      	ldrh	r3, [r3, r2]
 8001476:	b29a      	uxth	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2108      	movs	r1, #8
 800147e:	438a      	bics	r2, r1
 8001480:	b291      	uxth	r1, r2
 8001482:	2240      	movs	r2, #64	@ 0x40
 8001484:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8001486:	687a      	ldr	r2, [r7, #4]
 8001488:	23b2      	movs	r3, #178	@ 0xb2
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	5cd3      	ldrb	r3, [r2, r3]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d109      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	23b2      	movs	r3, #178	@ 0xb2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	2100      	movs	r1, #0
 800149a:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2100      	movs	r1, #0
 80014a0:	0018      	movs	r0, r3
 80014a2:	f001 fc83 	bl	8002dac <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	0018      	movs	r0, r3
 80014aa:	f006 fe3d 	bl	8008128 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2244      	movs	r2, #68	@ 0x44
 80014b4:	5a9b      	ldrh	r3, [r3, r2]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4957      	ldr	r1, [pc, #348]	@ (800161c <HAL_PCD_IRQHandler+0x278>)
 80014be:	400a      	ands	r2, r1
 80014c0:	b291      	uxth	r1, r2
 80014c2:	2244      	movs	r2, #68	@ 0x44
 80014c4:	5299      	strh	r1, [r3, r2]

    return;
 80014c6:	e0a0      	b.n	800160a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	2380      	movs	r3, #128	@ 0x80
 80014cc:	011b      	lsls	r3, r3, #4
 80014ce:	4013      	ands	r3, r2
 80014d0:	d028      	beq.n	8001524 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2240      	movs	r2, #64	@ 0x40
 80014d8:	5a9b      	ldrh	r3, [r3, r2]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2108      	movs	r1, #8
 80014e2:	430a      	orrs	r2, r1
 80014e4:	b291      	uxth	r1, r2
 80014e6:	2240      	movs	r2, #64	@ 0x40
 80014e8:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	2244      	movs	r2, #68	@ 0x44
 80014f0:	5a9b      	ldrh	r3, [r3, r2]
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4949      	ldr	r1, [pc, #292]	@ (8001620 <HAL_PCD_IRQHandler+0x27c>)
 80014fa:	400a      	ands	r2, r1
 80014fc:	b291      	uxth	r1, r2
 80014fe:	2244      	movs	r2, #68	@ 0x44
 8001500:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	2240      	movs	r2, #64	@ 0x40
 8001508:	5a9b      	ldrh	r3, [r3, r2]
 800150a:	b29a      	uxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2104      	movs	r1, #4
 8001512:	430a      	orrs	r2, r1
 8001514:	b291      	uxth	r1, r2
 8001516:	2240      	movs	r2, #64	@ 0x40
 8001518:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	0018      	movs	r0, r3
 800151e:	f006 fde7 	bl	80080f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001522:	e072      	b.n	800160a <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	4013      	ands	r3, r2
 800152a:	d046      	beq.n	80015ba <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2244      	movs	r2, #68	@ 0x44
 8001532:	5a9b      	ldrh	r3, [r3, r2]
 8001534:	b29a      	uxth	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2180      	movs	r1, #128	@ 0x80
 800153c:	438a      	bics	r2, r1
 800153e:	b291      	uxth	r1, r2
 8001540:	2244      	movs	r2, #68	@ 0x44
 8001542:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8001544:	687a      	ldr	r2, [r7, #4]
 8001546:	23b2      	movs	r3, #178	@ 0xb2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	5cd3      	ldrb	r3, [r2, r3]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d12f      	bne.n	80015b0 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2240      	movs	r2, #64	@ 0x40
 8001556:	5a9b      	ldrh	r3, [r3, r2]
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2104      	movs	r1, #4
 8001560:	430a      	orrs	r2, r1
 8001562:	b291      	uxth	r1, r2
 8001564:	2240      	movs	r2, #64	@ 0x40
 8001566:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2240      	movs	r2, #64	@ 0x40
 800156e:	5a9b      	ldrh	r3, [r3, r2]
 8001570:	b29a      	uxth	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2108      	movs	r1, #8
 8001578:	430a      	orrs	r2, r1
 800157a:	b291      	uxth	r1, r2
 800157c:	2240      	movs	r2, #64	@ 0x40
 800157e:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	23b2      	movs	r3, #178	@ 0xb2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	2101      	movs	r1, #1
 8001588:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2254      	movs	r2, #84	@ 0x54
 8001590:	5a9b      	ldrh	r3, [r3, r2]
 8001592:	b29b      	uxth	r3, r3
 8001594:	089b      	lsrs	r3, r3, #2
 8001596:	223c      	movs	r2, #60	@ 0x3c
 8001598:	4013      	ands	r3, r2
 800159a:	0019      	movs	r1, r3
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	23b3      	movs	r3, #179	@ 0xb3
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2101      	movs	r1, #1
 80015a8:	0018      	movs	r0, r3
 80015aa:	f001 fbff 	bl	8002dac <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80015ae:	e02c      	b.n	800160a <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	0018      	movs	r0, r3
 80015b4:	f006 fd9c 	bl	80080f0 <HAL_PCD_SuspendCallback>
    return;
 80015b8:	e027      	b.n	800160a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	2380      	movs	r3, #128	@ 0x80
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4013      	ands	r3, r2
 80015c2:	d010      	beq.n	80015e6 <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2244      	movs	r2, #68	@ 0x44
 80015ca:	5a9b      	ldrh	r3, [r3, r2]
 80015cc:	b29a      	uxth	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4914      	ldr	r1, [pc, #80]	@ (8001624 <HAL_PCD_IRQHandler+0x280>)
 80015d4:	400a      	ands	r2, r1
 80015d6:	b291      	uxth	r1, r2
 80015d8:	2244      	movs	r2, #68	@ 0x44
 80015da:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	0018      	movs	r0, r3
 80015e0:	f006 fd52 	bl	8008088 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80015e4:	e011      	b.n	800160a <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	2380      	movs	r3, #128	@ 0x80
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4013      	ands	r3, r2
 80015ee:	d00c      	beq.n	800160a <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2244      	movs	r2, #68	@ 0x44
 80015f6:	5a9b      	ldrh	r3, [r3, r2]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	490a      	ldr	r1, [pc, #40]	@ (8001628 <HAL_PCD_IRQHandler+0x284>)
 8001600:	400a      	ands	r2, r1
 8001602:	b291      	uxth	r1, r2
 8001604:	2244      	movs	r2, #68	@ 0x44
 8001606:	5299      	strh	r1, [r3, r2]

    return;
 8001608:	46c0      	nop			@ (mov r8, r8)
  }
}
 800160a:	46bd      	mov	sp, r7
 800160c:	b004      	add	sp, #16
 800160e:	bd80      	pop	{r7, pc}
 8001610:	fffffbff 	.word	0xfffffbff
 8001614:	ffffbfff 	.word	0xffffbfff
 8001618:	ffffdfff 	.word	0xffffdfff
 800161c:	ffffefff 	.word	0xffffefff
 8001620:	fffff7ff 	.word	0xfffff7ff
 8001624:	fffffdff 	.word	0xfffffdff
 8001628:	fffffeff 	.word	0xfffffeff

0800162c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	000a      	movs	r2, r1
 8001636:	1cfb      	adds	r3, r7, #3
 8001638:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	23a4      	movs	r3, #164	@ 0xa4
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	5cd3      	ldrb	r3, [r2, r3]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_PCD_SetAddress+0x1e>
 8001646:	2302      	movs	r3, #2
 8001648:	e016      	b.n	8001678 <HAL_PCD_SetAddress+0x4c>
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	23a4      	movs	r3, #164	@ 0xa4
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	2101      	movs	r1, #1
 8001652:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	1cfa      	adds	r2, r7, #3
 8001658:	7812      	ldrb	r2, [r2, #0]
 800165a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	1cfb      	adds	r3, r7, #3
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	0019      	movs	r1, r3
 8001666:	0010      	movs	r0, r2
 8001668:	f004 fe92 	bl	8006390 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	23a4      	movs	r3, #164	@ 0xa4
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	2100      	movs	r1, #0
 8001674:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b002      	add	sp, #8
 800167e:	bd80      	pop	{r7, pc}

08001680 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001680:	b590      	push	{r4, r7, lr}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	000c      	movs	r4, r1
 800168a:	0010      	movs	r0, r2
 800168c:	0019      	movs	r1, r3
 800168e:	1cfb      	adds	r3, r7, #3
 8001690:	1c22      	adds	r2, r4, #0
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	003b      	movs	r3, r7
 8001696:	1c02      	adds	r2, r0, #0
 8001698:	801a      	strh	r2, [r3, #0]
 800169a:	1cbb      	adds	r3, r7, #2
 800169c:	1c0a      	adds	r2, r1, #0
 800169e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016a0:	230b      	movs	r3, #11
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016a8:	1cfb      	adds	r3, r7, #3
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	da0f      	bge.n	80016d2 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016b2:	1cfb      	adds	r3, r7, #3
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2207      	movs	r2, #7
 80016b8:	401a      	ands	r2, r3
 80016ba:	0013      	movs	r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	189b      	adds	r3, r3, r2
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	3310      	adds	r3, #16
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	18d3      	adds	r3, r2, r3
 80016c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	2201      	movs	r2, #1
 80016ce:	705a      	strb	r2, [r3, #1]
 80016d0:	e00f      	b.n	80016f2 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016d2:	1cfb      	adds	r3, r7, #3
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2207      	movs	r2, #7
 80016d8:	401a      	ands	r2, r3
 80016da:	0013      	movs	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	189b      	adds	r3, r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	3351      	adds	r3, #81	@ 0x51
 80016e4:	33ff      	adds	r3, #255	@ 0xff
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	18d3      	adds	r3, r2, r3
 80016ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80016f2:	1cfb      	adds	r3, r7, #3
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2207      	movs	r2, #7
 80016f8:	4013      	ands	r3, r2
 80016fa:	b2da      	uxtb	r2, r3
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001700:	003b      	movs	r3, r7
 8001702:	881a      	ldrh	r2, [r3, #0]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1cba      	adds	r2, r7, #2
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001710:	1cbb      	adds	r3, r7, #2
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b02      	cmp	r3, #2
 8001716:	d102      	bne.n	800171e <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	23a4      	movs	r3, #164	@ 0xa4
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	5cd3      	ldrb	r3, [r2, r3]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d101      	bne.n	800172e <HAL_PCD_EP_Open+0xae>
 800172a:	2302      	movs	r3, #2
 800172c:	e013      	b.n	8001756 <HAL_PCD_EP_Open+0xd6>
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	23a4      	movs	r3, #164	@ 0xa4
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	2101      	movs	r1, #1
 8001736:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68fa      	ldr	r2, [r7, #12]
 800173e:	0011      	movs	r1, r2
 8001740:	0018      	movs	r0, r3
 8001742:	f002 fe8b 	bl	800445c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	23a4      	movs	r3, #164	@ 0xa4
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	2100      	movs	r1, #0
 800174e:	54d1      	strb	r1, [r2, r3]

  return ret;
 8001750:	230b      	movs	r3, #11
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	781b      	ldrb	r3, [r3, #0]
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b005      	add	sp, #20
 800175c:	bd90      	pop	{r4, r7, pc}

0800175e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	000a      	movs	r2, r1
 8001768:	1cfb      	adds	r3, r7, #3
 800176a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800176c:	1cfb      	adds	r3, r7, #3
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	b25b      	sxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	da0f      	bge.n	8001796 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001776:	1cfb      	adds	r3, r7, #3
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2207      	movs	r2, #7
 800177c:	401a      	ands	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	189b      	adds	r3, r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	3310      	adds	r3, #16
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	18d3      	adds	r3, r2, r3
 800178c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2201      	movs	r2, #1
 8001792:	705a      	strb	r2, [r3, #1]
 8001794:	e00f      	b.n	80017b6 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001796:	1cfb      	adds	r3, r7, #3
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2207      	movs	r2, #7
 800179c:	401a      	ands	r2, r3
 800179e:	0013      	movs	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	189b      	adds	r3, r3, r2
 80017a4:	00db      	lsls	r3, r3, #3
 80017a6:	3351      	adds	r3, #81	@ 0x51
 80017a8:	33ff      	adds	r3, #255	@ 0xff
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	18d3      	adds	r3, r2, r3
 80017ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80017b6:	1cfb      	adds	r3, r7, #3
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2207      	movs	r2, #7
 80017bc:	4013      	ands	r3, r2
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	23a4      	movs	r3, #164	@ 0xa4
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	5cd3      	ldrb	r3, [r2, r3]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d101      	bne.n	80017d4 <HAL_PCD_EP_Close+0x76>
 80017d0:	2302      	movs	r3, #2
 80017d2:	e011      	b.n	80017f8 <HAL_PCD_EP_Close+0x9a>
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	23a4      	movs	r3, #164	@ 0xa4
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	2101      	movs	r1, #1
 80017dc:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	0011      	movs	r1, r2
 80017e6:	0018      	movs	r0, r3
 80017e8:	f003 f9e0 	bl	8004bac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	23a4      	movs	r3, #164	@ 0xa4
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	2100      	movs	r1, #0
 80017f4:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}

08001800 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b086      	sub	sp, #24
 8001804:	af00      	add	r7, sp, #0
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	603b      	str	r3, [r7, #0]
 800180c:	200b      	movs	r0, #11
 800180e:	183b      	adds	r3, r7, r0
 8001810:	1c0a      	adds	r2, r1, #0
 8001812:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001814:	0001      	movs	r1, r0
 8001816:	187b      	adds	r3, r7, r1
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	2207      	movs	r2, #7
 800181c:	401a      	ands	r2, r3
 800181e:	0013      	movs	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	189b      	adds	r3, r3, r2
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	3351      	adds	r3, #81	@ 0x51
 8001828:	33ff      	adds	r3, #255	@ 0xff
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	18d3      	adds	r3, r2, r3
 800182e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2200      	movs	r2, #0
 8001846:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001848:	187b      	adds	r3, r7, r1
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2207      	movs	r2, #7
 800184e:	4013      	ands	r3, r2
 8001850:	b2da      	uxtb	r2, r3
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f003 fb64 	bl	8004f2c <USB_EPStartXfer>

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b006      	add	sp, #24
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	60f8      	str	r0, [r7, #12]
 8001876:	607a      	str	r2, [r7, #4]
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	200b      	movs	r0, #11
 800187c:	183b      	adds	r3, r7, r0
 800187e:	1c0a      	adds	r2, r1, #0
 8001880:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001882:	183b      	adds	r3, r7, r0
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2207      	movs	r2, #7
 8001888:	401a      	ands	r2, r3
 800188a:	0013      	movs	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	189b      	adds	r3, r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	3310      	adds	r3, #16
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	18d3      	adds	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	2224      	movs	r2, #36	@ 0x24
 80018aa:	2101      	movs	r1, #1
 80018ac:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2200      	movs	r2, #0
 80018b8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	2201      	movs	r2, #1
 80018be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018c0:	183b      	adds	r3, r7, r0
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	2207      	movs	r2, #7
 80018c6:	4013      	ands	r3, r2
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f003 fb28 	bl	8004f2c <USB_EPStartXfer>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	0018      	movs	r0, r3
 80018e0:	46bd      	mov	sp, r7
 80018e2:	b006      	add	sp, #24
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	b084      	sub	sp, #16
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
 80018ee:	000a      	movs	r2, r1
 80018f0:	1cfb      	adds	r3, r7, #3
 80018f2:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80018f4:	1cfb      	adds	r3, r7, #3
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2207      	movs	r2, #7
 80018fa:	4013      	ands	r3, r2
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	7912      	ldrb	r2, [r2, #4]
 8001900:	4293      	cmp	r3, r2
 8001902:	d901      	bls.n	8001908 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e046      	b.n	8001996 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001908:	1cfb      	adds	r3, r7, #3
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b25b      	sxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	da0f      	bge.n	8001932 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001912:	1cfb      	adds	r3, r7, #3
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2207      	movs	r2, #7
 8001918:	401a      	ands	r2, r3
 800191a:	0013      	movs	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	189b      	adds	r3, r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	3310      	adds	r3, #16
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	18d3      	adds	r3, r2, r3
 8001928:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	705a      	strb	r2, [r3, #1]
 8001930:	e00d      	b.n	800194e <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001932:	1cfb      	adds	r3, r7, #3
 8001934:	781a      	ldrb	r2, [r3, #0]
 8001936:	0013      	movs	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	189b      	adds	r3, r3, r2
 800193c:	00db      	lsls	r3, r3, #3
 800193e:	3351      	adds	r3, #81	@ 0x51
 8001940:	33ff      	adds	r3, #255	@ 0xff
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	18d3      	adds	r3, r2, r3
 8001946:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2200      	movs	r2, #0
 800194c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001954:	1cfb      	adds	r3, r7, #3
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2207      	movs	r2, #7
 800195a:	4013      	ands	r3, r2
 800195c:	b2da      	uxtb	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	23a4      	movs	r3, #164	@ 0xa4
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_PCD_EP_SetStall+0x8c>
 800196e:	2302      	movs	r3, #2
 8001970:	e011      	b.n	8001996 <HAL_PCD_EP_SetStall+0xb0>
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	23a4      	movs	r3, #164	@ 0xa4
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	2101      	movs	r1, #1
 800197a:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	0011      	movs	r1, r2
 8001984:	0018      	movs	r0, r3
 8001986:	f004 fc01 	bl	800618c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800198a:	687a      	ldr	r2, [r7, #4]
 800198c:	23a4      	movs	r3, #164	@ 0xa4
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	2100      	movs	r1, #0
 8001992:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b004      	add	sp, #16
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b084      	sub	sp, #16
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	000a      	movs	r2, r1
 80019a8:	1cfb      	adds	r3, r7, #3
 80019aa:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019ac:	1cfb      	adds	r3, r7, #3
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	220f      	movs	r2, #15
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	7912      	ldrb	r2, [r2, #4]
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e048      	b.n	8001a52 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019c0:	1cfb      	adds	r3, r7, #3
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	b25b      	sxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	da0f      	bge.n	80019ea <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ca:	1cfb      	adds	r3, r7, #3
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2207      	movs	r2, #7
 80019d0:	401a      	ands	r2, r3
 80019d2:	0013      	movs	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	189b      	adds	r3, r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	3310      	adds	r3, #16
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	18d3      	adds	r3, r2, r3
 80019e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	705a      	strb	r2, [r3, #1]
 80019e8:	e00f      	b.n	8001a0a <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ea:	1cfb      	adds	r3, r7, #3
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2207      	movs	r2, #7
 80019f0:	401a      	ands	r2, r3
 80019f2:	0013      	movs	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	189b      	adds	r3, r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	3351      	adds	r3, #81	@ 0x51
 80019fc:	33ff      	adds	r3, #255	@ 0xff
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	18d3      	adds	r3, r2, r3
 8001a02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2200      	movs	r2, #0
 8001a08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a10:	1cfb      	adds	r3, r7, #3
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2207      	movs	r2, #7
 8001a16:	4013      	ands	r3, r2
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	23a4      	movs	r3, #164	@ 0xa4
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	5cd3      	ldrb	r3, [r2, r3]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_PCD_EP_ClrStall+0x90>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e011      	b.n	8001a52 <HAL_PCD_EP_ClrStall+0xb4>
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	23a4      	movs	r3, #164	@ 0xa4
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	2101      	movs	r1, #1
 8001a36:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	0011      	movs	r1, r2
 8001a40:	0018      	movs	r0, r3
 8001a42:	f004 fbf3 	bl	800622c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a46:	687a      	ldr	r2, [r7, #4]
 8001a48:	23a4      	movs	r3, #164	@ 0xa4
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b004      	add	sp, #16
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	b096      	sub	sp, #88	@ 0x58
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a64:	f000 fbea 	bl	800223c <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	2048      	movs	r0, #72	@ 0x48
 8001a6e:	183b      	adds	r3, r7, r0
 8001a70:	2144      	movs	r1, #68	@ 0x44
 8001a72:	5a52      	ldrh	r2, [r2, r1]
 8001a74:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001a76:	183b      	adds	r3, r7, r0
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	b2da      	uxtb	r2, r3
 8001a7c:	244f      	movs	r4, #79	@ 0x4f
 8001a7e:	193b      	adds	r3, r7, r4
 8001a80:	210f      	movs	r1, #15
 8001a82:	400a      	ands	r2, r1
 8001a84:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d000      	beq.n	8001a90 <PCD_EP_ISR_Handler+0x34>
 8001a8e:	e18d      	b.n	8001dac <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001a90:	183b      	adds	r3, r7, r0
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2210      	movs	r2, #16
 8001a96:	4013      	ands	r3, r2
 8001a98:	d152      	bne.n	8001b40 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	881b      	ldrh	r3, [r3, #0]
 8001aa0:	b29a      	uxth	r2, r3
 8001aa2:	200e      	movs	r0, #14
 8001aa4:	183b      	adds	r3, r7, r0
 8001aa6:	49ba      	ldr	r1, [pc, #744]	@ (8001d90 <PCD_EP_ISR_Handler+0x334>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	801a      	strh	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	183a      	adds	r2, r7, r0
 8001ab2:	8812      	ldrh	r2, [r2, #0]
 8001ab4:	49b7      	ldr	r1, [pc, #732]	@ (8001d94 <PCD_EP_ISR_Handler+0x338>)
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	b292      	uxth	r2, r2
 8001aba:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3310      	adds	r3, #16
 8001ac0:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2250      	movs	r2, #80	@ 0x50
 8001ac8:	5a9b      	ldrh	r3, [r3, r2]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	001a      	movs	r2, r3
 8001ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	00db      	lsls	r3, r3, #3
 8001ad4:	18d2      	adds	r2, r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	18d3      	adds	r3, r2, r3
 8001adc:	4aae      	ldr	r2, [pc, #696]	@ (8001d98 <PCD_EP_ISR_Handler+0x33c>)
 8001ade:	4694      	mov	ip, r2
 8001ae0:	4463      	add	r3, ip
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	059b      	lsls	r3, r3, #22
 8001ae6:	0d9a      	lsrs	r2, r3, #22
 8001ae8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aea:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001aee:	695a      	ldr	r2, [r3, #20]
 8001af0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af2:	69db      	ldr	r3, [r3, #28]
 8001af4:	18d2      	adds	r2, r2, r3
 8001af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001af8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2100      	movs	r1, #0
 8001afe:	0018      	movs	r0, r3
 8001b00:	f006 faa4 	bl	800804c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	7b1b      	ldrb	r3, [r3, #12]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <PCD_EP_ISR_Handler+0xb6>
 8001b0e:	f000 fb95 	bl	800223c <PCD_EP_ISR_Handler+0x7e0>
 8001b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <PCD_EP_ISR_Handler+0xc2>
 8001b1a:	f000 fb8f 	bl	800223c <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	7b1b      	ldrb	r3, [r3, #12]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2280      	movs	r2, #128	@ 0x80
 8001b26:	4252      	negs	r2, r2
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0011      	movs	r1, r2
 8001b32:	224c      	movs	r2, #76	@ 0x4c
 8001b34:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	731a      	strb	r2, [r3, #12]
 8001b3c:	f000 fb7e 	bl	800223c <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3351      	adds	r3, #81	@ 0x51
 8001b44:	33ff      	adds	r3, #255	@ 0xff
 8001b46:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	214c      	movs	r1, #76	@ 0x4c
 8001b4e:	187b      	adds	r3, r7, r1
 8001b50:	8812      	ldrh	r2, [r2, #0]
 8001b52:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b54:	187b      	adds	r3, r7, r1
 8001b56:	881a      	ldrh	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	@ 0x80
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d037      	beq.n	8001bd0 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2250      	movs	r2, #80	@ 0x50
 8001b66:	5a9b      	ldrh	r3, [r3, r2]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	001a      	movs	r2, r3
 8001b6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	18d2      	adds	r2, r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	18d3      	adds	r3, r2, r3
 8001b7a:	4a88      	ldr	r2, [pc, #544]	@ (8001d9c <PCD_EP_ISR_Handler+0x340>)
 8001b7c:	4694      	mov	ip, r2
 8001b7e:	4463      	add	r3, ip
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	059b      	lsls	r3, r3, #22
 8001b84:	0d9a      	lsrs	r2, r3, #22
 8001b86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b88:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6818      	ldr	r0, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	22a6      	movs	r2, #166	@ 0xa6
 8001b92:	0092      	lsls	r2, r2, #2
 8001b94:	1899      	adds	r1, r3, r2
 8001b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b98:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b9c:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	f004 fc77 	bl	8006492 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	2010      	movs	r0, #16
 8001bae:	183b      	adds	r3, r7, r0
 8001bb0:	497b      	ldr	r1, [pc, #492]	@ (8001da0 <PCD_EP_ISR_Handler+0x344>)
 8001bb2:	400a      	ands	r2, r1
 8001bb4:	801a      	strh	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	183a      	adds	r2, r7, r0
 8001bbc:	8812      	ldrh	r2, [r2, #0]
 8001bbe:	2180      	movs	r1, #128	@ 0x80
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f006 fa09 	bl	8007fe0 <HAL_PCD_SetupStageCallback>
 8001bce:	e335      	b.n	800223c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bd0:	234c      	movs	r3, #76	@ 0x4c
 8001bd2:	18fb      	adds	r3, r7, r3
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	5e9b      	ldrsh	r3, [r3, r2]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db00      	blt.n	8001bde <PCD_EP_ISR_Handler+0x182>
 8001bdc:	e32e      	b.n	800223c <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	201e      	movs	r0, #30
 8001be8:	183b      	adds	r3, r7, r0
 8001bea:	496d      	ldr	r1, [pc, #436]	@ (8001da0 <PCD_EP_ISR_Handler+0x344>)
 8001bec:	400a      	ands	r2, r1
 8001bee:	801a      	strh	r2, [r3, #0]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	183a      	adds	r2, r7, r0
 8001bf6:	8812      	ldrh	r2, [r2, #0]
 8001bf8:	2180      	movs	r1, #128	@ 0x80
 8001bfa:	430a      	orrs	r2, r1
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2250      	movs	r2, #80	@ 0x50
 8001c06:	5a9b      	ldrh	r3, [r3, r2]
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	001a      	movs	r2, r3
 8001c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	00db      	lsls	r3, r3, #3
 8001c12:	18d2      	adds	r2, r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	18d3      	adds	r3, r2, r3
 8001c1a:	4a60      	ldr	r2, [pc, #384]	@ (8001d9c <PCD_EP_ISR_Handler+0x340>)
 8001c1c:	4694      	mov	ip, r2
 8001c1e:	4463      	add	r3, ip
 8001c20:	881b      	ldrh	r3, [r3, #0]
 8001c22:	059b      	lsls	r3, r3, #22
 8001c24:	0d9a      	lsrs	r2, r3, #22
 8001c26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c28:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d01a      	beq.n	8001c68 <PCD_EP_ISR_Handler+0x20c>
 8001c32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d016      	beq.n	8001c68 <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
 8001c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c40:	6959      	ldr	r1, [r3, #20]
 8001c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c44:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c48:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	f004 fc21 	bl	8006492 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c56:	69db      	ldr	r3, [r3, #28]
 8001c58:	18d2      	adds	r2, r2, r3
 8001c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c5c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2100      	movs	r1, #0
 8001c62:	0018      	movs	r0, r3
 8001c64:	f006 f9d1 	bl	800800a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	214c      	movs	r1, #76	@ 0x4c
 8001c6e:	187b      	adds	r3, r7, r1
 8001c70:	8812      	ldrh	r2, [r2, #0]
 8001c72:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8001c74:	187b      	adds	r3, r7, r1
 8001c76:	881a      	ldrh	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	@ 0x80
 8001c7a:	011b      	lsls	r3, r3, #4
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d000      	beq.n	8001c82 <PCD_EP_ISR_Handler+0x226>
 8001c80:	e2dc      	b.n	800223c <PCD_EP_ISR_Handler+0x7e0>
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	23c0      	movs	r3, #192	@ 0xc0
 8001c88:	019b      	lsls	r3, r3, #6
 8001c8a:	401a      	ands	r2, r3
 8001c8c:	23c0      	movs	r3, #192	@ 0xc0
 8001c8e:	019b      	lsls	r3, r3, #6
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d100      	bne.n	8001c96 <PCD_EP_ISR_Handler+0x23a>
 8001c94:	e2d2      	b.n	800223c <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	61bb      	str	r3, [r7, #24]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	2250      	movs	r2, #80	@ 0x50
 8001ca2:	5a9b      	ldrh	r3, [r3, r2]
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	001a      	movs	r2, r3
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	189b      	adds	r3, r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	4a3a      	ldr	r2, [pc, #232]	@ (8001d9c <PCD_EP_ISR_Handler+0x340>)
 8001cb2:	4694      	mov	ip, r2
 8001cb4:	4463      	add	r3, ip
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	059b      	lsls	r3, r3, #22
 8001cc0:	0d9b      	lsrs	r3, r3, #22
 8001cc2:	b29a      	uxth	r2, r3
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	801a      	strh	r2, [r3, #0]
 8001cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d108      	bne.n	8001ce2 <PCD_EP_ISR_Handler+0x286>
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	881b      	ldrh	r3, [r3, #0]
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	4a2f      	ldr	r2, [pc, #188]	@ (8001d94 <PCD_EP_ISR_Handler+0x338>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	801a      	strh	r2, [r3, #0]
 8001ce0:	e035      	b.n	8001d4e <PCD_EP_ISR_Handler+0x2f2>
 8001ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ce8:	d817      	bhi.n	8001d1a <PCD_EP_ISR_Handler+0x2be>
 8001cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cf2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	d002      	beq.n	8001d02 <PCD_EP_ISR_Handler+0x2a6>
 8001cfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cfe:	3301      	adds	r3, #1
 8001d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	029b      	lsls	r3, r3, #10
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	4313      	orrs	r3, r2
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	801a      	strh	r2, [r3, #0]
 8001d18:	e019      	b.n	8001d4e <PCD_EP_ISR_Handler+0x2f2>
 8001d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	221f      	movs	r2, #31
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d102      	bne.n	8001d32 <PCD_EP_ISR_Handler+0x2d6>
 8001d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d2e:	3b01      	subs	r3, #1
 8001d30:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	029b      	lsls	r3, r3, #10
 8001d3e:	b29b      	uxth	r3, r3
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	4a13      	ldr	r2, [pc, #76]	@ (8001d94 <PCD_EP_ISR_Handler+0x338>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	2012      	movs	r0, #18
 8001d58:	183b      	adds	r3, r7, r0
 8001d5a:	4912      	ldr	r1, [pc, #72]	@ (8001da4 <PCD_EP_ISR_Handler+0x348>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	801a      	strh	r2, [r3, #0]
 8001d60:	183b      	adds	r3, r7, r0
 8001d62:	183a      	adds	r2, r7, r0
 8001d64:	8812      	ldrh	r2, [r2, #0]
 8001d66:	2180      	movs	r1, #128	@ 0x80
 8001d68:	0149      	lsls	r1, r1, #5
 8001d6a:	404a      	eors	r2, r1
 8001d6c:	801a      	strh	r2, [r3, #0]
 8001d6e:	183b      	adds	r3, r7, r0
 8001d70:	183a      	adds	r2, r7, r0
 8001d72:	8812      	ldrh	r2, [r2, #0]
 8001d74:	2180      	movs	r1, #128	@ 0x80
 8001d76:	0189      	lsls	r1, r1, #6
 8001d78:	404a      	eors	r2, r1
 8001d7a:	801a      	strh	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	183a      	adds	r2, r7, r0
 8001d82:	8812      	ldrh	r2, [r2, #0]
 8001d84:	4908      	ldr	r1, [pc, #32]	@ (8001da8 <PCD_EP_ISR_Handler+0x34c>)
 8001d86:	430a      	orrs	r2, r1
 8001d88:	b292      	uxth	r2, r2
 8001d8a:	801a      	strh	r2, [r3, #0]
 8001d8c:	e256      	b.n	800223c <PCD_EP_ISR_Handler+0x7e0>
 8001d8e:	46c0      	nop			@ (mov r8, r8)
 8001d90:	ffff8f0f 	.word	0xffff8f0f
 8001d94:	ffff8000 	.word	0xffff8000
 8001d98:	00000402 	.word	0x00000402
 8001d9c:	00000406 	.word	0x00000406
 8001da0:	00000f8f 	.word	0x00000f8f
 8001da4:	ffffbf8f 	.word	0xffffbf8f
 8001da8:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	001a      	movs	r2, r3
 8001db2:	204f      	movs	r0, #79	@ 0x4f
 8001db4:	183b      	adds	r3, r7, r0
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	18d2      	adds	r2, r2, r3
 8001dbc:	214c      	movs	r1, #76	@ 0x4c
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	8812      	ldrh	r2, [r2, #0]
 8001dc2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dc4:	187b      	adds	r3, r7, r1
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	5e9b      	ldrsh	r3, [r3, r2]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	db00      	blt.n	8001dd0 <PCD_EP_ISR_Handler+0x374>
 8001dce:	e0fa      	b.n	8001fc6 <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	001a      	movs	r2, r3
 8001dd6:	183b      	adds	r3, r7, r0
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	18d3      	adds	r3, r2, r3
 8001dde:	881b      	ldrh	r3, [r3, #0]
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	244a      	movs	r4, #74	@ 0x4a
 8001de4:	193b      	adds	r3, r7, r4
 8001de6:	49d1      	ldr	r1, [pc, #836]	@ (800212c <PCD_EP_ISR_Handler+0x6d0>)
 8001de8:	400a      	ands	r2, r1
 8001dea:	801a      	strh	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	001a      	movs	r2, r3
 8001df2:	183b      	adds	r3, r7, r0
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	18d3      	adds	r3, r2, r3
 8001dfa:	193a      	adds	r2, r7, r4
 8001dfc:	8812      	ldrh	r2, [r2, #0]
 8001dfe:	2180      	movs	r1, #128	@ 0x80
 8001e00:	430a      	orrs	r2, r1
 8001e02:	b292      	uxth	r2, r2
 8001e04:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e06:	183b      	adds	r3, r7, r0
 8001e08:	781a      	ldrb	r2, [r3, #0]
 8001e0a:	0013      	movs	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	189b      	adds	r3, r3, r2
 8001e10:	00db      	lsls	r3, r3, #3
 8001e12:	3351      	adds	r3, #81	@ 0x51
 8001e14:	33ff      	adds	r3, #255	@ 0xff
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	18d3      	adds	r3, r2, r3
 8001e1a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e1e:	7b1b      	ldrb	r3, [r3, #12]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d125      	bne.n	8001e70 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2250      	movs	r2, #80	@ 0x50
 8001e2a:	5a9b      	ldrh	r3, [r3, r2]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	001a      	movs	r2, r3
 8001e30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	18d2      	adds	r2, r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	18d3      	adds	r3, r2, r3
 8001e3e:	4abc      	ldr	r2, [pc, #752]	@ (8002130 <PCD_EP_ISR_Handler+0x6d4>)
 8001e40:	4694      	mov	ip, r2
 8001e42:	4463      	add	r3, ip
 8001e44:	881a      	ldrh	r2, [r3, #0]
 8001e46:	2450      	movs	r4, #80	@ 0x50
 8001e48:	193b      	adds	r3, r7, r4
 8001e4a:	0592      	lsls	r2, r2, #22
 8001e4c:	0d92      	lsrs	r2, r2, #22
 8001e4e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8001e50:	193b      	adds	r3, r7, r4
 8001e52:	881b      	ldrh	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d100      	bne.n	8001e5a <PCD_EP_ISR_Handler+0x3fe>
 8001e58:	e08d      	b.n	8001f76 <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e60:	6959      	ldr	r1, [r3, #20]
 8001e62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e64:	88da      	ldrh	r2, [r3, #6]
 8001e66:	193b      	adds	r3, r7, r4
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f004 fb12 	bl	8006492 <USB_ReadPMA>
 8001e6e:	e082      	b.n	8001f76 <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e72:	78db      	ldrb	r3, [r3, #3]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d10c      	bne.n	8001e92 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e78:	2350      	movs	r3, #80	@ 0x50
 8001e7a:	18fc      	adds	r4, r7, r3
 8001e7c:	234c      	movs	r3, #76	@ 0x4c
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	881a      	ldrh	r2, [r3, #0]
 8001e82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f000 f9ec 	bl	8002264 <HAL_PCD_EP_DB_Receive>
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	8023      	strh	r3, [r4, #0]
 8001e90:	e071      	b.n	8001f76 <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	001a      	movs	r2, r3
 8001e98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	18d3      	adds	r3, r2, r3
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	2052      	movs	r0, #82	@ 0x52
 8001ea6:	183b      	adds	r3, r7, r0
 8001ea8:	49a2      	ldr	r1, [pc, #648]	@ (8002134 <PCD_EP_ISR_Handler+0x6d8>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	801a      	strh	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	001a      	movs	r2, r3
 8001eb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	18d3      	adds	r3, r2, r3
 8001ebc:	183a      	adds	r2, r7, r0
 8001ebe:	8812      	ldrh	r2, [r2, #0]
 8001ec0:	499d      	ldr	r1, [pc, #628]	@ (8002138 <PCD_EP_ISR_Handler+0x6dc>)
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	b292      	uxth	r2, r2
 8001ec6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	001a      	movs	r2, r3
 8001ece:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	18d3      	adds	r3, r2, r3
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	001a      	movs	r2, r3
 8001edc:	2380      	movs	r3, #128	@ 0x80
 8001ede:	01db      	lsls	r3, r3, #7
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d024      	beq.n	8001f2e <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2250      	movs	r2, #80	@ 0x50
 8001eea:	5a9b      	ldrh	r3, [r3, r2]
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	001a      	movs	r2, r3
 8001ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	00db      	lsls	r3, r3, #3
 8001ef6:	18d2      	adds	r2, r2, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	18d3      	adds	r3, r2, r3
 8001efe:	4a8f      	ldr	r2, [pc, #572]	@ (800213c <PCD_EP_ISR_Handler+0x6e0>)
 8001f00:	4694      	mov	ip, r2
 8001f02:	4463      	add	r3, ip
 8001f04:	881a      	ldrh	r2, [r3, #0]
 8001f06:	2450      	movs	r4, #80	@ 0x50
 8001f08:	193b      	adds	r3, r7, r4
 8001f0a:	0592      	lsls	r2, r2, #22
 8001f0c:	0d92      	lsrs	r2, r2, #22
 8001f0e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001f10:	193b      	adds	r3, r7, r4
 8001f12:	881b      	ldrh	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d02e      	beq.n	8001f76 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f1e:	6959      	ldr	r1, [r3, #20]
 8001f20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f22:	891a      	ldrh	r2, [r3, #8]
 8001f24:	193b      	adds	r3, r7, r4
 8001f26:	881b      	ldrh	r3, [r3, #0]
 8001f28:	f004 fab3 	bl	8006492 <USB_ReadPMA>
 8001f2c:	e023      	b.n	8001f76 <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2250      	movs	r2, #80	@ 0x50
 8001f34:	5a9b      	ldrh	r3, [r3, r2]
 8001f36:	b29b      	uxth	r3, r3
 8001f38:	001a      	movs	r2, r3
 8001f3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	18d2      	adds	r2, r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	18d3      	adds	r3, r2, r3
 8001f48:	4a79      	ldr	r2, [pc, #484]	@ (8002130 <PCD_EP_ISR_Handler+0x6d4>)
 8001f4a:	4694      	mov	ip, r2
 8001f4c:	4463      	add	r3, ip
 8001f4e:	881a      	ldrh	r2, [r3, #0]
 8001f50:	2450      	movs	r4, #80	@ 0x50
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	0592      	lsls	r2, r2, #22
 8001f56:	0d92      	lsrs	r2, r2, #22
 8001f58:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	881b      	ldrh	r3, [r3, #0]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f68:	6959      	ldr	r1, [r3, #20]
 8001f6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f6c:	895a      	ldrh	r2, [r3, #10]
 8001f6e:	193b      	adds	r3, r7, r4
 8001f70:	881b      	ldrh	r3, [r3, #0]
 8001f72:	f004 fa8e 	bl	8006492 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f78:	69da      	ldr	r2, [r3, #28]
 8001f7a:	2150      	movs	r1, #80	@ 0x50
 8001f7c:	187b      	adds	r3, r7, r1
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	18d2      	adds	r2, r2, r3
 8001f82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f84:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f88:	695a      	ldr	r2, [r3, #20]
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	18d2      	adds	r2, r2, r3
 8001f90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f92:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d005      	beq.n	8001fa8 <PCD_EP_ISR_Handler+0x54c>
 8001f9c:	187b      	adds	r3, r7, r1
 8001f9e:	881a      	ldrh	r2, [r3, #0]
 8001fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d207      	bcs.n	8001fb8 <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fa8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001faa:	781a      	ldrb	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	0011      	movs	r1, r2
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f006 f82a 	bl	800800a <HAL_PCD_DataOutStageCallback>
 8001fb6:	e006      	b.n	8001fc6 <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001fbe:	0011      	movs	r1, r2
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f002 ffb3 	bl	8004f2c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fc6:	244c      	movs	r4, #76	@ 0x4c
 8001fc8:	193b      	adds	r3, r7, r4
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d100      	bne.n	8001fd4 <PCD_EP_ISR_Handler+0x578>
 8001fd2:	e133      	b.n	800223c <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fd4:	204f      	movs	r0, #79	@ 0x4f
 8001fd6:	183b      	adds	r3, r7, r0
 8001fd8:	781a      	ldrb	r2, [r3, #0]
 8001fda:	0013      	movs	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	189b      	adds	r3, r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	3310      	adds	r3, #16
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	18d3      	adds	r3, r2, r3
 8001fe8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	001a      	movs	r2, r3
 8001ff0:	183b      	adds	r3, r7, r0
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	18d3      	adds	r3, r2, r3
 8001ff8:	881b      	ldrh	r3, [r3, #0]
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	2542      	movs	r5, #66	@ 0x42
 8001ffe:	197b      	adds	r3, r7, r5
 8002000:	494f      	ldr	r1, [pc, #316]	@ (8002140 <PCD_EP_ISR_Handler+0x6e4>)
 8002002:	400a      	ands	r2, r1
 8002004:	801a      	strh	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	001a      	movs	r2, r3
 800200c:	183b      	adds	r3, r7, r0
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	18d3      	adds	r3, r2, r3
 8002014:	197a      	adds	r2, r7, r5
 8002016:	8812      	ldrh	r2, [r2, #0]
 8002018:	494a      	ldr	r1, [pc, #296]	@ (8002144 <PCD_EP_ISR_Handler+0x6e8>)
 800201a:	430a      	orrs	r2, r1
 800201c:	b292      	uxth	r2, r2
 800201e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8002020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002022:	78db      	ldrb	r3, [r3, #3]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d000      	beq.n	800202a <PCD_EP_ISR_Handler+0x5ce>
 8002028:	e0af      	b.n	800218a <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 800202a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8002030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002032:	7b1b      	ldrb	r3, [r3, #12]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d100      	bne.n	800203a <PCD_EP_ISR_Handler+0x5de>
 8002038:	e09f      	b.n	800217a <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800203a:	193b      	adds	r3, r7, r4
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	2240      	movs	r2, #64	@ 0x40
 8002040:	4013      	ands	r3, r2
 8002042:	d046      	beq.n	80020d2 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002046:	785b      	ldrb	r3, [r3, #1]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d125      	bne.n	8002098 <PCD_EP_ISR_Handler+0x63c>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	627b      	str	r3, [r7, #36]	@ 0x24
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2250      	movs	r2, #80	@ 0x50
 8002058:	5a9b      	ldrh	r3, [r3, r2]
 800205a:	b29b      	uxth	r3, r3
 800205c:	001a      	movs	r2, r3
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	189b      	adds	r3, r3, r2
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
 8002064:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	00da      	lsls	r2, r3, #3
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	18d3      	adds	r3, r2, r3
 800206e:	4a33      	ldr	r2, [pc, #204]	@ (800213c <PCD_EP_ISR_Handler+0x6e0>)
 8002070:	4694      	mov	ip, r2
 8002072:	4463      	add	r3, ip
 8002074:	623b      	str	r3, [r7, #32]
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	b29b      	uxth	r3, r3
 800207c:	059b      	lsls	r3, r3, #22
 800207e:	0d9b      	lsrs	r3, r3, #22
 8002080:	b29a      	uxth	r2, r3
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	801a      	strh	r2, [r3, #0]
 8002086:	6a3b      	ldr	r3, [r7, #32]
 8002088:	881b      	ldrh	r3, [r3, #0]
 800208a:	b29b      	uxth	r3, r3
 800208c:	4a2d      	ldr	r2, [pc, #180]	@ (8002144 <PCD_EP_ISR_Handler+0x6e8>)
 800208e:	4313      	orrs	r3, r2
 8002090:	b29a      	uxth	r2, r3
 8002092:	6a3b      	ldr	r3, [r7, #32]
 8002094:	801a      	strh	r2, [r3, #0]
 8002096:	e070      	b.n	800217a <PCD_EP_ISR_Handler+0x71e>
 8002098:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800209a:	785b      	ldrb	r3, [r3, #1]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d16c      	bne.n	800217a <PCD_EP_ISR_Handler+0x71e>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2250      	movs	r2, #80	@ 0x50
 80020ac:	5a9b      	ldrh	r3, [r3, r2]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	001a      	movs	r2, r3
 80020b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020b4:	189b      	adds	r3, r3, r2
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	00da      	lsls	r2, r3, #3
 80020be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c0:	18d3      	adds	r3, r2, r3
 80020c2:	4a1e      	ldr	r2, [pc, #120]	@ (800213c <PCD_EP_ISR_Handler+0x6e0>)
 80020c4:	4694      	mov	ip, r2
 80020c6:	4463      	add	r3, ip
 80020c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020cc:	2200      	movs	r2, #0
 80020ce:	801a      	strh	r2, [r3, #0]
 80020d0:	e053      	b.n	800217a <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020da:	785b      	ldrb	r3, [r3, #1]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d133      	bne.n	8002148 <PCD_EP_ISR_Handler+0x6ec>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2250      	movs	r2, #80	@ 0x50
 80020ec:	5a9b      	ldrh	r3, [r3, r2]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	001a      	movs	r2, r3
 80020f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020f4:	189b      	adds	r3, r3, r2
 80020f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80020f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	00da      	lsls	r2, r3, #3
 80020fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002100:	18d3      	adds	r3, r2, r3
 8002102:	4a0b      	ldr	r2, [pc, #44]	@ (8002130 <PCD_EP_ISR_Handler+0x6d4>)
 8002104:	4694      	mov	ip, r2
 8002106:	4463      	add	r3, ip
 8002108:	633b      	str	r3, [r7, #48]	@ 0x30
 800210a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	b29b      	uxth	r3, r3
 8002110:	059b      	lsls	r3, r3, #22
 8002112:	0d9b      	lsrs	r3, r3, #22
 8002114:	b29a      	uxth	r2, r3
 8002116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	4a08      	ldr	r2, [pc, #32]	@ (8002144 <PCD_EP_ISR_Handler+0x6e8>)
 8002122:	4313      	orrs	r3, r2
 8002124:	b29a      	uxth	r2, r3
 8002126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002128:	801a      	strh	r2, [r3, #0]
 800212a:	e026      	b.n	800217a <PCD_EP_ISR_Handler+0x71e>
 800212c:	00000f8f 	.word	0x00000f8f
 8002130:	00000406 	.word	0x00000406
 8002134:	ffff8f8f 	.word	0xffff8f8f
 8002138:	ffff80c0 	.word	0xffff80c0
 800213c:	00000402 	.word	0x00000402
 8002140:	ffff8f0f 	.word	0xffff8f0f
 8002144:	ffff8000 	.word	0xffff8000
 8002148:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800214a:	785b      	ldrb	r3, [r3, #1]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d114      	bne.n	800217a <PCD_EP_ISR_Handler+0x71e>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	2250      	movs	r2, #80	@ 0x50
 8002156:	5a9b      	ldrh	r3, [r3, r2]
 8002158:	b29b      	uxth	r3, r3
 800215a:	001a      	movs	r2, r3
 800215c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800215e:	189b      	adds	r3, r3, r2
 8002160:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	00da      	lsls	r2, r3, #3
 8002168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800216a:	18d3      	adds	r3, r2, r3
 800216c:	4a3b      	ldr	r2, [pc, #236]	@ (800225c <PCD_EP_ISR_Handler+0x800>)
 800216e:	4694      	mov	ip, r2
 8002170:	4463      	add	r3, ip
 8002172:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002176:	2200      	movs	r2, #0
 8002178:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800217a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800217c:	781a      	ldrb	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	0011      	movs	r1, r2
 8002182:	0018      	movs	r0, r3
 8002184:	f005 ff62 	bl	800804c <HAL_PCD_DataInStageCallback>
 8002188:	e058      	b.n	800223c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800218a:	234c      	movs	r3, #76	@ 0x4c
 800218c:	18fb      	adds	r3, r7, r3
 800218e:	881a      	ldrh	r2, [r3, #0]
 8002190:	2380      	movs	r3, #128	@ 0x80
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	4013      	ands	r3, r2
 8002196:	d149      	bne.n	800222c <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2250      	movs	r2, #80	@ 0x50
 800219e:	5a9b      	ldrh	r3, [r3, r2]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	001a      	movs	r2, r3
 80021a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	00db      	lsls	r3, r3, #3
 80021aa:	18d2      	adds	r2, r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	18d3      	adds	r3, r2, r3
 80021b2:	4a2b      	ldr	r2, [pc, #172]	@ (8002260 <PCD_EP_ISR_Handler+0x804>)
 80021b4:	4694      	mov	ip, r2
 80021b6:	4463      	add	r3, ip
 80021b8:	881a      	ldrh	r2, [r3, #0]
 80021ba:	2140      	movs	r1, #64	@ 0x40
 80021bc:	187b      	adds	r3, r7, r1
 80021be:	0592      	lsls	r2, r2, #22
 80021c0:	0d92      	lsrs	r2, r2, #22
 80021c2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 80021c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021c6:	699a      	ldr	r2, [r3, #24]
 80021c8:	187b      	adds	r3, r7, r1
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d907      	bls.n	80021e0 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 80021d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021d2:	699a      	ldr	r2, [r3, #24]
 80021d4:	187b      	adds	r3, r7, r1
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	1ad2      	subs	r2, r2, r3
 80021da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021dc:	619a      	str	r2, [r3, #24]
 80021de:	e002      	b.n	80021e6 <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 80021e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e2:	2200      	movs	r2, #0
 80021e4:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80021e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021e8:	699b      	ldr	r3, [r3, #24]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d107      	bne.n	80021fe <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80021f0:	781a      	ldrb	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0011      	movs	r1, r2
 80021f6:	0018      	movs	r0, r3
 80021f8:	f005 ff28 	bl	800804c <HAL_PCD_DataInStageCallback>
 80021fc:	e01e      	b.n	800223c <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80021fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002200:	695a      	ldr	r2, [r3, #20]
 8002202:	2140      	movs	r1, #64	@ 0x40
 8002204:	187b      	adds	r3, r7, r1
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	18d2      	adds	r2, r2, r3
 800220a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800220c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800220e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002210:	69da      	ldr	r2, [r3, #28]
 8002212:	187b      	adds	r3, r7, r1
 8002214:	881b      	ldrh	r3, [r3, #0]
 8002216:	18d2      	adds	r2, r2, r3
 8002218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800221a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002222:	0011      	movs	r1, r2
 8002224:	0018      	movs	r0, r3
 8002226:	f002 fe81 	bl	8004f2c <USB_EPStartXfer>
 800222a:	e007      	b.n	800223c <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800222c:	234c      	movs	r3, #76	@ 0x4c
 800222e:	18fb      	adds	r3, r7, r3
 8002230:	881a      	ldrh	r2, [r3, #0]
 8002232:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 f930 	bl	800249c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2244      	movs	r2, #68	@ 0x44
 8002242:	5a9b      	ldrh	r3, [r3, r2]
 8002244:	b29b      	uxth	r3, r3
 8002246:	b21b      	sxth	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	da01      	bge.n	8002250 <PCD_EP_ISR_Handler+0x7f4>
 800224c:	f7ff fc0c 	bl	8001a68 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b016      	add	sp, #88	@ 0x58
 8002258:	bdb0      	pop	{r4, r5, r7, pc}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	00000406 	.word	0x00000406
 8002260:	00000402 	.word	0x00000402

08002264 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002264:	b590      	push	{r4, r7, lr}
 8002266:	b089      	sub	sp, #36	@ 0x24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	1dbb      	adds	r3, r7, #6
 8002270:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002272:	1dbb      	adds	r3, r7, #6
 8002274:	881a      	ldrh	r2, [r3, #0]
 8002276:	2380      	movs	r3, #128	@ 0x80
 8002278:	01db      	lsls	r3, r3, #7
 800227a:	4013      	ands	r3, r2
 800227c:	d100      	bne.n	8002280 <HAL_PCD_EP_DB_Receive+0x1c>
 800227e:	e07d      	b.n	800237c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2250      	movs	r2, #80	@ 0x50
 8002286:	5a9b      	ldrh	r3, [r3, r2]
 8002288:	b29b      	uxth	r3, r3
 800228a:	001a      	movs	r2, r3
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	00db      	lsls	r3, r3, #3
 8002292:	18d2      	adds	r2, r2, r3
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	18d3      	adds	r3, r2, r3
 800229a:	4a7a      	ldr	r2, [pc, #488]	@ (8002484 <HAL_PCD_EP_DB_Receive+0x220>)
 800229c:	4694      	mov	ip, r2
 800229e:	4463      	add	r3, ip
 80022a0:	881a      	ldrh	r2, [r3, #0]
 80022a2:	211a      	movs	r1, #26
 80022a4:	187b      	adds	r3, r7, r1
 80022a6:	0592      	lsls	r2, r2, #22
 80022a8:	0d92      	lsrs	r2, r2, #22
 80022aa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	699a      	ldr	r2, [r3, #24]
 80022b0:	187b      	adds	r3, r7, r1
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d307      	bcc.n	80022c8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	699a      	ldr	r2, [r3, #24]
 80022bc:	187b      	adds	r3, r7, r1
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	619a      	str	r2, [r3, #24]
 80022c6:	e002      	b.n	80022ce <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d121      	bne.n	800231a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	001a      	movs	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	18d3      	adds	r3, r2, r3
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	2018      	movs	r0, #24
 80022ea:	183b      	adds	r3, r7, r0
 80022ec:	4966      	ldr	r1, [pc, #408]	@ (8002488 <HAL_PCD_EP_DB_Receive+0x224>)
 80022ee:	400a      	ands	r2, r1
 80022f0:	801a      	strh	r2, [r3, #0]
 80022f2:	183b      	adds	r3, r7, r0
 80022f4:	183a      	adds	r2, r7, r0
 80022f6:	8812      	ldrh	r2, [r2, #0]
 80022f8:	2180      	movs	r1, #128	@ 0x80
 80022fa:	0189      	lsls	r1, r1, #6
 80022fc:	404a      	eors	r2, r1
 80022fe:	801a      	strh	r2, [r3, #0]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	001a      	movs	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	18d3      	adds	r3, r2, r3
 800230e:	183a      	adds	r2, r7, r0
 8002310:	8812      	ldrh	r2, [r2, #0]
 8002312:	495e      	ldr	r1, [pc, #376]	@ (800248c <HAL_PCD_EP_DB_Receive+0x228>)
 8002314:	430a      	orrs	r2, r1
 8002316:	b292      	uxth	r2, r2
 8002318:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800231a:	1dbb      	adds	r3, r7, #6
 800231c:	881b      	ldrh	r3, [r3, #0]
 800231e:	2240      	movs	r2, #64	@ 0x40
 8002320:	4013      	ands	r3, r2
 8002322:	d01a      	beq.n	800235a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	001a      	movs	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	781b      	ldrb	r3, [r3, #0]
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	18d3      	adds	r3, r2, r3
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	b29a      	uxth	r2, r3
 8002336:	2016      	movs	r0, #22
 8002338:	183b      	adds	r3, r7, r0
 800233a:	4955      	ldr	r1, [pc, #340]	@ (8002490 <HAL_PCD_EP_DB_Receive+0x22c>)
 800233c:	400a      	ands	r2, r1
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	001a      	movs	r2, r3
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	18d3      	adds	r3, r2, r3
 800234e:	183a      	adds	r2, r7, r0
 8002350:	8812      	ldrh	r2, [r2, #0]
 8002352:	4950      	ldr	r1, [pc, #320]	@ (8002494 <HAL_PCD_EP_DB_Receive+0x230>)
 8002354:	430a      	orrs	r2, r1
 8002356:	b292      	uxth	r2, r2
 8002358:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800235a:	241a      	movs	r4, #26
 800235c:	193b      	adds	r3, r7, r4
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d100      	bne.n	8002366 <HAL_PCD_EP_DB_Receive+0x102>
 8002364:	e086      	b.n	8002474 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6818      	ldr	r0, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	6959      	ldr	r1, [r3, #20]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	891a      	ldrh	r2, [r3, #8]
 8002372:	193b      	adds	r3, r7, r4
 8002374:	881b      	ldrh	r3, [r3, #0]
 8002376:	f004 f88c 	bl	8006492 <USB_ReadPMA>
 800237a:	e07b      	b.n	8002474 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2250      	movs	r2, #80	@ 0x50
 8002382:	5a9b      	ldrh	r3, [r3, r2]
 8002384:	b29b      	uxth	r3, r3
 8002386:	001a      	movs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	18d2      	adds	r2, r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	18d3      	adds	r3, r2, r3
 8002396:	4a40      	ldr	r2, [pc, #256]	@ (8002498 <HAL_PCD_EP_DB_Receive+0x234>)
 8002398:	4694      	mov	ip, r2
 800239a:	4463      	add	r3, ip
 800239c:	881a      	ldrh	r2, [r3, #0]
 800239e:	211a      	movs	r1, #26
 80023a0:	187b      	adds	r3, r7, r1
 80023a2:	0592      	lsls	r2, r2, #22
 80023a4:	0d92      	lsrs	r2, r2, #22
 80023a6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	699a      	ldr	r2, [r3, #24]
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d307      	bcc.n	80023c4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	187b      	adds	r3, r7, r1
 80023ba:	881b      	ldrh	r3, [r3, #0]
 80023bc:	1ad2      	subs	r2, r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	619a      	str	r2, [r3, #24]
 80023c2:	e002      	b.n	80023ca <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d121      	bne.n	8002416 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	001a      	movs	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	18d3      	adds	r3, r2, r3
 80023e0:	881b      	ldrh	r3, [r3, #0]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	201e      	movs	r0, #30
 80023e6:	183b      	adds	r3, r7, r0
 80023e8:	4927      	ldr	r1, [pc, #156]	@ (8002488 <HAL_PCD_EP_DB_Receive+0x224>)
 80023ea:	400a      	ands	r2, r1
 80023ec:	801a      	strh	r2, [r3, #0]
 80023ee:	183b      	adds	r3, r7, r0
 80023f0:	183a      	adds	r2, r7, r0
 80023f2:	8812      	ldrh	r2, [r2, #0]
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	0189      	lsls	r1, r1, #6
 80023f8:	404a      	eors	r2, r1
 80023fa:	801a      	strh	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	001a      	movs	r2, r3
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	18d3      	adds	r3, r2, r3
 800240a:	183a      	adds	r2, r7, r0
 800240c:	8812      	ldrh	r2, [r2, #0]
 800240e:	491f      	ldr	r1, [pc, #124]	@ (800248c <HAL_PCD_EP_DB_Receive+0x228>)
 8002410:	430a      	orrs	r2, r1
 8002412:	b292      	uxth	r2, r2
 8002414:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002416:	1dbb      	adds	r3, r7, #6
 8002418:	881b      	ldrh	r3, [r3, #0]
 800241a:	2240      	movs	r2, #64	@ 0x40
 800241c:	4013      	ands	r3, r2
 800241e:	d11a      	bne.n	8002456 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	001a      	movs	r2, r3
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	18d3      	adds	r3, r2, r3
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	201c      	movs	r0, #28
 8002434:	183b      	adds	r3, r7, r0
 8002436:	4916      	ldr	r1, [pc, #88]	@ (8002490 <HAL_PCD_EP_DB_Receive+0x22c>)
 8002438:	400a      	ands	r2, r1
 800243a:	801a      	strh	r2, [r3, #0]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	001a      	movs	r2, r3
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	18d3      	adds	r3, r2, r3
 800244a:	183a      	adds	r2, r7, r0
 800244c:	8812      	ldrh	r2, [r2, #0]
 800244e:	4911      	ldr	r1, [pc, #68]	@ (8002494 <HAL_PCD_EP_DB_Receive+0x230>)
 8002450:	430a      	orrs	r2, r1
 8002452:	b292      	uxth	r2, r2
 8002454:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8002456:	241a      	movs	r4, #26
 8002458:	193b      	adds	r3, r7, r4
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d009      	beq.n	8002474 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6818      	ldr	r0, [r3, #0]
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	6959      	ldr	r1, [r3, #20]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	895a      	ldrh	r2, [r3, #10]
 800246c:	193b      	adds	r3, r7, r4
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	f004 f80f 	bl	8006492 <USB_ReadPMA>
    }
  }

  return count;
 8002474:	231a      	movs	r3, #26
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	881b      	ldrh	r3, [r3, #0]
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b009      	add	sp, #36	@ 0x24
 8002480:	bd90      	pop	{r4, r7, pc}
 8002482:	46c0      	nop			@ (mov r8, r8)
 8002484:	00000402 	.word	0x00000402
 8002488:	ffffbf8f 	.word	0xffffbf8f
 800248c:	ffff8080 	.word	0xffff8080
 8002490:	ffff8f8f 	.word	0xffff8f8f
 8002494:	ffff80c0 	.word	0xffff80c0
 8002498:	00000406 	.word	0x00000406

0800249c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b0a4      	sub	sp, #144	@ 0x90
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	60f8      	str	r0, [r7, #12]
 80024a4:	60b9      	str	r1, [r7, #8]
 80024a6:	1dbb      	adds	r3, r7, #6
 80024a8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024aa:	1dbb      	adds	r3, r7, #6
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	2240      	movs	r2, #64	@ 0x40
 80024b0:	4013      	ands	r3, r2
 80024b2:	d100      	bne.n	80024b6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80024b4:	e1e4      	b.n	8002880 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2250      	movs	r2, #80	@ 0x50
 80024bc:	5a9b      	ldrh	r3, [r3, r2]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	001a      	movs	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	18d2      	adds	r2, r2, r3
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	18d3      	adds	r3, r2, r3
 80024d0:	4ad0      	ldr	r2, [pc, #832]	@ (8002814 <HAL_PCD_EP_DB_Transmit+0x378>)
 80024d2:	4694      	mov	ip, r2
 80024d4:	4463      	add	r3, ip
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	2188      	movs	r1, #136	@ 0x88
 80024da:	187b      	adds	r3, r7, r1
 80024dc:	0592      	lsls	r2, r2, #22
 80024de:	0d92      	lsrs	r2, r2, #22
 80024e0:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	187b      	adds	r3, r7, r1
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d907      	bls.n	80024fe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	187b      	adds	r3, r7, r1
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	1ad2      	subs	r2, r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	619a      	str	r2, [r3, #24]
 80024fc:	e002      	b.n	8002504 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	2200      	movs	r2, #0
 8002502:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d000      	beq.n	800250e <HAL_PCD_EP_DB_Transmit+0x72>
 800250c:	e0b5      	b.n	800267a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	785b      	ldrb	r3, [r3, #1]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d125      	bne.n	8002562 <HAL_PCD_EP_DB_Transmit+0xc6>
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2250      	movs	r2, #80	@ 0x50
 8002522:	5a9b      	ldrh	r3, [r3, r2]
 8002524:	b29b      	uxth	r3, r3
 8002526:	001a      	movs	r2, r3
 8002528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800252a:	189b      	adds	r3, r3, r2
 800252c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	00da      	lsls	r2, r3, #3
 8002534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002536:	18d3      	adds	r3, r2, r3
 8002538:	4ab6      	ldr	r2, [pc, #728]	@ (8002814 <HAL_PCD_EP_DB_Transmit+0x378>)
 800253a:	4694      	mov	ip, r2
 800253c:	4463      	add	r3, ip
 800253e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	b29b      	uxth	r3, r3
 8002546:	059b      	lsls	r3, r3, #22
 8002548:	0d9b      	lsrs	r3, r3, #22
 800254a:	b29a      	uxth	r2, r3
 800254c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254e:	801a      	strh	r2, [r3, #0]
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4ab0      	ldr	r2, [pc, #704]	@ (8002818 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002558:	4313      	orrs	r3, r2
 800255a:	b29a      	uxth	r2, r3
 800255c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255e:	801a      	strh	r2, [r3, #0]
 8002560:	e01b      	b.n	800259a <HAL_PCD_EP_DB_Transmit+0xfe>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	785b      	ldrb	r3, [r3, #1]
 8002566:	2b01      	cmp	r3, #1
 8002568:	d117      	bne.n	800259a <HAL_PCD_EP_DB_Transmit+0xfe>
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2250      	movs	r2, #80	@ 0x50
 8002576:	5a9b      	ldrh	r3, [r3, r2]
 8002578:	b29b      	uxth	r3, r3
 800257a:	001a      	movs	r2, r3
 800257c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800257e:	189b      	adds	r3, r3, r2
 8002580:	637b      	str	r3, [r7, #52]	@ 0x34
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	00da      	lsls	r2, r3, #3
 8002588:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800258a:	18d3      	adds	r3, r2, r3
 800258c:	4aa1      	ldr	r2, [pc, #644]	@ (8002814 <HAL_PCD_EP_DB_Transmit+0x378>)
 800258e:	4694      	mov	ip, r2
 8002590:	4463      	add	r3, ip
 8002592:	633b      	str	r3, [r7, #48]	@ 0x30
 8002594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002596:	2200      	movs	r2, #0
 8002598:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	785b      	ldrb	r3, [r3, #1]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d125      	bne.n	80025f4 <HAL_PCD_EP_DB_Transmit+0x158>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2250      	movs	r2, #80	@ 0x50
 80025b4:	5a9b      	ldrh	r3, [r3, r2]
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	001a      	movs	r2, r3
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	189b      	adds	r3, r3, r2
 80025be:	61fb      	str	r3, [r7, #28]
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	00da      	lsls	r2, r3, #3
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	18d3      	adds	r3, r2, r3
 80025ca:	4a94      	ldr	r2, [pc, #592]	@ (800281c <HAL_PCD_EP_DB_Transmit+0x380>)
 80025cc:	4694      	mov	ip, r2
 80025ce:	4463      	add	r3, ip
 80025d0:	61bb      	str	r3, [r7, #24]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	059b      	lsls	r3, r3, #22
 80025da:	0d9b      	lsrs	r3, r3, #22
 80025dc:	b29a      	uxth	r2, r3
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	801a      	strh	r2, [r3, #0]
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	881b      	ldrh	r3, [r3, #0]
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	4a8b      	ldr	r2, [pc, #556]	@ (8002818 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	801a      	strh	r2, [r3, #0]
 80025f2:	e018      	b.n	8002626 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d114      	bne.n	8002626 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2250      	movs	r2, #80	@ 0x50
 8002602:	5a9b      	ldrh	r3, [r3, r2]
 8002604:	b29b      	uxth	r3, r3
 8002606:	001a      	movs	r2, r3
 8002608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800260a:	189b      	adds	r3, r3, r2
 800260c:	627b      	str	r3, [r7, #36]	@ 0x24
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	00da      	lsls	r2, r3, #3
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	18d3      	adds	r3, r2, r3
 8002618:	4a80      	ldr	r2, [pc, #512]	@ (800281c <HAL_PCD_EP_DB_Transmit+0x380>)
 800261a:	4694      	mov	ip, r2
 800261c:	4463      	add	r3, ip
 800261e:	623b      	str	r3, [r7, #32]
 8002620:	6a3b      	ldr	r3, [r7, #32]
 8002622:	2200      	movs	r2, #0
 8002624:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	0011      	movs	r1, r2
 800262e:	0018      	movs	r0, r3
 8002630:	f005 fd0c 	bl	800804c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002634:	1dbb      	adds	r3, r7, #6
 8002636:	881a      	ldrh	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	@ 0x80
 800263a:	01db      	lsls	r3, r3, #7
 800263c:	4013      	ands	r3, r2
 800263e:	d100      	bne.n	8002642 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8002640:	e308      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	001a      	movs	r2, r3
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	18d3      	adds	r3, r2, r3
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29a      	uxth	r2, r3
 8002654:	2016      	movs	r0, #22
 8002656:	183b      	adds	r3, r7, r0
 8002658:	4971      	ldr	r1, [pc, #452]	@ (8002820 <HAL_PCD_EP_DB_Transmit+0x384>)
 800265a:	400a      	ands	r2, r1
 800265c:	801a      	strh	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	001a      	movs	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	18d3      	adds	r3, r2, r3
 800266c:	183a      	adds	r2, r7, r0
 800266e:	8812      	ldrh	r2, [r2, #0]
 8002670:	496c      	ldr	r1, [pc, #432]	@ (8002824 <HAL_PCD_EP_DB_Transmit+0x388>)
 8002672:	430a      	orrs	r2, r1
 8002674:	b292      	uxth	r2, r2
 8002676:	801a      	strh	r2, [r3, #0]
 8002678:	e2ec      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800267a:	1dbb      	adds	r3, r7, #6
 800267c:	881a      	ldrh	r2, [r3, #0]
 800267e:	2380      	movs	r3, #128	@ 0x80
 8002680:	01db      	lsls	r3, r3, #7
 8002682:	4013      	ands	r3, r2
 8002684:	d01a      	beq.n	80026bc <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	001a      	movs	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	18d3      	adds	r3, r2, r3
 8002694:	881b      	ldrh	r3, [r3, #0]
 8002696:	b29a      	uxth	r2, r3
 8002698:	208a      	movs	r0, #138	@ 0x8a
 800269a:	183b      	adds	r3, r7, r0
 800269c:	4960      	ldr	r1, [pc, #384]	@ (8002820 <HAL_PCD_EP_DB_Transmit+0x384>)
 800269e:	400a      	ands	r2, r1
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	001a      	movs	r2, r3
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	18d3      	adds	r3, r2, r3
 80026b0:	183a      	adds	r2, r7, r0
 80026b2:	8812      	ldrh	r2, [r2, #0]
 80026b4:	495b      	ldr	r1, [pc, #364]	@ (8002824 <HAL_PCD_EP_DB_Transmit+0x388>)
 80026b6:	430a      	orrs	r2, r1
 80026b8:	b292      	uxth	r2, r2
 80026ba:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2224      	movs	r2, #36	@ 0x24
 80026c0:	5c9b      	ldrb	r3, [r3, r2]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d000      	beq.n	80026c8 <HAL_PCD_EP_DB_Transmit+0x22c>
 80026c6:	e2c5      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	2188      	movs	r1, #136	@ 0x88
 80026ce:	187b      	adds	r3, r7, r1
 80026d0:	881b      	ldrh	r3, [r3, #0]
 80026d2:	18d2      	adds	r2, r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	187b      	adds	r3, r7, r1
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	18d2      	adds	r2, r2, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	6a1a      	ldr	r2, [r3, #32]
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d30c      	bcc.n	800270c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	218c      	movs	r1, #140	@ 0x8c
 80026f8:	187a      	adds	r2, r7, r1
 80026fa:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	6a1a      	ldr	r2, [r3, #32]
 8002700:	187b      	adds	r3, r7, r1
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	1ad2      	subs	r2, r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	621a      	str	r2, [r3, #32]
 800270a:	e01a      	b.n	8002742 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002714:	2388      	movs	r3, #136	@ 0x88
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	881b      	ldrh	r3, [r3, #0]
 800271a:	228c      	movs	r2, #140	@ 0x8c
 800271c:	18ba      	adds	r2, r7, r2
 800271e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	2224      	movs	r2, #36	@ 0x24
 8002724:	2100      	movs	r1, #0
 8002726:	5499      	strb	r1, [r3, r2]
 8002728:	e00b      	b.n	8002742 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2224      	movs	r2, #36	@ 0x24
 800272e:	2100      	movs	r1, #0
 8002730:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	228c      	movs	r2, #140	@ 0x8c
 8002738:	18ba      	adds	r2, r7, r2
 800273a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2200      	movs	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d000      	beq.n	800274c <HAL_PCD_EP_DB_Transmit+0x2b0>
 800274a:	e06d      	b.n	8002828 <HAL_PCD_EP_DB_Transmit+0x38c>
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2250      	movs	r2, #80	@ 0x50
 8002758:	5a9b      	ldrh	r3, [r3, r2]
 800275a:	b29b      	uxth	r3, r3
 800275c:	001a      	movs	r2, r3
 800275e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002760:	189b      	adds	r3, r3, r2
 8002762:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	00da      	lsls	r2, r3, #3
 800276a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800276c:	18d3      	adds	r3, r2, r3
 800276e:	4a29      	ldr	r2, [pc, #164]	@ (8002814 <HAL_PCD_EP_DB_Transmit+0x378>)
 8002770:	4694      	mov	ip, r2
 8002772:	4463      	add	r3, ip
 8002774:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	059b      	lsls	r3, r3, #22
 800277e:	0d9b      	lsrs	r3, r3, #22
 8002780:	b29a      	uxth	r2, r3
 8002782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002784:	801a      	strh	r2, [r3, #0]
 8002786:	238c      	movs	r3, #140	@ 0x8c
 8002788:	18fb      	adds	r3, r7, r3
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d108      	bne.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x306>
 8002790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002792:	881b      	ldrh	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4a20      	ldr	r2, [pc, #128]	@ (8002818 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8002798:	4313      	orrs	r3, r2
 800279a:	b29a      	uxth	r2, r3
 800279c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	e061      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80027a2:	228c      	movs	r2, #140	@ 0x8c
 80027a4:	18bb      	adds	r3, r7, r2
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b3e      	cmp	r3, #62	@ 0x3e
 80027aa:	d817      	bhi.n	80027dc <HAL_PCD_EP_DB_Transmit+0x340>
 80027ac:	18bb      	adds	r3, r7, r2
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027b4:	18bb      	adds	r3, r7, r2
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2201      	movs	r2, #1
 80027ba:	4013      	ands	r3, r2
 80027bc:	d002      	beq.n	80027c4 <HAL_PCD_EP_DB_Transmit+0x328>
 80027be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027c0:	3301      	adds	r3, #1
 80027c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	4313      	orrs	r3, r2
 80027d4:	b29a      	uxth	r2, r3
 80027d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027d8:	801a      	strh	r2, [r3, #0]
 80027da:	e044      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80027dc:	228c      	movs	r2, #140	@ 0x8c
 80027de:	18bb      	adds	r3, r7, r2
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027e6:	18bb      	adds	r3, r7, r2
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	221f      	movs	r2, #31
 80027ec:	4013      	ands	r3, r2
 80027ee:	d102      	bne.n	80027f6 <HAL_PCD_EP_DB_Transmit+0x35a>
 80027f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027f2:	3b01      	subs	r3, #1
 80027f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80027fe:	b29b      	uxth	r3, r3
 8002800:	029b      	lsls	r3, r3, #10
 8002802:	b29b      	uxth	r3, r3
 8002804:	4313      	orrs	r3, r2
 8002806:	b29b      	uxth	r3, r3
 8002808:	4a03      	ldr	r2, [pc, #12]	@ (8002818 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800280a:	4313      	orrs	r3, r2
 800280c:	b29a      	uxth	r2, r3
 800280e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002810:	801a      	strh	r2, [r3, #0]
 8002812:	e028      	b.n	8002866 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002814:	00000402 	.word	0x00000402
 8002818:	ffff8000 	.word	0xffff8000
 800281c:	00000406 	.word	0x00000406
 8002820:	ffff8f8f 	.word	0xffff8f8f
 8002824:	ffffc080 	.word	0xffffc080
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d11a      	bne.n	8002866 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	647b      	str	r3, [r7, #68]	@ 0x44
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2250      	movs	r2, #80	@ 0x50
 800283c:	5a9b      	ldrh	r3, [r3, r2]
 800283e:	b29b      	uxth	r3, r3
 8002840:	001a      	movs	r2, r3
 8002842:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002844:	189b      	adds	r3, r3, r2
 8002846:	647b      	str	r3, [r7, #68]	@ 0x44
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	00da      	lsls	r2, r3, #3
 800284e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002850:	18d3      	adds	r3, r2, r3
 8002852:	4ad9      	ldr	r2, [pc, #868]	@ (8002bb8 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8002854:	4694      	mov	ip, r2
 8002856:	4463      	add	r3, ip
 8002858:	643b      	str	r3, [r7, #64]	@ 0x40
 800285a:	238c      	movs	r3, #140	@ 0x8c
 800285c:	18fb      	adds	r3, r7, r3
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b29a      	uxth	r2, r3
 8002862:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002864:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	6959      	ldr	r1, [r3, #20]
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	891a      	ldrh	r2, [r3, #8]
 8002872:	238c      	movs	r3, #140	@ 0x8c
 8002874:	18fb      	adds	r3, r7, r3
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	b29b      	uxth	r3, r3
 800287a:	f003 fdc1 	bl	8006400 <USB_WritePMA>
 800287e:	e1e9      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2250      	movs	r2, #80	@ 0x50
 8002886:	5a9b      	ldrh	r3, [r3, r2]
 8002888:	b29b      	uxth	r3, r3
 800288a:	001a      	movs	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	18d2      	adds	r2, r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	18d3      	adds	r3, r2, r3
 800289a:	4ac8      	ldr	r2, [pc, #800]	@ (8002bbc <HAL_PCD_EP_DB_Transmit+0x720>)
 800289c:	4694      	mov	ip, r2
 800289e:	4463      	add	r3, ip
 80028a0:	881a      	ldrh	r2, [r3, #0]
 80028a2:	2188      	movs	r1, #136	@ 0x88
 80028a4:	187b      	adds	r3, r7, r1
 80028a6:	0592      	lsls	r2, r2, #22
 80028a8:	0d92      	lsrs	r2, r2, #22
 80028aa:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	699a      	ldr	r2, [r3, #24]
 80028b0:	187b      	adds	r3, r7, r1
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d307      	bcc.n	80028c8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	699a      	ldr	r2, [r3, #24]
 80028bc:	187b      	adds	r3, r7, r1
 80028be:	881b      	ldrh	r3, [r3, #0]
 80028c0:	1ad2      	subs	r2, r2, r3
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	619a      	str	r2, [r3, #24]
 80028c6:	e002      	b.n	80028ce <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2200      	movs	r2, #0
 80028cc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d000      	beq.n	80028d8 <HAL_PCD_EP_DB_Transmit+0x43c>
 80028d6:	e0bb      	b.n	8002a50 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	785b      	ldrb	r3, [r3, #1]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d125      	bne.n	800292c <HAL_PCD_EP_DB_Transmit+0x490>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2250      	movs	r2, #80	@ 0x50
 80028ec:	5a9b      	ldrh	r3, [r3, r2]
 80028ee:	b29b      	uxth	r3, r3
 80028f0:	001a      	movs	r2, r3
 80028f2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80028f4:	189b      	adds	r3, r3, r2
 80028f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	00da      	lsls	r2, r3, #3
 80028fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002900:	18d3      	adds	r3, r2, r3
 8002902:	4aad      	ldr	r2, [pc, #692]	@ (8002bb8 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8002904:	4694      	mov	ip, r2
 8002906:	4463      	add	r3, ip
 8002908:	67bb      	str	r3, [r7, #120]	@ 0x78
 800290a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800290c:	881b      	ldrh	r3, [r3, #0]
 800290e:	b29b      	uxth	r3, r3
 8002910:	059b      	lsls	r3, r3, #22
 8002912:	0d9b      	lsrs	r3, r3, #22
 8002914:	b29a      	uxth	r2, r3
 8002916:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	b29b      	uxth	r3, r3
 8002920:	4aa7      	ldr	r2, [pc, #668]	@ (8002bc0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002922:	4313      	orrs	r3, r2
 8002924:	b29a      	uxth	r2, r3
 8002926:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002928:	801a      	strh	r2, [r3, #0]
 800292a:	e01b      	b.n	8002964 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	785b      	ldrb	r3, [r3, #1]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d117      	bne.n	8002964 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	667b      	str	r3, [r7, #100]	@ 0x64
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2250      	movs	r2, #80	@ 0x50
 8002940:	5a9b      	ldrh	r3, [r3, r2]
 8002942:	b29b      	uxth	r3, r3
 8002944:	001a      	movs	r2, r3
 8002946:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002948:	189b      	adds	r3, r3, r2
 800294a:	667b      	str	r3, [r7, #100]	@ 0x64
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	00da      	lsls	r2, r3, #3
 8002952:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002954:	18d3      	adds	r3, r2, r3
 8002956:	4a98      	ldr	r2, [pc, #608]	@ (8002bb8 <HAL_PCD_EP_DB_Transmit+0x71c>)
 8002958:	4694      	mov	ip, r2
 800295a:	4463      	add	r3, ip
 800295c:	663b      	str	r3, [r7, #96]	@ 0x60
 800295e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002960:	2200      	movs	r2, #0
 8002962:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	677b      	str	r3, [r7, #116]	@ 0x74
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d12b      	bne.n	80029ca <HAL_PCD_EP_DB_Transmit+0x52e>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2250      	movs	r2, #80	@ 0x50
 800297e:	5a9b      	ldrh	r3, [r3, r2]
 8002980:	b29b      	uxth	r3, r3
 8002982:	001a      	movs	r2, r3
 8002984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002986:	189b      	adds	r3, r3, r2
 8002988:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	00da      	lsls	r2, r3, #3
 8002990:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002992:	18d3      	adds	r3, r2, r3
 8002994:	4a89      	ldr	r2, [pc, #548]	@ (8002bbc <HAL_PCD_EP_DB_Transmit+0x720>)
 8002996:	4694      	mov	ip, r2
 8002998:	4463      	add	r3, ip
 800299a:	2184      	movs	r1, #132	@ 0x84
 800299c:	187a      	adds	r2, r7, r1
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	187b      	adds	r3, r7, r1
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	059b      	lsls	r3, r3, #22
 80029aa:	0d9b      	lsrs	r3, r3, #22
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	187b      	adds	r3, r7, r1
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	801a      	strh	r2, [r3, #0]
 80029b4:	187b      	adds	r3, r7, r1
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	4a80      	ldr	r2, [pc, #512]	@ (8002bc0 <HAL_PCD_EP_DB_Transmit+0x724>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	b29a      	uxth	r2, r3
 80029c2:	187b      	adds	r3, r7, r1
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	801a      	strh	r2, [r3, #0]
 80029c8:	e018      	b.n	80029fc <HAL_PCD_EP_DB_Transmit+0x560>
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	785b      	ldrb	r3, [r3, #1]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d114      	bne.n	80029fc <HAL_PCD_EP_DB_Transmit+0x560>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2250      	movs	r2, #80	@ 0x50
 80029d8:	5a9b      	ldrh	r3, [r3, r2]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	001a      	movs	r2, r3
 80029de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029e0:	189b      	adds	r3, r3, r2
 80029e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	00da      	lsls	r2, r3, #3
 80029ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029ec:	18d3      	adds	r3, r2, r3
 80029ee:	4a73      	ldr	r2, [pc, #460]	@ (8002bbc <HAL_PCD_EP_DB_Transmit+0x720>)
 80029f0:	4694      	mov	ip, r2
 80029f2:	4463      	add	r3, ip
 80029f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80029f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029f8:	2200      	movs	r2, #0
 80029fa:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781a      	ldrb	r2, [r3, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	0011      	movs	r1, r2
 8002a04:	0018      	movs	r0, r3
 8002a06:	f005 fb21 	bl	800804c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a0a:	1dbb      	adds	r3, r7, #6
 8002a0c:	881a      	ldrh	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	@ 0x80
 8002a10:	01db      	lsls	r3, r3, #7
 8002a12:	4013      	ands	r3, r2
 8002a14:	d000      	beq.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x57c>
 8002a16:	e11d      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	001a      	movs	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	18d3      	adds	r3, r2, r3
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	2082      	movs	r0, #130	@ 0x82
 8002a2c:	183b      	adds	r3, r7, r0
 8002a2e:	4965      	ldr	r1, [pc, #404]	@ (8002bc4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002a30:	400a      	ands	r2, r1
 8002a32:	801a      	strh	r2, [r3, #0]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	001a      	movs	r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	18d3      	adds	r3, r2, r3
 8002a42:	183a      	adds	r2, r7, r0
 8002a44:	8812      	ldrh	r2, [r2, #0]
 8002a46:	4960      	ldr	r1, [pc, #384]	@ (8002bc8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002a48:	430a      	orrs	r2, r1
 8002a4a:	b292      	uxth	r2, r2
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	e101      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a50:	1dbb      	adds	r3, r7, #6
 8002a52:	881a      	ldrh	r2, [r3, #0]
 8002a54:	2380      	movs	r3, #128	@ 0x80
 8002a56:	01db      	lsls	r3, r3, #7
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d11a      	bne.n	8002a92 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	001a      	movs	r2, r3
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	18d3      	adds	r3, r2, r3
 8002a6a:	881b      	ldrh	r3, [r3, #0]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	204e      	movs	r0, #78	@ 0x4e
 8002a70:	183b      	adds	r3, r7, r0
 8002a72:	4954      	ldr	r1, [pc, #336]	@ (8002bc4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	001a      	movs	r2, r3
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	18d3      	adds	r3, r2, r3
 8002a86:	183a      	adds	r2, r7, r0
 8002a88:	8812      	ldrh	r2, [r2, #0]
 8002a8a:	494f      	ldr	r1, [pc, #316]	@ (8002bc8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	b292      	uxth	r2, r2
 8002a90:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2224      	movs	r2, #36	@ 0x24
 8002a96:	5c9b      	ldrb	r3, [r3, r2]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d000      	beq.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x602>
 8002a9c:	e0da      	b.n	8002c54 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	695a      	ldr	r2, [r3, #20]
 8002aa2:	2188      	movs	r1, #136	@ 0x88
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	18d2      	adds	r2, r2, r3
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	187b      	adds	r3, r7, r1
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	18d2      	adds	r2, r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	6a1a      	ldr	r2, [r3, #32]
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d30c      	bcc.n	8002ae2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	218c      	movs	r1, #140	@ 0x8c
 8002ace:	187a      	adds	r2, r7, r1
 8002ad0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	6a1a      	ldr	r2, [r3, #32]
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	1ad2      	subs	r2, r2, r3
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	621a      	str	r2, [r3, #32]
 8002ae0:	e01a      	b.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10a      	bne.n	8002b00 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8002aea:	2388      	movs	r3, #136	@ 0x88
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	228c      	movs	r2, #140	@ 0x8c
 8002af2:	18ba      	adds	r2, r7, r2
 8002af4:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	2224      	movs	r2, #36	@ 0x24
 8002afa:	2100      	movs	r1, #0
 8002afc:	5499      	strb	r1, [r3, r2]
 8002afe:	e00b      	b.n	8002b18 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	6a1b      	ldr	r3, [r3, #32]
 8002b04:	228c      	movs	r2, #140	@ 0x8c
 8002b06:	18ba      	adds	r2, r7, r2
 8002b08:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2224      	movs	r2, #36	@ 0x24
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	785b      	ldrb	r3, [r3, #1]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d000      	beq.n	8002b28 <HAL_PCD_EP_DB_Transmit+0x68c>
 8002b26:	e06d      	b.n	8002c04 <HAL_PCD_EP_DB_Transmit+0x768>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2250      	movs	r2, #80	@ 0x50
 8002b34:	5a9b      	ldrh	r3, [r3, r2]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	001a      	movs	r2, r3
 8002b3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b3c:	189b      	adds	r3, r3, r2
 8002b3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	00da      	lsls	r2, r3, #3
 8002b46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b48:	18d3      	adds	r3, r2, r3
 8002b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8002bbc <HAL_PCD_EP_DB_Transmit+0x720>)
 8002b4c:	4694      	mov	ip, r2
 8002b4e:	4463      	add	r3, ip
 8002b50:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002b52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	059b      	lsls	r3, r3, #22
 8002b5a:	0d9b      	lsrs	r3, r3, #22
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b60:	801a      	strh	r2, [r3, #0]
 8002b62:	238c      	movs	r3, #140	@ 0x8c
 8002b64:	18fb      	adds	r3, r7, r3
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d108      	bne.n	8002b7e <HAL_PCD_EP_DB_Transmit+0x6e2>
 8002b6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	4a13      	ldr	r2, [pc, #76]	@ (8002bc0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	e05e      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002b7e:	228c      	movs	r2, #140	@ 0x8c
 8002b80:	18bb      	adds	r3, r7, r2
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b3e      	cmp	r3, #62	@ 0x3e
 8002b86:	d821      	bhi.n	8002bcc <HAL_PCD_EP_DB_Transmit+0x730>
 8002b88:	18bb      	adds	r3, r7, r2
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	085b      	lsrs	r3, r3, #1
 8002b8e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b90:	18bb      	adds	r3, r7, r2
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2201      	movs	r2, #1
 8002b96:	4013      	ands	r3, r2
 8002b98:	d002      	beq.n	8002ba0 <HAL_PCD_EP_DB_Transmit+0x704>
 8002b9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ba0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bb4:	801a      	strh	r2, [r3, #0]
 8002bb6:	e041      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002bb8:	00000402 	.word	0x00000402
 8002bbc:	00000406 	.word	0x00000406
 8002bc0:	ffff8000 	.word	0xffff8000
 8002bc4:	ffff8f8f 	.word	0xffff8f8f
 8002bc8:	ffffc080 	.word	0xffffc080
 8002bcc:	228c      	movs	r2, #140	@ 0x8c
 8002bce:	18bb      	adds	r3, r7, r2
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	095b      	lsrs	r3, r3, #5
 8002bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bd6:	18bb      	adds	r3, r7, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	221f      	movs	r2, #31
 8002bdc:	4013      	ands	r3, r2
 8002bde:	d102      	bne.n	8002be6 <HAL_PCD_EP_DB_Transmit+0x74a>
 8002be0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002be2:	3b01      	subs	r3, #1
 8002be4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002be6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29a      	uxth	r2, r3
 8002bec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	029b      	lsls	r3, r3, #10
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	4a2c      	ldr	r2, [pc, #176]	@ (8002cac <HAL_PCD_EP_DB_Transmit+0x810>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c00:	801a      	strh	r2, [r3, #0]
 8002c02:	e01b      	b.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	785b      	ldrb	r3, [r3, #1]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d117      	bne.n	8002c3c <HAL_PCD_EP_DB_Transmit+0x7a0>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2250      	movs	r2, #80	@ 0x50
 8002c12:	5a9b      	ldrh	r3, [r3, r2]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	001a      	movs	r2, r3
 8002c18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1a:	189b      	adds	r3, r3, r2
 8002c1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	00da      	lsls	r2, r3, #3
 8002c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c26:	18d3      	adds	r3, r2, r3
 8002c28:	4a21      	ldr	r2, [pc, #132]	@ (8002cb0 <HAL_PCD_EP_DB_Transmit+0x814>)
 8002c2a:	4694      	mov	ip, r2
 8002c2c:	4463      	add	r3, ip
 8002c2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002c30:	238c      	movs	r3, #140	@ 0x8c
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c3a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	6959      	ldr	r1, [r3, #20]
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	895a      	ldrh	r2, [r3, #10]
 8002c48:	238c      	movs	r3, #140	@ 0x8c
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f003 fbd6 	bl	8006400 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	001a      	movs	r2, r3
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	18d3      	adds	r3, r2, r3
 8002c62:	881b      	ldrh	r3, [r3, #0]
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	2014      	movs	r0, #20
 8002c68:	183b      	adds	r3, r7, r0
 8002c6a:	4912      	ldr	r1, [pc, #72]	@ (8002cb4 <HAL_PCD_EP_DB_Transmit+0x818>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	183b      	adds	r3, r7, r0
 8002c72:	183a      	adds	r2, r7, r0
 8002c74:	8812      	ldrh	r2, [r2, #0]
 8002c76:	2110      	movs	r1, #16
 8002c78:	404a      	eors	r2, r1
 8002c7a:	801a      	strh	r2, [r3, #0]
 8002c7c:	183b      	adds	r3, r7, r0
 8002c7e:	183a      	adds	r2, r7, r0
 8002c80:	8812      	ldrh	r2, [r2, #0]
 8002c82:	2120      	movs	r1, #32
 8002c84:	404a      	eors	r2, r1
 8002c86:	801a      	strh	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	18d3      	adds	r3, r2, r3
 8002c96:	183a      	adds	r2, r7, r0
 8002c98:	8812      	ldrh	r2, [r2, #0]
 8002c9a:	4907      	ldr	r1, [pc, #28]	@ (8002cb8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	b292      	uxth	r2, r2
 8002ca0:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b024      	add	sp, #144	@ 0x90
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	ffff8000 	.word	0xffff8000
 8002cb0:	00000406 	.word	0x00000406
 8002cb4:	ffff8fbf 	.word	0xffff8fbf
 8002cb8:	ffff8080 	.word	0xffff8080

08002cbc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002cbc:	b590      	push	{r4, r7, lr}
 8002cbe:	b087      	sub	sp, #28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	0008      	movs	r0, r1
 8002cc6:	0011      	movs	r1, r2
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	240a      	movs	r4, #10
 8002ccc:	193b      	adds	r3, r7, r4
 8002cce:	1c02      	adds	r2, r0, #0
 8002cd0:	801a      	strh	r2, [r3, #0]
 8002cd2:	2308      	movs	r3, #8
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	1c0a      	adds	r2, r1, #0
 8002cd8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002cda:	0021      	movs	r1, r4
 8002cdc:	187b      	adds	r3, r7, r1
 8002cde:	881b      	ldrh	r3, [r3, #0]
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cea:	187b      	adds	r3, r7, r1
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	2207      	movs	r2, #7
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	0013      	movs	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	189b      	adds	r3, r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	3310      	adds	r3, #16
 8002cfc:	68fa      	ldr	r2, [r7, #12]
 8002cfe:	18d3      	adds	r3, r2, r3
 8002d00:	617b      	str	r3, [r7, #20]
 8002d02:	e00b      	b.n	8002d1c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002d04:	230a      	movs	r3, #10
 8002d06:	18fb      	adds	r3, r7, r3
 8002d08:	881a      	ldrh	r2, [r3, #0]
 8002d0a:	0013      	movs	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	189b      	adds	r3, r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	3351      	adds	r3, #81	@ 0x51
 8002d14:	33ff      	adds	r3, #255	@ 0xff
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	18d3      	adds	r3, r2, r3
 8002d1a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	881b      	ldrh	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d107      	bne.n	8002d36 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	80da      	strh	r2, [r3, #6]
 8002d34:	e00b      	b.n	8002d4e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	0c1b      	lsrs	r3, r3, #16
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	b007      	add	sp, #28
 8002d56:	bd90      	pop	{r4, r7, pc}

08002d58 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	23b4      	movs	r3, #180	@ 0xb4
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	2101      	movs	r1, #1
 8002d6e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	23b2      	movs	r3, #178	@ 0xb2
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	2100      	movs	r1, #0
 8002d78:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2254      	movs	r2, #84	@ 0x54
 8002d7e:	5a9b      	ldrh	r3, [r3, r2]
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2201      	movs	r2, #1
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b299      	uxth	r1, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2254      	movs	r2, #84	@ 0x54
 8002d8c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2254      	movs	r2, #84	@ 0x54
 8002d92:	5a9b      	ldrh	r3, [r3, r2]
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2202      	movs	r2, #2
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	b299      	uxth	r1, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2254      	movs	r2, #84	@ 0x54
 8002da0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	0018      	movs	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b004      	add	sp, #16
 8002daa:	bd80      	pop	{r7, pc}

08002dac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b082      	sub	sp, #8
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	000a      	movs	r2, r1
 8002db6:	1cfb      	adds	r3, r7, #3
 8002db8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b002      	add	sp, #8
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d102      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f000 fb76 	bl	80034c4 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4013      	ands	r3, r2
 8002de0:	d100      	bne.n	8002de4 <HAL_RCC_OscConfig+0x20>
 8002de2:	e08e      	b.n	8002f02 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002de4:	4bc5      	ldr	r3, [pc, #788]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	220c      	movs	r2, #12
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d00e      	beq.n	8002e0e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002df0:	4bc2      	ldr	r3, [pc, #776]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	220c      	movs	r2, #12
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b08      	cmp	r3, #8
 8002dfa:	d117      	bne.n	8002e2c <HAL_RCC_OscConfig+0x68>
 8002dfc:	4bbf      	ldr	r3, [pc, #764]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	23c0      	movs	r3, #192	@ 0xc0
 8002e02:	025b      	lsls	r3, r3, #9
 8002e04:	401a      	ands	r2, r3
 8002e06:	2380      	movs	r3, #128	@ 0x80
 8002e08:	025b      	lsls	r3, r3, #9
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d10e      	bne.n	8002e2c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0e:	4bbb      	ldr	r3, [pc, #748]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	029b      	lsls	r3, r3, #10
 8002e16:	4013      	ands	r3, r2
 8002e18:	d100      	bne.n	8002e1c <HAL_RCC_OscConfig+0x58>
 8002e1a:	e071      	b.n	8002f00 <HAL_RCC_OscConfig+0x13c>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d000      	beq.n	8002e26 <HAL_RCC_OscConfig+0x62>
 8002e24:	e06c      	b.n	8002f00 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f000 fb4c 	bl	80034c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_OscConfig+0x80>
 8002e34:	4bb1      	ldr	r3, [pc, #708]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4bb0      	ldr	r3, [pc, #704]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e3a:	2180      	movs	r1, #128	@ 0x80
 8002e3c:	0249      	lsls	r1, r1, #9
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
 8002e42:	e02f      	b.n	8002ea4 <HAL_RCC_OscConfig+0xe0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10c      	bne.n	8002e66 <HAL_RCC_OscConfig+0xa2>
 8002e4c:	4bab      	ldr	r3, [pc, #684]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	4baa      	ldr	r3, [pc, #680]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e52:	49ab      	ldr	r1, [pc, #684]	@ (8003100 <HAL_RCC_OscConfig+0x33c>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	4ba8      	ldr	r3, [pc, #672]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4ba7      	ldr	r3, [pc, #668]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e5e:	49a9      	ldr	r1, [pc, #676]	@ (8003104 <HAL_RCC_OscConfig+0x340>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	e01e      	b.n	8002ea4 <HAL_RCC_OscConfig+0xe0>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b05      	cmp	r3, #5
 8002e6c:	d10e      	bne.n	8002e8c <HAL_RCC_OscConfig+0xc8>
 8002e6e:	4ba3      	ldr	r3, [pc, #652]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4ba2      	ldr	r3, [pc, #648]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e74:	2180      	movs	r1, #128	@ 0x80
 8002e76:	02c9      	lsls	r1, r1, #11
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
 8002e7c:	4b9f      	ldr	r3, [pc, #636]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	4b9e      	ldr	r3, [pc, #632]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e82:	2180      	movs	r1, #128	@ 0x80
 8002e84:	0249      	lsls	r1, r1, #9
 8002e86:	430a      	orrs	r2, r1
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e00b      	b.n	8002ea4 <HAL_RCC_OscConfig+0xe0>
 8002e8c:	4b9b      	ldr	r3, [pc, #620]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	4b9a      	ldr	r3, [pc, #616]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e92:	499b      	ldr	r1, [pc, #620]	@ (8003100 <HAL_RCC_OscConfig+0x33c>)
 8002e94:	400a      	ands	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	4b98      	ldr	r3, [pc, #608]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	4b97      	ldr	r3, [pc, #604]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002e9e:	4999      	ldr	r1, [pc, #612]	@ (8003104 <HAL_RCC_OscConfig+0x340>)
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d014      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eac:	f7fe f854 	bl	8000f58 <HAL_GetTick>
 8002eb0:	0003      	movs	r3, r0
 8002eb2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002eb6:	f7fe f84f 	bl	8000f58 <HAL_GetTick>
 8002eba:	0002      	movs	r2, r0
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b64      	cmp	r3, #100	@ 0x64
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e2fd      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ec8:	4b8c      	ldr	r3, [pc, #560]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	2380      	movs	r3, #128	@ 0x80
 8002ece:	029b      	lsls	r3, r3, #10
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0xf2>
 8002ed4:	e015      	b.n	8002f02 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7fe f83f 	bl	8000f58 <HAL_GetTick>
 8002eda:	0003      	movs	r3, r0
 8002edc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fe f83a 	bl	8000f58 <HAL_GetTick>
 8002ee4:	0002      	movs	r2, r0
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	@ 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e2e8      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	4b82      	ldr	r3, [pc, #520]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	@ 0x80
 8002ef8:	029b      	lsls	r3, r3, #10
 8002efa:	4013      	ands	r3, r2
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x11c>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2202      	movs	r2, #2
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d100      	bne.n	8002f0e <HAL_RCC_OscConfig+0x14a>
 8002f0c:	e06c      	b.n	8002fe8 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f0e:	4b7b      	ldr	r3, [pc, #492]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	220c      	movs	r2, #12
 8002f14:	4013      	ands	r3, r2
 8002f16:	d00e      	beq.n	8002f36 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f18:	4b78      	ldr	r3, [pc, #480]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	220c      	movs	r2, #12
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d11f      	bne.n	8002f64 <HAL_RCC_OscConfig+0x1a0>
 8002f24:	4b75      	ldr	r3, [pc, #468]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	23c0      	movs	r3, #192	@ 0xc0
 8002f2a:	025b      	lsls	r3, r3, #9
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	2380      	movs	r3, #128	@ 0x80
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d116      	bne.n	8002f64 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f36:	4b71      	ldr	r3, [pc, #452]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2202      	movs	r2, #2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	d005      	beq.n	8002f4c <HAL_RCC_OscConfig+0x188>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e2bb      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b6b      	ldr	r3, [pc, #428]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	22f8      	movs	r2, #248	@ 0xf8
 8002f52:	4393      	bics	r3, r2
 8002f54:	0019      	movs	r1, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	00da      	lsls	r2, r3, #3
 8002f5c:	4b67      	ldr	r3, [pc, #412]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f62:	e041      	b.n	8002fe8 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d024      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f6c:	4b63      	ldr	r3, [pc, #396]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b62      	ldr	r3, [pc, #392]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002f72:	2101      	movs	r1, #1
 8002f74:	430a      	orrs	r2, r1
 8002f76:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f78:	f7fd ffee 	bl	8000f58 <HAL_GetTick>
 8002f7c:	0003      	movs	r3, r0
 8002f7e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f80:	e008      	b.n	8002f94 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f82:	f7fd ffe9 	bl	8000f58 <HAL_GetTick>
 8002f86:	0002      	movs	r2, r0
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e297      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f94:	4b59      	ldr	r3, [pc, #356]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2202      	movs	r2, #2
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	d0f1      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9e:	4b57      	ldr	r3, [pc, #348]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	22f8      	movs	r2, #248	@ 0xf8
 8002fa4:	4393      	bics	r3, r2
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	00da      	lsls	r2, r3, #3
 8002fae:	4b53      	ldr	r3, [pc, #332]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	e018      	b.n	8002fe8 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fb6:	4b51      	ldr	r3, [pc, #324]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4b50      	ldr	r3, [pc, #320]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	438a      	bics	r2, r1
 8002fc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc2:	f7fd ffc9 	bl	8000f58 <HAL_GetTick>
 8002fc6:	0003      	movs	r3, r0
 8002fc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	e008      	b.n	8002fde <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fcc:	f7fd ffc4 	bl	8000f58 <HAL_GetTick>
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e272      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	4b47      	ldr	r3, [pc, #284]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2202      	movs	r2, #2
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d1f1      	bne.n	8002fcc <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2208      	movs	r2, #8
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d036      	beq.n	8003060 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d019      	beq.n	800302e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ffa:	4b40      	ldr	r3, [pc, #256]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8002ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ffe:	4b3f      	ldr	r3, [pc, #252]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8003000:	2101      	movs	r1, #1
 8003002:	430a      	orrs	r2, r1
 8003004:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003006:	f7fd ffa7 	bl	8000f58 <HAL_GetTick>
 800300a:	0003      	movs	r3, r0
 800300c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003010:	f7fd ffa2 	bl	8000f58 <HAL_GetTick>
 8003014:	0002      	movs	r2, r0
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e250      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	4b36      	ldr	r3, [pc, #216]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8003024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003026:	2202      	movs	r2, #2
 8003028:	4013      	ands	r3, r2
 800302a:	d0f1      	beq.n	8003010 <HAL_RCC_OscConfig+0x24c>
 800302c:	e018      	b.n	8003060 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302e:	4b33      	ldr	r3, [pc, #204]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8003030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003032:	4b32      	ldr	r3, [pc, #200]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8003034:	2101      	movs	r1, #1
 8003036:	438a      	bics	r2, r1
 8003038:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800303a:	f7fd ff8d 	bl	8000f58 <HAL_GetTick>
 800303e:	0003      	movs	r3, r0
 8003040:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003044:	f7fd ff88 	bl	8000f58 <HAL_GetTick>
 8003048:	0002      	movs	r2, r0
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e236      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003056:	4b29      	ldr	r3, [pc, #164]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8003058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305a:	2202      	movs	r2, #2
 800305c:	4013      	ands	r3, r2
 800305e:	d1f1      	bne.n	8003044 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2204      	movs	r2, #4
 8003066:	4013      	ands	r3, r2
 8003068:	d100      	bne.n	800306c <HAL_RCC_OscConfig+0x2a8>
 800306a:	e0b5      	b.n	80031d8 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306c:	201f      	movs	r0, #31
 800306e:	183b      	adds	r3, r7, r0
 8003070:	2200      	movs	r2, #0
 8003072:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003074:	4b21      	ldr	r3, [pc, #132]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8003076:	69da      	ldr	r2, [r3, #28]
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	055b      	lsls	r3, r3, #21
 800307c:	4013      	ands	r3, r2
 800307e:	d110      	bne.n	80030a2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	4b1e      	ldr	r3, [pc, #120]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8003082:	69da      	ldr	r2, [r3, #28]
 8003084:	4b1d      	ldr	r3, [pc, #116]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8003086:	2180      	movs	r1, #128	@ 0x80
 8003088:	0549      	lsls	r1, r1, #21
 800308a:	430a      	orrs	r2, r1
 800308c:	61da      	str	r2, [r3, #28]
 800308e:	4b1b      	ldr	r3, [pc, #108]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	2380      	movs	r3, #128	@ 0x80
 8003094:	055b      	lsls	r3, r3, #21
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
 800309a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800309c:	183b      	adds	r3, r7, r0
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a2:	4b19      	ldr	r3, [pc, #100]	@ (8003108 <HAL_RCC_OscConfig+0x344>)
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	2380      	movs	r3, #128	@ 0x80
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4013      	ands	r3, r2
 80030ac:	d11a      	bne.n	80030e4 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ae:	4b16      	ldr	r3, [pc, #88]	@ (8003108 <HAL_RCC_OscConfig+0x344>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <HAL_RCC_OscConfig+0x344>)
 80030b4:	2180      	movs	r1, #128	@ 0x80
 80030b6:	0049      	lsls	r1, r1, #1
 80030b8:	430a      	orrs	r2, r1
 80030ba:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030bc:	f7fd ff4c 	bl	8000f58 <HAL_GetTick>
 80030c0:	0003      	movs	r3, r0
 80030c2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c4:	e008      	b.n	80030d8 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c6:	f7fd ff47 	bl	8000f58 <HAL_GetTick>
 80030ca:	0002      	movs	r2, r0
 80030cc:	69bb      	ldr	r3, [r7, #24]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	2b64      	cmp	r3, #100	@ 0x64
 80030d2:	d901      	bls.n	80030d8 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e1f5      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003108 <HAL_RCC_OscConfig+0x344>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	@ 0x80
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	4013      	ands	r3, r2
 80030e2:	d0f0      	beq.n	80030c6 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d10f      	bne.n	800310c <HAL_RCC_OscConfig+0x348>
 80030ec:	4b03      	ldr	r3, [pc, #12]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 80030ee:	6a1a      	ldr	r2, [r3, #32]
 80030f0:	4b02      	ldr	r3, [pc, #8]	@ (80030fc <HAL_RCC_OscConfig+0x338>)
 80030f2:	2101      	movs	r1, #1
 80030f4:	430a      	orrs	r2, r1
 80030f6:	621a      	str	r2, [r3, #32]
 80030f8:	e036      	b.n	8003168 <HAL_RCC_OscConfig+0x3a4>
 80030fa:	46c0      	nop			@ (mov r8, r8)
 80030fc:	40021000 	.word	0x40021000
 8003100:	fffeffff 	.word	0xfffeffff
 8003104:	fffbffff 	.word	0xfffbffff
 8003108:	40007000 	.word	0x40007000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10c      	bne.n	800312e <HAL_RCC_OscConfig+0x36a>
 8003114:	4bca      	ldr	r3, [pc, #808]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003116:	6a1a      	ldr	r2, [r3, #32]
 8003118:	4bc9      	ldr	r3, [pc, #804]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800311a:	2101      	movs	r1, #1
 800311c:	438a      	bics	r2, r1
 800311e:	621a      	str	r2, [r3, #32]
 8003120:	4bc7      	ldr	r3, [pc, #796]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003122:	6a1a      	ldr	r2, [r3, #32]
 8003124:	4bc6      	ldr	r3, [pc, #792]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003126:	2104      	movs	r1, #4
 8003128:	438a      	bics	r2, r1
 800312a:	621a      	str	r2, [r3, #32]
 800312c:	e01c      	b.n	8003168 <HAL_RCC_OscConfig+0x3a4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b05      	cmp	r3, #5
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x38c>
 8003136:	4bc2      	ldr	r3, [pc, #776]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003138:	6a1a      	ldr	r2, [r3, #32]
 800313a:	4bc1      	ldr	r3, [pc, #772]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800313c:	2104      	movs	r1, #4
 800313e:	430a      	orrs	r2, r1
 8003140:	621a      	str	r2, [r3, #32]
 8003142:	4bbf      	ldr	r3, [pc, #764]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003144:	6a1a      	ldr	r2, [r3, #32]
 8003146:	4bbe      	ldr	r3, [pc, #760]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003148:	2101      	movs	r1, #1
 800314a:	430a      	orrs	r2, r1
 800314c:	621a      	str	r2, [r3, #32]
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0x3a4>
 8003150:	4bbb      	ldr	r3, [pc, #748]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003152:	6a1a      	ldr	r2, [r3, #32]
 8003154:	4bba      	ldr	r3, [pc, #744]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003156:	2101      	movs	r1, #1
 8003158:	438a      	bics	r2, r1
 800315a:	621a      	str	r2, [r3, #32]
 800315c:	4bb8      	ldr	r3, [pc, #736]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800315e:	6a1a      	ldr	r2, [r3, #32]
 8003160:	4bb7      	ldr	r3, [pc, #732]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003162:	2104      	movs	r1, #4
 8003164:	438a      	bics	r2, r1
 8003166:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d014      	beq.n	800319a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003170:	f7fd fef2 	bl	8000f58 <HAL_GetTick>
 8003174:	0003      	movs	r3, r0
 8003176:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003178:	e009      	b.n	800318e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800317a:	f7fd feed 	bl	8000f58 <HAL_GetTick>
 800317e:	0002      	movs	r2, r0
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	4aaf      	ldr	r2, [pc, #700]	@ (8003444 <HAL_RCC_OscConfig+0x680>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d901      	bls.n	800318e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e19a      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318e:	4bac      	ldr	r3, [pc, #688]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	2202      	movs	r2, #2
 8003194:	4013      	ands	r3, r2
 8003196:	d0f0      	beq.n	800317a <HAL_RCC_OscConfig+0x3b6>
 8003198:	e013      	b.n	80031c2 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800319a:	f7fd fedd 	bl	8000f58 <HAL_GetTick>
 800319e:	0003      	movs	r3, r0
 80031a0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a2:	e009      	b.n	80031b8 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031a4:	f7fd fed8 	bl	8000f58 <HAL_GetTick>
 80031a8:	0002      	movs	r2, r0
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	4aa5      	ldr	r2, [pc, #660]	@ (8003444 <HAL_RCC_OscConfig+0x680>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d901      	bls.n	80031b8 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80031b4:	2303      	movs	r3, #3
 80031b6:	e185      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b8:	4ba1      	ldr	r3, [pc, #644]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	2202      	movs	r2, #2
 80031be:	4013      	ands	r3, r2
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80031c2:	231f      	movs	r3, #31
 80031c4:	18fb      	adds	r3, r7, r3
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d105      	bne.n	80031d8 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031cc:	4b9c      	ldr	r3, [pc, #624]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	4b9b      	ldr	r3, [pc, #620]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80031d2:	499d      	ldr	r1, [pc, #628]	@ (8003448 <HAL_RCC_OscConfig+0x684>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2210      	movs	r2, #16
 80031de:	4013      	ands	r3, r2
 80031e0:	d063      	beq.n	80032aa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d12a      	bne.n	8003240 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80031ea:	4b95      	ldr	r3, [pc, #596]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80031ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031ee:	4b94      	ldr	r3, [pc, #592]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80031f0:	2104      	movs	r1, #4
 80031f2:	430a      	orrs	r2, r1
 80031f4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80031f6:	4b92      	ldr	r3, [pc, #584]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80031f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031fa:	4b91      	ldr	r3, [pc, #580]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	430a      	orrs	r2, r1
 8003200:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003202:	f7fd fea9 	bl	8000f58 <HAL_GetTick>
 8003206:	0003      	movs	r3, r0
 8003208:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800320a:	e008      	b.n	800321e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800320c:	f7fd fea4 	bl	8000f58 <HAL_GetTick>
 8003210:	0002      	movs	r2, r0
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d901      	bls.n	800321e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e152      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800321e:	4b88      	ldr	r3, [pc, #544]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003222:	2202      	movs	r2, #2
 8003224:	4013      	ands	r3, r2
 8003226:	d0f1      	beq.n	800320c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003228:	4b85      	ldr	r3, [pc, #532]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800322a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322c:	22f8      	movs	r2, #248	@ 0xf8
 800322e:	4393      	bics	r3, r2
 8003230:	0019      	movs	r1, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	00da      	lsls	r2, r3, #3
 8003238:	4b81      	ldr	r3, [pc, #516]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800323a:	430a      	orrs	r2, r1
 800323c:	635a      	str	r2, [r3, #52]	@ 0x34
 800323e:	e034      	b.n	80032aa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	3305      	adds	r3, #5
 8003246:	d111      	bne.n	800326c <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003248:	4b7d      	ldr	r3, [pc, #500]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800324a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800324c:	4b7c      	ldr	r3, [pc, #496]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800324e:	2104      	movs	r1, #4
 8003250:	438a      	bics	r2, r1
 8003252:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003254:	4b7a      	ldr	r3, [pc, #488]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003258:	22f8      	movs	r2, #248	@ 0xf8
 800325a:	4393      	bics	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	00da      	lsls	r2, r3, #3
 8003264:	4b76      	ldr	r3, [pc, #472]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003266:	430a      	orrs	r2, r1
 8003268:	635a      	str	r2, [r3, #52]	@ 0x34
 800326a:	e01e      	b.n	80032aa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800326c:	4b74      	ldr	r3, [pc, #464]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800326e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003270:	4b73      	ldr	r3, [pc, #460]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003272:	2104      	movs	r1, #4
 8003274:	430a      	orrs	r2, r1
 8003276:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003278:	4b71      	ldr	r3, [pc, #452]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800327a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800327c:	4b70      	ldr	r3, [pc, #448]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800327e:	2101      	movs	r1, #1
 8003280:	438a      	bics	r2, r1
 8003282:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003284:	f7fd fe68 	bl	8000f58 <HAL_GetTick>
 8003288:	0003      	movs	r3, r0
 800328a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800328e:	f7fd fe63 	bl	8000f58 <HAL_GetTick>
 8003292:	0002      	movs	r2, r0
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e111      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80032a0:	4b67      	ldr	r3, [pc, #412]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80032a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032a4:	2202      	movs	r2, #2
 80032a6:	4013      	ands	r3, r2
 80032a8:	d1f1      	bne.n	800328e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2220      	movs	r2, #32
 80032b0:	4013      	ands	r3, r2
 80032b2:	d05c      	beq.n	800336e <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80032b4:	4b62      	ldr	r3, [pc, #392]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	220c      	movs	r2, #12
 80032ba:	4013      	ands	r3, r2
 80032bc:	2b0c      	cmp	r3, #12
 80032be:	d00e      	beq.n	80032de <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80032c0:	4b5f      	ldr	r3, [pc, #380]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	220c      	movs	r2, #12
 80032c6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d114      	bne.n	80032f6 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80032cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	23c0      	movs	r3, #192	@ 0xc0
 80032d2:	025b      	lsls	r3, r3, #9
 80032d4:	401a      	ands	r2, r3
 80032d6:	23c0      	movs	r3, #192	@ 0xc0
 80032d8:	025b      	lsls	r3, r3, #9
 80032da:	429a      	cmp	r2, r3
 80032dc:	d10b      	bne.n	80032f6 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80032de:	4b58      	ldr	r3, [pc, #352]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80032e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032e2:	2380      	movs	r3, #128	@ 0x80
 80032e4:	029b      	lsls	r3, r3, #10
 80032e6:	4013      	ands	r3, r2
 80032e8:	d040      	beq.n	800336c <HAL_RCC_OscConfig+0x5a8>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a1b      	ldr	r3, [r3, #32]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d03c      	beq.n	800336c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e0e6      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01b      	beq.n	8003336 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80032fe:	4b50      	ldr	r3, [pc, #320]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003300:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003302:	4b4f      	ldr	r3, [pc, #316]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003304:	2180      	movs	r1, #128	@ 0x80
 8003306:	0249      	lsls	r1, r1, #9
 8003308:	430a      	orrs	r2, r1
 800330a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800330c:	f7fd fe24 	bl	8000f58 <HAL_GetTick>
 8003310:	0003      	movs	r3, r0
 8003312:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003316:	f7fd fe1f 	bl	8000f58 <HAL_GetTick>
 800331a:	0002      	movs	r2, r0
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e0cd      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003328:	4b45      	ldr	r3, [pc, #276]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800332a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800332c:	2380      	movs	r3, #128	@ 0x80
 800332e:	029b      	lsls	r3, r3, #10
 8003330:	4013      	ands	r3, r2
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x552>
 8003334:	e01b      	b.n	800336e <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003336:	4b42      	ldr	r3, [pc, #264]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003338:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800333a:	4b41      	ldr	r3, [pc, #260]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800333c:	4943      	ldr	r1, [pc, #268]	@ (800344c <HAL_RCC_OscConfig+0x688>)
 800333e:	400a      	ands	r2, r1
 8003340:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7fd fe09 	bl	8000f58 <HAL_GetTick>
 8003346:	0003      	movs	r3, r0
 8003348:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800334c:	f7fd fe04 	bl	8000f58 <HAL_GetTick>
 8003350:	0002      	movs	r2, r0
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e0b2      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800335e:	4b38      	ldr	r3, [pc, #224]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003360:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003362:	2380      	movs	r3, #128	@ 0x80
 8003364:	029b      	lsls	r3, r3, #10
 8003366:	4013      	ands	r3, r2
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x588>
 800336a:	e000      	b.n	800336e <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800336c:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d100      	bne.n	8003378 <HAL_RCC_OscConfig+0x5b4>
 8003376:	e0a4      	b.n	80034c2 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003378:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	220c      	movs	r2, #12
 800337e:	4013      	ands	r3, r2
 8003380:	2b08      	cmp	r3, #8
 8003382:	d100      	bne.n	8003386 <HAL_RCC_OscConfig+0x5c2>
 8003384:	e078      	b.n	8003478 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	2b02      	cmp	r3, #2
 800338c:	d14c      	bne.n	8003428 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800338e:	4b2c      	ldr	r3, [pc, #176]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	4b2b      	ldr	r3, [pc, #172]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 8003394:	492e      	ldr	r1, [pc, #184]	@ (8003450 <HAL_RCC_OscConfig+0x68c>)
 8003396:	400a      	ands	r2, r1
 8003398:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fd fddd 	bl	8000f58 <HAL_GetTick>
 800339e:	0003      	movs	r3, r0
 80033a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a4:	f7fd fdd8 	bl	8000f58 <HAL_GetTick>
 80033a8:	0002      	movs	r2, r0
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e086      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b6:	4b22      	ldr	r3, [pc, #136]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	2380      	movs	r3, #128	@ 0x80
 80033bc:	049b      	lsls	r3, r3, #18
 80033be:	4013      	ands	r3, r2
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033c2:	4b1f      	ldr	r3, [pc, #124]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c6:	220f      	movs	r2, #15
 80033c8:	4393      	bics	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80033d2:	430a      	orrs	r2, r1
 80033d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80033d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	4a1e      	ldr	r2, [pc, #120]	@ (8003454 <HAL_RCC_OscConfig+0x690>)
 80033dc:	4013      	ands	r3, r2
 80033de:	0019      	movs	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e8:	431a      	orrs	r2, r3
 80033ea:	4b15      	ldr	r3, [pc, #84]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80033ec:	430a      	orrs	r2, r1
 80033ee:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f0:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4b12      	ldr	r3, [pc, #72]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 80033f6:	2180      	movs	r1, #128	@ 0x80
 80033f8:	0449      	lsls	r1, r1, #17
 80033fa:	430a      	orrs	r2, r1
 80033fc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fd fdab 	bl	8000f58 <HAL_GetTick>
 8003402:	0003      	movs	r3, r0
 8003404:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003408:	f7fd fda6 	bl	8000f58 <HAL_GetTick>
 800340c:	0002      	movs	r2, r0
 800340e:	69bb      	ldr	r3, [r7, #24]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e054      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800341a:	4b09      	ldr	r3, [pc, #36]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	2380      	movs	r3, #128	@ 0x80
 8003420:	049b      	lsls	r3, r3, #18
 8003422:	4013      	ands	r3, r2
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x644>
 8003426:	e04c      	b.n	80034c2 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003428:	4b05      	ldr	r3, [pc, #20]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b04      	ldr	r3, [pc, #16]	@ (8003440 <HAL_RCC_OscConfig+0x67c>)
 800342e:	4908      	ldr	r1, [pc, #32]	@ (8003450 <HAL_RCC_OscConfig+0x68c>)
 8003430:	400a      	ands	r2, r1
 8003432:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fd fd90 	bl	8000f58 <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800343c:	e015      	b.n	800346a <HAL_RCC_OscConfig+0x6a6>
 800343e:	46c0      	nop			@ (mov r8, r8)
 8003440:	40021000 	.word	0x40021000
 8003444:	00001388 	.word	0x00001388
 8003448:	efffffff 	.word	0xefffffff
 800344c:	fffeffff 	.word	0xfffeffff
 8003450:	feffffff 	.word	0xfeffffff
 8003454:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003458:	f7fd fd7e 	bl	8000f58 <HAL_GetTick>
 800345c:	0002      	movs	r2, r0
 800345e:	69bb      	ldr	r3, [r7, #24]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e02c      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346a:	4b18      	ldr	r3, [pc, #96]	@ (80034cc <HAL_RCC_OscConfig+0x708>)
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	2380      	movs	r3, #128	@ 0x80
 8003470:	049b      	lsls	r3, r3, #18
 8003472:	4013      	ands	r3, r2
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x694>
 8003476:	e024      	b.n	80034c2 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e01f      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003484:	4b11      	ldr	r3, [pc, #68]	@ (80034cc <HAL_RCC_OscConfig+0x708>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800348a:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <HAL_RCC_OscConfig+0x708>)
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	23c0      	movs	r3, #192	@ 0xc0
 8003494:	025b      	lsls	r3, r3, #9
 8003496:	401a      	ands	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800349c:	429a      	cmp	r2, r3
 800349e:	d10e      	bne.n	80034be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	220f      	movs	r2, #15
 80034a4:	401a      	ands	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d107      	bne.n	80034be <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	23f0      	movs	r3, #240	@ 0xf0
 80034b2:	039b      	lsls	r3, r3, #14
 80034b4:	401a      	ands	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d001      	beq.n	80034c2 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	0018      	movs	r0, r3
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b008      	add	sp, #32
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000

080034d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0bf      	b.n	8003664 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b61      	ldr	r3, [pc, #388]	@ (800366c <HAL_RCC_ClockConfig+0x19c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2201      	movs	r2, #1
 80034ea:	4013      	ands	r3, r2
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d911      	bls.n	8003516 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b5e      	ldr	r3, [pc, #376]	@ (800366c <HAL_RCC_ClockConfig+0x19c>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2201      	movs	r2, #1
 80034f8:	4393      	bics	r3, r2
 80034fa:	0019      	movs	r1, r3
 80034fc:	4b5b      	ldr	r3, [pc, #364]	@ (800366c <HAL_RCC_ClockConfig+0x19c>)
 80034fe:	683a      	ldr	r2, [r7, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003504:	4b59      	ldr	r3, [pc, #356]	@ (800366c <HAL_RCC_ClockConfig+0x19c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2201      	movs	r2, #1
 800350a:	4013      	ands	r3, r2
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0a6      	b.n	8003664 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2202      	movs	r2, #2
 800351c:	4013      	ands	r3, r2
 800351e:	d015      	beq.n	800354c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2204      	movs	r2, #4
 8003526:	4013      	ands	r3, r2
 8003528:	d006      	beq.n	8003538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800352a:	4b51      	ldr	r3, [pc, #324]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4b50      	ldr	r3, [pc, #320]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 8003530:	21e0      	movs	r1, #224	@ 0xe0
 8003532:	00c9      	lsls	r1, r1, #3
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003538:	4b4d      	ldr	r3, [pc, #308]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	22f0      	movs	r2, #240	@ 0xf0
 800353e:	4393      	bics	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	4b4a      	ldr	r3, [pc, #296]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2201      	movs	r2, #1
 8003552:	4013      	ands	r3, r2
 8003554:	d04c      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800355e:	4b44      	ldr	r3, [pc, #272]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	2380      	movs	r3, #128	@ 0x80
 8003564:	029b      	lsls	r3, r3, #10
 8003566:	4013      	ands	r3, r2
 8003568:	d120      	bne.n	80035ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e07a      	b.n	8003664 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003576:	4b3e      	ldr	r3, [pc, #248]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	@ 0x80
 800357c:	049b      	lsls	r3, r3, #18
 800357e:	4013      	ands	r3, r2
 8003580:	d114      	bne.n	80035ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e06e      	b.n	8003664 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800358e:	4b38      	ldr	r3, [pc, #224]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 8003590:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003592:	2380      	movs	r3, #128	@ 0x80
 8003594:	029b      	lsls	r3, r3, #10
 8003596:	4013      	ands	r3, r2
 8003598:	d108      	bne.n	80035ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e062      	b.n	8003664 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b34      	ldr	r3, [pc, #208]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2202      	movs	r2, #2
 80035a4:	4013      	ands	r3, r2
 80035a6:	d101      	bne.n	80035ac <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e05b      	b.n	8003664 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ac:	4b30      	ldr	r3, [pc, #192]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2203      	movs	r2, #3
 80035b2:	4393      	bics	r3, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685a      	ldr	r2, [r3, #4]
 80035ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 80035bc:	430a      	orrs	r2, r1
 80035be:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035c0:	f7fd fcca 	bl	8000f58 <HAL_GetTick>
 80035c4:	0003      	movs	r3, r0
 80035c6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c8:	e009      	b.n	80035de <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ca:	f7fd fcc5 	bl	8000f58 <HAL_GetTick>
 80035ce:	0002      	movs	r2, r0
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	4a27      	ldr	r2, [pc, #156]	@ (8003674 <HAL_RCC_ClockConfig+0x1a4>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e042      	b.n	8003664 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b24      	ldr	r3, [pc, #144]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	220c      	movs	r2, #12
 80035e4:	401a      	ands	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1ec      	bne.n	80035ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b1e      	ldr	r3, [pc, #120]	@ (800366c <HAL_RCC_ClockConfig+0x19c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2201      	movs	r2, #1
 80035f6:	4013      	ands	r3, r2
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d211      	bcs.n	8003622 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b1b      	ldr	r3, [pc, #108]	@ (800366c <HAL_RCC_ClockConfig+0x19c>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2201      	movs	r2, #1
 8003604:	4393      	bics	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	4b18      	ldr	r3, [pc, #96]	@ (800366c <HAL_RCC_ClockConfig+0x19c>)
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003610:	4b16      	ldr	r3, [pc, #88]	@ (800366c <HAL_RCC_ClockConfig+0x19c>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	4013      	ands	r3, r2
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d001      	beq.n	8003622 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e020      	b.n	8003664 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2204      	movs	r2, #4
 8003628:	4013      	ands	r3, r2
 800362a:	d009      	beq.n	8003640 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b10      	ldr	r3, [pc, #64]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a11      	ldr	r2, [pc, #68]	@ (8003678 <HAL_RCC_ClockConfig+0x1a8>)
 8003632:	4013      	ands	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	4b0d      	ldr	r3, [pc, #52]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003640:	f000 f820 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8003644:	0001      	movs	r1, r0
 8003646:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <HAL_RCC_ClockConfig+0x1a0>)
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	091b      	lsrs	r3, r3, #4
 800364c:	220f      	movs	r2, #15
 800364e:	4013      	ands	r3, r2
 8003650:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <HAL_RCC_ClockConfig+0x1ac>)
 8003652:	5cd3      	ldrb	r3, [r2, r3]
 8003654:	000a      	movs	r2, r1
 8003656:	40da      	lsrs	r2, r3
 8003658:	4b09      	ldr	r3, [pc, #36]	@ (8003680 <HAL_RCC_ClockConfig+0x1b0>)
 800365a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800365c:	2003      	movs	r0, #3
 800365e:	f7fd fc35 	bl	8000ecc <HAL_InitTick>
  
  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	0018      	movs	r0, r3
 8003666:	46bd      	mov	sp, r7
 8003668:	b004      	add	sp, #16
 800366a:	bd80      	pop	{r7, pc}
 800366c:	40022000 	.word	0x40022000
 8003670:	40021000 	.word	0x40021000
 8003674:	00001388 	.word	0x00001388
 8003678:	fffff8ff 	.word	0xfffff8ff
 800367c:	0800871c 	.word	0x0800871c
 8003680:	200000c0 	.word	0x200000c0

08003684 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	2300      	movs	r3, #0
 8003690:	60bb      	str	r3, [r7, #8]
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	2300      	movs	r3, #0
 8003698:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800369a:	2300      	movs	r3, #0
 800369c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800369e:	4b2d      	ldr	r3, [pc, #180]	@ (8003754 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	220c      	movs	r2, #12
 80036a8:	4013      	ands	r3, r2
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d046      	beq.n	800373c <HAL_RCC_GetSysClockFreq+0xb8>
 80036ae:	d848      	bhi.n	8003742 <HAL_RCC_GetSysClockFreq+0xbe>
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d002      	beq.n	80036ba <HAL_RCC_GetSysClockFreq+0x36>
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	d003      	beq.n	80036c0 <HAL_RCC_GetSysClockFreq+0x3c>
 80036b8:	e043      	b.n	8003742 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036ba:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <HAL_RCC_GetSysClockFreq+0xd4>)
 80036bc:	613b      	str	r3, [r7, #16]
      break;
 80036be:	e043      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	0c9b      	lsrs	r3, r3, #18
 80036c4:	220f      	movs	r2, #15
 80036c6:	4013      	ands	r3, r2
 80036c8:	4a24      	ldr	r2, [pc, #144]	@ (800375c <HAL_RCC_GetSysClockFreq+0xd8>)
 80036ca:	5cd3      	ldrb	r3, [r2, r3]
 80036cc:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80036ce:	4b21      	ldr	r3, [pc, #132]	@ (8003754 <HAL_RCC_GetSysClockFreq+0xd0>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	220f      	movs	r2, #15
 80036d4:	4013      	ands	r3, r2
 80036d6:	4a22      	ldr	r2, [pc, #136]	@ (8003760 <HAL_RCC_GetSysClockFreq+0xdc>)
 80036d8:	5cd3      	ldrb	r3, [r2, r3]
 80036da:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	23c0      	movs	r3, #192	@ 0xc0
 80036e0:	025b      	lsls	r3, r3, #9
 80036e2:	401a      	ands	r2, r3
 80036e4:	2380      	movs	r3, #128	@ 0x80
 80036e6:	025b      	lsls	r3, r3, #9
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d109      	bne.n	8003700 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	481a      	ldr	r0, [pc, #104]	@ (8003758 <HAL_RCC_GetSysClockFreq+0xd4>)
 80036f0:	f7fc fd0a 	bl	8000108 <__udivsi3>
 80036f4:	0003      	movs	r3, r0
 80036f6:	001a      	movs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4353      	muls	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	e01a      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	23c0      	movs	r3, #192	@ 0xc0
 8003704:	025b      	lsls	r3, r3, #9
 8003706:	401a      	ands	r2, r3
 8003708:	23c0      	movs	r3, #192	@ 0xc0
 800370a:	025b      	lsls	r3, r3, #9
 800370c:	429a      	cmp	r2, r3
 800370e:	d109      	bne.n	8003724 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003710:	68b9      	ldr	r1, [r7, #8]
 8003712:	4814      	ldr	r0, [pc, #80]	@ (8003764 <HAL_RCC_GetSysClockFreq+0xe0>)
 8003714:	f7fc fcf8 	bl	8000108 <__udivsi3>
 8003718:	0003      	movs	r3, r0
 800371a:	001a      	movs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4353      	muls	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
 8003722:	e008      	b.n	8003736 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003724:	68b9      	ldr	r1, [r7, #8]
 8003726:	480c      	ldr	r0, [pc, #48]	@ (8003758 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003728:	f7fc fcee 	bl	8000108 <__udivsi3>
 800372c:	0003      	movs	r3, r0
 800372e:	001a      	movs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4353      	muls	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	613b      	str	r3, [r7, #16]
      break;
 800373a:	e005      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800373c:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <HAL_RCC_GetSysClockFreq+0xe0>)
 800373e:	613b      	str	r3, [r7, #16]
      break;
 8003740:	e002      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003742:	4b05      	ldr	r3, [pc, #20]	@ (8003758 <HAL_RCC_GetSysClockFreq+0xd4>)
 8003744:	613b      	str	r3, [r7, #16]
      break;
 8003746:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003748:	693b      	ldr	r3, [r7, #16]
}
 800374a:	0018      	movs	r0, r3
 800374c:	46bd      	mov	sp, r7
 800374e:	b006      	add	sp, #24
 8003750:	bd80      	pop	{r7, pc}
 8003752:	46c0      	nop			@ (mov r8, r8)
 8003754:	40021000 	.word	0x40021000
 8003758:	007a1200 	.word	0x007a1200
 800375c:	0800872c 	.word	0x0800872c
 8003760:	0800873c 	.word	0x0800873c
 8003764:	02dc6c00 	.word	0x02dc6c00

08003768 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	2380      	movs	r3, #128	@ 0x80
 800377e:	025b      	lsls	r3, r3, #9
 8003780:	4013      	ands	r3, r2
 8003782:	d100      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003784:	e08e      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003786:	2017      	movs	r0, #23
 8003788:	183b      	adds	r3, r7, r0
 800378a:	2200      	movs	r2, #0
 800378c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800378e:	4b6e      	ldr	r3, [pc, #440]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	2380      	movs	r3, #128	@ 0x80
 8003794:	055b      	lsls	r3, r3, #21
 8003796:	4013      	ands	r3, r2
 8003798:	d110      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	4b6b      	ldr	r3, [pc, #428]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800379c:	69da      	ldr	r2, [r3, #28]
 800379e:	4b6a      	ldr	r3, [pc, #424]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037a0:	2180      	movs	r1, #128	@ 0x80
 80037a2:	0549      	lsls	r1, r1, #21
 80037a4:	430a      	orrs	r2, r1
 80037a6:	61da      	str	r2, [r3, #28]
 80037a8:	4b67      	ldr	r3, [pc, #412]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	2380      	movs	r3, #128	@ 0x80
 80037ae:	055b      	lsls	r3, r3, #21
 80037b0:	4013      	ands	r3, r2
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037b6:	183b      	adds	r3, r7, r0
 80037b8:	2201      	movs	r2, #1
 80037ba:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037bc:	4b63      	ldr	r3, [pc, #396]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	2380      	movs	r3, #128	@ 0x80
 80037c2:	005b      	lsls	r3, r3, #1
 80037c4:	4013      	ands	r3, r2
 80037c6:	d11a      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037c8:	4b60      	ldr	r3, [pc, #384]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	4b5f      	ldr	r3, [pc, #380]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037ce:	2180      	movs	r1, #128	@ 0x80
 80037d0:	0049      	lsls	r1, r1, #1
 80037d2:	430a      	orrs	r2, r1
 80037d4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d6:	f7fd fbbf 	bl	8000f58 <HAL_GetTick>
 80037da:	0003      	movs	r3, r0
 80037dc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037de:	e008      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e0:	f7fd fbba 	bl	8000f58 <HAL_GetTick>
 80037e4:	0002      	movs	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b64      	cmp	r3, #100	@ 0x64
 80037ec:	d901      	bls.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e0a6      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f2:	4b56      	ldr	r3, [pc, #344]	@ (800394c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	2380      	movs	r3, #128	@ 0x80
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	4013      	ands	r3, r2
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037fe:	4b52      	ldr	r3, [pc, #328]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003800:	6a1a      	ldr	r2, [r3, #32]
 8003802:	23c0      	movs	r3, #192	@ 0xc0
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4013      	ands	r3, r2
 8003808:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d034      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	23c0      	movs	r3, #192	@ 0xc0
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4013      	ands	r3, r2
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	429a      	cmp	r2, r3
 800381e:	d02c      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003820:	4b49      	ldr	r3, [pc, #292]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	4a4a      	ldr	r2, [pc, #296]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003826:	4013      	ands	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800382a:	4b47      	ldr	r3, [pc, #284]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	4b46      	ldr	r3, [pc, #280]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003830:	2180      	movs	r1, #128	@ 0x80
 8003832:	0249      	lsls	r1, r1, #9
 8003834:	430a      	orrs	r2, r1
 8003836:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003838:	4b43      	ldr	r3, [pc, #268]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800383a:	6a1a      	ldr	r2, [r3, #32]
 800383c:	4b42      	ldr	r3, [pc, #264]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800383e:	4945      	ldr	r1, [pc, #276]	@ (8003954 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003840:	400a      	ands	r2, r1
 8003842:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003844:	4b40      	ldr	r3, [pc, #256]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2201      	movs	r2, #1
 800384e:	4013      	ands	r3, r2
 8003850:	d013      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fd fb81 	bl	8000f58 <HAL_GetTick>
 8003856:	0003      	movs	r3, r0
 8003858:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385a:	e009      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fd fb7c 	bl	8000f58 <HAL_GetTick>
 8003860:	0002      	movs	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	4a3c      	ldr	r2, [pc, #240]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e067      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003870:	4b35      	ldr	r3, [pc, #212]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	2202      	movs	r2, #2
 8003876:	4013      	ands	r3, r2
 8003878:	d0f0      	beq.n	800385c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800387a:	4b33      	ldr	r3, [pc, #204]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a34      	ldr	r2, [pc, #208]	@ (8003950 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003880:	4013      	ands	r3, r2
 8003882:	0019      	movs	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	4b2f      	ldr	r3, [pc, #188]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800388a:	430a      	orrs	r2, r1
 800388c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800388e:	2317      	movs	r3, #23
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003898:	4b2b      	ldr	r3, [pc, #172]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800389a:	69da      	ldr	r2, [r3, #28]
 800389c:	4b2a      	ldr	r3, [pc, #168]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800389e:	492f      	ldr	r1, [pc, #188]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80038a0:	400a      	ands	r2, r1
 80038a2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2201      	movs	r2, #1
 80038aa:	4013      	ands	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038ae:	4b26      	ldr	r3, [pc, #152]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b2:	2203      	movs	r2, #3
 80038b4:	4393      	bics	r3, r2
 80038b6:	0019      	movs	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689a      	ldr	r2, [r3, #8]
 80038bc:	4b22      	ldr	r3, [pc, #136]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038be:	430a      	orrs	r2, r1
 80038c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2202      	movs	r2, #2
 80038c8:	4013      	ands	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d0:	4a23      	ldr	r2, [pc, #140]	@ (8003960 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68da      	ldr	r2, [r3, #12]
 80038da:	4b1b      	ldr	r3, [pc, #108]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038dc:	430a      	orrs	r2, r1
 80038de:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2220      	movs	r2, #32
 80038e6:	4013      	ands	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ea:	4b17      	ldr	r3, [pc, #92]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	2210      	movs	r2, #16
 80038f0:	4393      	bics	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	4b13      	ldr	r3, [pc, #76]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	2380      	movs	r3, #128	@ 0x80
 8003904:	029b      	lsls	r3, r3, #10
 8003906:	4013      	ands	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800390a:	4b0f      	ldr	r3, [pc, #60]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800390c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	4393      	bics	r3, r2
 8003912:	0019      	movs	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	4b0b      	ldr	r3, [pc, #44]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800391a:	430a      	orrs	r2, r1
 800391c:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	2380      	movs	r3, #128	@ 0x80
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	4013      	ands	r3, r2
 8003928:	d009      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800392a:	4b07      	ldr	r3, [pc, #28]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800392c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800392e:	2240      	movs	r2, #64	@ 0x40
 8003930:	4393      	bics	r3, r2
 8003932:	0019      	movs	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	695a      	ldr	r2, [r3, #20]
 8003938:	4b03      	ldr	r3, [pc, #12]	@ (8003948 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800393a:	430a      	orrs	r2, r1
 800393c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b006      	add	sp, #24
 8003946:	bd80      	pop	{r7, pc}
 8003948:	40021000 	.word	0x40021000
 800394c:	40007000 	.word	0x40007000
 8003950:	fffffcff 	.word	0xfffffcff
 8003954:	fffeffff 	.word	0xfffeffff
 8003958:	00001388 	.word	0x00001388
 800395c:	efffffff 	.word	0xefffffff
 8003960:	fffcffff 	.word	0xfffcffff

08003964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e042      	b.n	80039fc <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	223d      	movs	r2, #61	@ 0x3d
 800397a:	5c9b      	ldrb	r3, [r3, r2]
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d107      	bne.n	8003992 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	223c      	movs	r2, #60	@ 0x3c
 8003986:	2100      	movs	r1, #0
 8003988:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	0018      	movs	r0, r3
 800398e:	f7fd f9eb 	bl	8000d68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	223d      	movs	r2, #61	@ 0x3d
 8003996:	2102      	movs	r1, #2
 8003998:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	0019      	movs	r1, r3
 80039a4:	0010      	movs	r0, r2
 80039a6:	f000 fa61 	bl	8003e6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2246      	movs	r2, #70	@ 0x46
 80039ae:	2101      	movs	r1, #1
 80039b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	223e      	movs	r2, #62	@ 0x3e
 80039b6:	2101      	movs	r1, #1
 80039b8:	5499      	strb	r1, [r3, r2]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	223f      	movs	r2, #63	@ 0x3f
 80039be:	2101      	movs	r1, #1
 80039c0:	5499      	strb	r1, [r3, r2]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2240      	movs	r2, #64	@ 0x40
 80039c6:	2101      	movs	r1, #1
 80039c8:	5499      	strb	r1, [r3, r2]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2241      	movs	r2, #65	@ 0x41
 80039ce:	2101      	movs	r1, #1
 80039d0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2242      	movs	r2, #66	@ 0x42
 80039d6:	2101      	movs	r1, #1
 80039d8:	5499      	strb	r1, [r3, r2]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2243      	movs	r2, #67	@ 0x43
 80039de:	2101      	movs	r1, #1
 80039e0:	5499      	strb	r1, [r3, r2]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2244      	movs	r2, #68	@ 0x44
 80039e6:	2101      	movs	r1, #1
 80039e8:	5499      	strb	r1, [r3, r2]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2245      	movs	r2, #69	@ 0x45
 80039ee:	2101      	movs	r1, #1
 80039f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	223d      	movs	r2, #61	@ 0x3d
 80039f6:	2101      	movs	r1, #1
 80039f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	0018      	movs	r0, r3
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b002      	add	sp, #8
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	223d      	movs	r2, #61	@ 0x3d
 8003a10:	5c9b      	ldrb	r3, [r3, r2]
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d001      	beq.n	8003a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e03b      	b.n	8003a94 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	223d      	movs	r2, #61	@ 0x3d
 8003a20:	2102      	movs	r1, #2
 8003a22:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	68da      	ldr	r2, [r3, #12]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	430a      	orrs	r2, r1
 8003a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a18      	ldr	r2, [pc, #96]	@ (8003a9c <HAL_TIM_Base_Start_IT+0x98>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d00f      	beq.n	8003a5e <HAL_TIM_Base_Start_IT+0x5a>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	2380      	movs	r3, #128	@ 0x80
 8003a44:	05db      	lsls	r3, r3, #23
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d009      	beq.n	8003a5e <HAL_TIM_Base_Start_IT+0x5a>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a14      	ldr	r2, [pc, #80]	@ (8003aa0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d004      	beq.n	8003a5e <HAL_TIM_Base_Start_IT+0x5a>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a12      	ldr	r2, [pc, #72]	@ (8003aa4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d111      	bne.n	8003a82 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	2207      	movs	r2, #7
 8003a66:	4013      	ands	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d010      	beq.n	8003a92 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a80:	e007      	b.n	8003a92 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	430a      	orrs	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	0018      	movs	r0, r3
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b004      	add	sp, #16
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	40012c00 	.word	0x40012c00
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40014000 	.word	0x40014000

08003aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b084      	sub	sp, #16
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	d021      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2202      	movs	r2, #2
 8003acc:	4013      	ands	r3, r2
 8003ace:	d01d      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2203      	movs	r2, #3
 8003ad6:	4252      	negs	r2, r2
 8003ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	2203      	movs	r2, #3
 8003ae8:	4013      	ands	r3, r2
 8003aea:	d004      	beq.n	8003af6 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f9a4 	bl	8003e3c <HAL_TIM_IC_CaptureCallback>
 8003af4:	e007      	b.n	8003b06 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	0018      	movs	r0, r3
 8003afa:	f000 f997 	bl	8003e2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	0018      	movs	r0, r3
 8003b02:	f000 f9a3 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	2204      	movs	r2, #4
 8003b10:	4013      	ands	r3, r2
 8003b12:	d022      	beq.n	8003b5a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2204      	movs	r2, #4
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d01e      	beq.n	8003b5a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2205      	movs	r2, #5
 8003b22:	4252      	negs	r2, r2
 8003b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2202      	movs	r2, #2
 8003b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699a      	ldr	r2, [r3, #24]
 8003b32:	23c0      	movs	r3, #192	@ 0xc0
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4013      	ands	r3, r2
 8003b38:	d004      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0018      	movs	r0, r3
 8003b3e:	f000 f97d 	bl	8003e3c <HAL_TIM_IC_CaptureCallback>
 8003b42:	e007      	b.n	8003b54 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	0018      	movs	r0, r3
 8003b48:	f000 f970 	bl	8003e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 f97c 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	2208      	movs	r2, #8
 8003b5e:	4013      	ands	r3, r2
 8003b60:	d021      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2208      	movs	r2, #8
 8003b66:	4013      	ands	r3, r2
 8003b68:	d01d      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2209      	movs	r2, #9
 8003b70:	4252      	negs	r2, r2
 8003b72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2204      	movs	r2, #4
 8003b78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	2203      	movs	r2, #3
 8003b82:	4013      	ands	r3, r2
 8003b84:	d004      	beq.n	8003b90 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	0018      	movs	r0, r3
 8003b8a:	f000 f957 	bl	8003e3c <HAL_TIM_IC_CaptureCallback>
 8003b8e:	e007      	b.n	8003ba0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	0018      	movs	r0, r3
 8003b94:	f000 f94a 	bl	8003e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	0018      	movs	r0, r3
 8003b9c:	f000 f956 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	4013      	ands	r3, r2
 8003bac:	d022      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2210      	movs	r2, #16
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d01e      	beq.n	8003bf4 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2211      	movs	r2, #17
 8003bbc:	4252      	negs	r2, r2
 8003bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2208      	movs	r2, #8
 8003bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69da      	ldr	r2, [r3, #28]
 8003bcc:	23c0      	movs	r3, #192	@ 0xc0
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	d004      	beq.n	8003bde <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f000 f930 	bl	8003e3c <HAL_TIM_IC_CaptureCallback>
 8003bdc:	e007      	b.n	8003bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	0018      	movs	r0, r3
 8003be2:	f000 f923 	bl	8003e2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	0018      	movs	r0, r3
 8003bea:	f000 f92f 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	d00c      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	d008      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2202      	movs	r2, #2
 8003c0a:	4252      	negs	r2, r2
 8003c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0018      	movs	r0, r3
 8003c12:	f7fd f86b 	bl	8000cec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2280      	movs	r2, #128	@ 0x80
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d00c      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2280      	movs	r2, #128	@ 0x80
 8003c22:	4013      	ands	r3, r2
 8003c24:	d008      	beq.n	8003c38 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2281      	movs	r2, #129	@ 0x81
 8003c2c:	4252      	negs	r2, r2
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 faa8 	bl	8004188 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	2240      	movs	r2, #64	@ 0x40
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d00c      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2240      	movs	r2, #64	@ 0x40
 8003c44:	4013      	ands	r3, r2
 8003c46:	d008      	beq.n	8003c5a <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2241      	movs	r2, #65	@ 0x41
 8003c4e:	4252      	negs	r2, r2
 8003c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	0018      	movs	r0, r3
 8003c56:	f000 f901 	bl	8003e5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2220      	movs	r2, #32
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d00c      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2220      	movs	r2, #32
 8003c66:	4013      	ands	r3, r2
 8003c68:	d008      	beq.n	8003c7c <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2221      	movs	r2, #33	@ 0x21
 8003c70:	4252      	negs	r2, r2
 8003c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f000 fa7e 	bl	8004178 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c7c:	46c0      	nop			@ (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b004      	add	sp, #16
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c8e:	230f      	movs	r3, #15
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	223c      	movs	r2, #60	@ 0x3c
 8003c9a:	5c9b      	ldrb	r3, [r3, r2]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_TIM_ConfigClockSource+0x20>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e0bc      	b.n	8003e1e <HAL_TIM_ConfigClockSource+0x19a>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	223c      	movs	r2, #60	@ 0x3c
 8003ca8:	2101      	movs	r1, #1
 8003caa:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	223d      	movs	r2, #61	@ 0x3d
 8003cb0:	2102      	movs	r1, #2
 8003cb2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2277      	movs	r2, #119	@ 0x77
 8003cc0:	4393      	bics	r3, r2
 8003cc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4a58      	ldr	r2, [pc, #352]	@ (8003e28 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2280      	movs	r2, #128	@ 0x80
 8003cda:	0192      	lsls	r2, r2, #6
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d040      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0xde>
 8003ce0:	2280      	movs	r2, #128	@ 0x80
 8003ce2:	0192      	lsls	r2, r2, #6
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d900      	bls.n	8003cea <HAL_TIM_ConfigClockSource+0x66>
 8003ce8:	e088      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x178>
 8003cea:	2280      	movs	r2, #128	@ 0x80
 8003cec:	0152      	lsls	r2, r2, #5
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d100      	bne.n	8003cf4 <HAL_TIM_ConfigClockSource+0x70>
 8003cf2:	e088      	b.n	8003e06 <HAL_TIM_ConfigClockSource+0x182>
 8003cf4:	2280      	movs	r2, #128	@ 0x80
 8003cf6:	0152      	lsls	r2, r2, #5
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d900      	bls.n	8003cfe <HAL_TIM_ConfigClockSource+0x7a>
 8003cfc:	e07e      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x178>
 8003cfe:	2b70      	cmp	r3, #112	@ 0x70
 8003d00:	d018      	beq.n	8003d34 <HAL_TIM_ConfigClockSource+0xb0>
 8003d02:	d900      	bls.n	8003d06 <HAL_TIM_ConfigClockSource+0x82>
 8003d04:	e07a      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x178>
 8003d06:	2b60      	cmp	r3, #96	@ 0x60
 8003d08:	d04f      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x126>
 8003d0a:	d900      	bls.n	8003d0e <HAL_TIM_ConfigClockSource+0x8a>
 8003d0c:	e076      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x178>
 8003d0e:	2b50      	cmp	r3, #80	@ 0x50
 8003d10:	d03b      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x106>
 8003d12:	d900      	bls.n	8003d16 <HAL_TIM_ConfigClockSource+0x92>
 8003d14:	e072      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x178>
 8003d16:	2b40      	cmp	r3, #64	@ 0x40
 8003d18:	d057      	beq.n	8003dca <HAL_TIM_ConfigClockSource+0x146>
 8003d1a:	d900      	bls.n	8003d1e <HAL_TIM_ConfigClockSource+0x9a>
 8003d1c:	e06e      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x178>
 8003d1e:	2b30      	cmp	r3, #48	@ 0x30
 8003d20:	d063      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x166>
 8003d22:	d86b      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x178>
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	d060      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x166>
 8003d28:	d868      	bhi.n	8003dfc <HAL_TIM_ConfigClockSource+0x178>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d05d      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x166>
 8003d2e:	2b10      	cmp	r3, #16
 8003d30:	d05b      	beq.n	8003dea <HAL_TIM_ConfigClockSource+0x166>
 8003d32:	e063      	b.n	8003dfc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d44:	f000 f99a 	bl	800407c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2277      	movs	r2, #119	@ 0x77
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68ba      	ldr	r2, [r7, #8]
 8003d5e:	609a      	str	r2, [r3, #8]
      break;
 8003d60:	e052      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d72:	f000 f983 	bl	800407c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	689a      	ldr	r2, [r3, #8]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2180      	movs	r1, #128	@ 0x80
 8003d82:	01c9      	lsls	r1, r1, #7
 8003d84:	430a      	orrs	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]
      break;
 8003d88:	e03e      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d96:	001a      	movs	r2, r3
 8003d98:	f000 f8f6 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2150      	movs	r1, #80	@ 0x50
 8003da2:	0018      	movs	r0, r3
 8003da4:	f000 f950 	bl	8004048 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e02e      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003db6:	001a      	movs	r2, r3
 8003db8:	f000 f914 	bl	8003fe4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	2160      	movs	r1, #96	@ 0x60
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f000 f940 	bl	8004048 <TIM_ITRx_SetConfig>
      break;
 8003dc8:	e01e      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dd6:	001a      	movs	r2, r3
 8003dd8:	f000 f8d6 	bl	8003f88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2140      	movs	r1, #64	@ 0x40
 8003de2:	0018      	movs	r0, r3
 8003de4:	f000 f930 	bl	8004048 <TIM_ITRx_SetConfig>
      break;
 8003de8:	e00e      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	0019      	movs	r1, r3
 8003df4:	0010      	movs	r0, r2
 8003df6:	f000 f927 	bl	8004048 <TIM_ITRx_SetConfig>
      break;
 8003dfa:	e005      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003dfc:	230f      	movs	r3, #15
 8003dfe:	18fb      	adds	r3, r7, r3
 8003e00:	2201      	movs	r2, #1
 8003e02:	701a      	strb	r2, [r3, #0]
      break;
 8003e04:	e000      	b.n	8003e08 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003e06:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	223d      	movs	r2, #61	@ 0x3d
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	223c      	movs	r2, #60	@ 0x3c
 8003e14:	2100      	movs	r1, #0
 8003e16:	5499      	strb	r1, [r3, r2]

  return status;
 8003e18:	230f      	movs	r3, #15
 8003e1a:	18fb      	adds	r3, r7, r3
 8003e1c:	781b      	ldrb	r3, [r3, #0]
}
 8003e1e:	0018      	movs	r0, r3
 8003e20:	46bd      	mov	sp, r7
 8003e22:	b004      	add	sp, #16
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	ffff00ff 	.word	0xffff00ff

08003e2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b002      	add	sp, #8
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b082      	sub	sp, #8
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e44:	46c0      	nop			@ (mov r8, r8)
 8003e46:	46bd      	mov	sp, r7
 8003e48:	b002      	add	sp, #8
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e54:	46c0      	nop			@ (mov r8, r8)
 8003e56:	46bd      	mov	sp, r7
 8003e58:	b002      	add	sp, #8
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b082      	sub	sp, #8
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e64:	46c0      	nop			@ (mov r8, r8)
 8003e66:	46bd      	mov	sp, r7
 8003e68:	b002      	add	sp, #8
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3b      	ldr	r2, [pc, #236]	@ (8003f6c <TIM_Base_SetConfig+0x100>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d008      	beq.n	8003e96 <TIM_Base_SetConfig+0x2a>
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	2380      	movs	r3, #128	@ 0x80
 8003e88:	05db      	lsls	r3, r3, #23
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d003      	beq.n	8003e96 <TIM_Base_SetConfig+0x2a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a37      	ldr	r2, [pc, #220]	@ (8003f70 <TIM_Base_SetConfig+0x104>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d108      	bne.n	8003ea8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2270      	movs	r2, #112	@ 0x70
 8003e9a:	4393      	bics	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a30      	ldr	r2, [pc, #192]	@ (8003f6c <TIM_Base_SetConfig+0x100>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d018      	beq.n	8003ee2 <TIM_Base_SetConfig+0x76>
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	2380      	movs	r3, #128	@ 0x80
 8003eb4:	05db      	lsls	r3, r3, #23
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d013      	beq.n	8003ee2 <TIM_Base_SetConfig+0x76>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a2c      	ldr	r2, [pc, #176]	@ (8003f70 <TIM_Base_SetConfig+0x104>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d00f      	beq.n	8003ee2 <TIM_Base_SetConfig+0x76>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f74 <TIM_Base_SetConfig+0x108>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d00b      	beq.n	8003ee2 <TIM_Base_SetConfig+0x76>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a2a      	ldr	r2, [pc, #168]	@ (8003f78 <TIM_Base_SetConfig+0x10c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d007      	beq.n	8003ee2 <TIM_Base_SetConfig+0x76>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a29      	ldr	r2, [pc, #164]	@ (8003f7c <TIM_Base_SetConfig+0x110>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d003      	beq.n	8003ee2 <TIM_Base_SetConfig+0x76>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a28      	ldr	r2, [pc, #160]	@ (8003f80 <TIM_Base_SetConfig+0x114>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d108      	bne.n	8003ef4 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	4a27      	ldr	r2, [pc, #156]	@ (8003f84 <TIM_Base_SetConfig+0x118>)
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2280      	movs	r2, #128	@ 0x80
 8003ef8:	4393      	bics	r3, r2
 8003efa:	001a      	movs	r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	695b      	ldr	r3, [r3, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a13      	ldr	r2, [pc, #76]	@ (8003f6c <TIM_Base_SetConfig+0x100>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d00b      	beq.n	8003f3a <TIM_Base_SetConfig+0xce>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a14      	ldr	r2, [pc, #80]	@ (8003f78 <TIM_Base_SetConfig+0x10c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d007      	beq.n	8003f3a <TIM_Base_SetConfig+0xce>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a13      	ldr	r2, [pc, #76]	@ (8003f7c <TIM_Base_SetConfig+0x110>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d003      	beq.n	8003f3a <TIM_Base_SetConfig+0xce>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a12      	ldr	r2, [pc, #72]	@ (8003f80 <TIM_Base_SetConfig+0x114>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d103      	bne.n	8003f42 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	691a      	ldr	r2, [r3, #16]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	4013      	ands	r3, r2
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d106      	bne.n	8003f62 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4393      	bics	r3, r2
 8003f5c:	001a      	movs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]
  }
}
 8003f62:	46c0      	nop			@ (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b004      	add	sp, #16
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			@ (mov r8, r8)
 8003f6c:	40012c00 	.word	0x40012c00
 8003f70:	40000400 	.word	0x40000400
 8003f74:	40002000 	.word	0x40002000
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800
 8003f84:	fffffcff 	.word	0xfffffcff

08003f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4393      	bics	r3, r2
 8003fa2:	001a      	movs	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	22f0      	movs	r2, #240	@ 0xf0
 8003fb2:	4393      	bics	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	693a      	ldr	r2, [r7, #16]
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	220a      	movs	r2, #10
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	693a      	ldr	r2, [r7, #16]
 8003fd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	621a      	str	r2, [r3, #32]
}
 8003fdc:	46c0      	nop			@ (mov r8, r8)
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	b006      	add	sp, #24
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	4393      	bics	r3, r2
 8003ffe:	001a      	movs	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4a0d      	ldr	r2, [pc, #52]	@ (8004044 <TIM_TI2_ConfigInputStage+0x60>)
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	031b      	lsls	r3, r3, #12
 8004016:	693a      	ldr	r2, [r7, #16]
 8004018:	4313      	orrs	r3, r2
 800401a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	22a0      	movs	r2, #160	@ 0xa0
 8004020:	4393      	bics	r3, r2
 8004022:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	697a      	ldr	r2, [r7, #20]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	46c0      	nop			@ (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b006      	add	sp, #24
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	ffff0fff 	.word	0xffff0fff

08004048 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
 8004050:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2270      	movs	r2, #112	@ 0x70
 800405c:	4393      	bics	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004060:	683a      	ldr	r2, [r7, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	2207      	movs	r2, #7
 8004068:	4313      	orrs	r3, r2
 800406a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	609a      	str	r2, [r3, #8]
}
 8004072:	46c0      	nop			@ (mov r8, r8)
 8004074:	46bd      	mov	sp, r7
 8004076:	b004      	add	sp, #16
 8004078:	bd80      	pop	{r7, pc}
	...

0800407c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	4a09      	ldr	r2, [pc, #36]	@ (80040b8 <TIM_ETR_SetConfig+0x3c>)
 8004094:	4013      	ands	r3, r2
 8004096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	021a      	lsls	r2, r3, #8
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	431a      	orrs	r2, r3
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	609a      	str	r2, [r3, #8]
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	b006      	add	sp, #24
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	ffff00ff 	.word	0xffff00ff

080040bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	223c      	movs	r2, #60	@ 0x3c
 80040ca:	5c9b      	ldrb	r3, [r3, r2]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040d0:	2302      	movs	r3, #2
 80040d2:	e047      	b.n	8004164 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	223c      	movs	r2, #60	@ 0x3c
 80040d8:	2101      	movs	r1, #1
 80040da:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	223d      	movs	r2, #61	@ 0x3d
 80040e0:	2102      	movs	r1, #2
 80040e2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2270      	movs	r2, #112	@ 0x70
 80040f8:	4393      	bics	r3, r2
 80040fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4313      	orrs	r3, r2
 8004104:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a16      	ldr	r2, [pc, #88]	@ (800416c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00f      	beq.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	2380      	movs	r3, #128	@ 0x80
 800411e:	05db      	lsls	r3, r3, #23
 8004120:	429a      	cmp	r2, r3
 8004122:	d009      	beq.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a11      	ldr	r2, [pc, #68]	@ (8004170 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d004      	beq.n	8004138 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a10      	ldr	r2, [pc, #64]	@ (8004174 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d10c      	bne.n	8004152 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2280      	movs	r2, #128	@ 0x80
 800413c:	4393      	bics	r3, r2
 800413e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	68ba      	ldr	r2, [r7, #8]
 8004146:	4313      	orrs	r3, r2
 8004148:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	223d      	movs	r2, #61	@ 0x3d
 8004156:	2101      	movs	r1, #1
 8004158:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	223c      	movs	r2, #60	@ 0x3c
 800415e:	2100      	movs	r1, #0
 8004160:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b004      	add	sp, #16
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40012c00 	.word	0x40012c00
 8004170:	40000400 	.word	0x40000400
 8004174:	40014000 	.word	0x40014000

08004178 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004180:	46c0      	nop			@ (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	b002      	add	sp, #8
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004190:	46c0      	nop			@ (mov r8, r8)
 8004192:	46bd      	mov	sp, r7
 8004194:	b002      	add	sp, #8
 8004196:	bd80      	pop	{r7, pc}

08004198 <LL_GPIO_SetPinMode>:
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	435b      	muls	r3, r3
 80041ac:	001a      	movs	r2, r3
 80041ae:	0013      	movs	r3, r2
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	43db      	mvns	r3, r3
 80041b6:	400b      	ands	r3, r1
 80041b8:	001a      	movs	r2, r3
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	435b      	muls	r3, r3
 80041be:	6879      	ldr	r1, [r7, #4]
 80041c0:	434b      	muls	r3, r1
 80041c2:	431a      	orrs	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	601a      	str	r2, [r3, #0]
}
 80041c8:	46c0      	nop			@ (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b004      	add	sp, #16
 80041ce:	bd80      	pop	{r7, pc}

080041d0 <LL_GPIO_SetPinOutputType>:
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	43d2      	mvns	r2, r2
 80041e4:	401a      	ands	r2, r3
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	434b      	muls	r3, r1
 80041ec:	431a      	orrs	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	605a      	str	r2, [r3, #4]
}
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	46bd      	mov	sp, r7
 80041f6:	b004      	add	sp, #16
 80041f8:	bd80      	pop	{r7, pc}

080041fa <LL_GPIO_SetPinSpeed>:
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6899      	ldr	r1, [r3, #8]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	435b      	muls	r3, r3
 800420e:	001a      	movs	r2, r3
 8004210:	0013      	movs	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	189b      	adds	r3, r3, r2
 8004216:	43db      	mvns	r3, r3
 8004218:	400b      	ands	r3, r1
 800421a:	001a      	movs	r2, r3
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	435b      	muls	r3, r3
 8004220:	6879      	ldr	r1, [r7, #4]
 8004222:	434b      	muls	r3, r1
 8004224:	431a      	orrs	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	609a      	str	r2, [r3, #8]
}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	b004      	add	sp, #16
 8004230:	bd80      	pop	{r7, pc}

08004232 <LL_GPIO_SetPinPull>:
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b084      	sub	sp, #16
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	68d9      	ldr	r1, [r3, #12]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	435b      	muls	r3, r3
 8004246:	001a      	movs	r2, r3
 8004248:	0013      	movs	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	189b      	adds	r3, r3, r2
 800424e:	43db      	mvns	r3, r3
 8004250:	400b      	ands	r3, r1
 8004252:	001a      	movs	r2, r3
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	435b      	muls	r3, r3
 8004258:	6879      	ldr	r1, [r7, #4]
 800425a:	434b      	muls	r3, r1
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	60da      	str	r2, [r3, #12]
}
 8004262:	46c0      	nop			@ (mov r8, r8)
 8004264:	46bd      	mov	sp, r7
 8004266:	b004      	add	sp, #16
 8004268:	bd80      	pop	{r7, pc}

0800426a <LL_GPIO_SetAFPin_0_7>:
{
 800426a:	b580      	push	{r7, lr}
 800426c:	b084      	sub	sp, #16
 800426e:	af00      	add	r7, sp, #0
 8004270:	60f8      	str	r0, [r7, #12]
 8004272:	60b9      	str	r1, [r7, #8]
 8004274:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6a19      	ldr	r1, [r3, #32]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	435b      	muls	r3, r3
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	4353      	muls	r3, r2
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	435a      	muls	r2, r3
 8004286:	0013      	movs	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	43db      	mvns	r3, r3
 800428e:	400b      	ands	r3, r1
 8004290:	001a      	movs	r2, r3
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	435b      	muls	r3, r3
 8004296:	68b9      	ldr	r1, [r7, #8]
 8004298:	434b      	muls	r3, r1
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	434b      	muls	r3, r1
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	434b      	muls	r3, r1
 80042a2:	431a      	orrs	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	621a      	str	r2, [r3, #32]
}
 80042a8:	46c0      	nop			@ (mov r8, r8)
 80042aa:	46bd      	mov	sp, r7
 80042ac:	b004      	add	sp, #16
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <LL_GPIO_SetAFPin_8_15>:
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	0a1b      	lsrs	r3, r3, #8
 80042c4:	68ba      	ldr	r2, [r7, #8]
 80042c6:	0a12      	lsrs	r2, r2, #8
 80042c8:	4353      	muls	r3, r2
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	0a12      	lsrs	r2, r2, #8
 80042ce:	4353      	muls	r3, r2
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	0a12      	lsrs	r2, r2, #8
 80042d4:	435a      	muls	r2, r3
 80042d6:	0013      	movs	r3, r2
 80042d8:	011b      	lsls	r3, r3, #4
 80042da:	1a9b      	subs	r3, r3, r2
 80042dc:	43db      	mvns	r3, r3
 80042de:	400b      	ands	r3, r1
 80042e0:	001a      	movs	r2, r3
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	0a1b      	lsrs	r3, r3, #8
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	0a09      	lsrs	r1, r1, #8
 80042ea:	434b      	muls	r3, r1
 80042ec:	68b9      	ldr	r1, [r7, #8]
 80042ee:	0a09      	lsrs	r1, r1, #8
 80042f0:	434b      	muls	r3, r1
 80042f2:	68b9      	ldr	r1, [r7, #8]
 80042f4:	0a09      	lsrs	r1, r1, #8
 80042f6:	434b      	muls	r3, r1
 80042f8:	6879      	ldr	r1, [r7, #4]
 80042fa:	434b      	muls	r3, r1
 80042fc:	431a      	orrs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	46bd      	mov	sp, r7
 8004306:	b004      	add	sp, #16
 8004308:	bd80      	pop	{r7, pc}

0800430a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
 8004312:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004318:	e048      	b.n	80043ac <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2101      	movs	r1, #1
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4091      	lsls	r1, r2
 8004324:	000a      	movs	r2, r1
 8004326:	4013      	ands	r3, r2
 8004328:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d03a      	beq.n	80043a6 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d003      	beq.n	8004340 <LL_GPIO_Init+0x36>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	2b02      	cmp	r3, #2
 800433e:	d10e      	bne.n	800435e <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f7ff ff56 	bl	80041fa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6819      	ldr	r1, [r3, #0]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	0018      	movs	r0, r3
 800435a:	f7ff ff39 	bl	80041d0 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	68b9      	ldr	r1, [r7, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	0018      	movs	r0, r3
 8004368:	f7ff ff63 	bl	8004232 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	2b02      	cmp	r3, #2
 8004372:	d111      	bne.n	8004398 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	2bff      	cmp	r3, #255	@ 0xff
 8004378:	d807      	bhi.n	800438a <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0018      	movs	r0, r3
 8004384:	f7ff ff71 	bl	800426a <LL_GPIO_SetAFPin_0_7>
 8004388:	e006      	b.n	8004398 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695a      	ldr	r2, [r3, #20]
 800438e:	68b9      	ldr	r1, [r7, #8]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	0018      	movs	r0, r3
 8004394:	f7ff ff8c 	bl	80042b0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	68b9      	ldr	r1, [r7, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0018      	movs	r0, r3
 80043a2:	f7ff fef9 	bl	8004198 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3301      	adds	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	40da      	lsrs	r2, r3
 80043b4:	1e13      	subs	r3, r2, #0
 80043b6:	d1b0      	bne.n	800431a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	0018      	movs	r0, r3
 80043bc:	46bd      	mov	sp, r7
 80043be:	b004      	add	sp, #16
 80043c0:	bd80      	pop	{r7, pc}
	...

080043c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2244      	movs	r2, #68	@ 0x44
 80043d0:	2100      	movs	r1, #0
 80043d2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <USB_EnableGlobalInt+0x28>)
 80043d6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	b299      	uxth	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2240      	movs	r2, #64	@ 0x40
 80043e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	0018      	movs	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	b004      	add	sp, #16
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	0000bf80 	.word	0x0000bf80

080043f0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80043f8:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <USB_DisableGlobalInt+0x30>)
 80043fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2240      	movs	r2, #64	@ 0x40
 8004400:	5a9b      	ldrh	r3, [r3, r2]
 8004402:	b29b      	uxth	r3, r3
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	b292      	uxth	r2, r2
 8004408:	43d2      	mvns	r2, r2
 800440a:	b292      	uxth	r2, r2
 800440c:	4013      	ands	r3, r2
 800440e:	b299      	uxth	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2240      	movs	r2, #64	@ 0x40
 8004414:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	0018      	movs	r0, r3
 800441a:	46bd      	mov	sp, r7
 800441c:	b004      	add	sp, #16
 800441e:	bd80      	pop	{r7, pc}
 8004420:	0000bf80 	.word	0x0000bf80

08004424 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	6019      	str	r1, [r3, #0]
 8004430:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2240      	movs	r2, #64	@ 0x40
 8004436:	2101      	movs	r1, #1
 8004438:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2240      	movs	r2, #64	@ 0x40
 800443e:	2100      	movs	r1, #0
 8004440:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2244      	movs	r2, #68	@ 0x44
 8004446:	2100      	movs	r1, #0
 8004448:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2250      	movs	r2, #80	@ 0x50
 800444e:	2100      	movs	r1, #0
 8004450:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	0018      	movs	r0, r3
 8004456:	46bd      	mov	sp, r7
 8004458:	b004      	add	sp, #16
 800445a:	bd80      	pop	{r7, pc}

0800445c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b09c      	sub	sp, #112	@ 0x70
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004466:	236f      	movs	r3, #111	@ 0x6f
 8004468:	18fb      	adds	r3, r7, r3
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	18d3      	adds	r3, r2, r3
 8004478:	881b      	ldrh	r3, [r3, #0]
 800447a:	b29a      	uxth	r2, r3
 800447c:	236c      	movs	r3, #108	@ 0x6c
 800447e:	18fb      	adds	r3, r7, r3
 8004480:	49a1      	ldr	r1, [pc, #644]	@ (8004708 <USB_ActivateEndpoint+0x2ac>)
 8004482:	400a      	ands	r2, r1
 8004484:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	78db      	ldrb	r3, [r3, #3]
 800448a:	2b03      	cmp	r3, #3
 800448c:	d017      	beq.n	80044be <USB_ActivateEndpoint+0x62>
 800448e:	dc28      	bgt.n	80044e2 <USB_ActivateEndpoint+0x86>
 8004490:	2b02      	cmp	r3, #2
 8004492:	d00e      	beq.n	80044b2 <USB_ActivateEndpoint+0x56>
 8004494:	dc25      	bgt.n	80044e2 <USB_ActivateEndpoint+0x86>
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <USB_ActivateEndpoint+0x44>
 800449a:	2b01      	cmp	r3, #1
 800449c:	d018      	beq.n	80044d0 <USB_ActivateEndpoint+0x74>
 800449e:	e020      	b.n	80044e2 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80044a0:	226c      	movs	r2, #108	@ 0x6c
 80044a2:	18bb      	adds	r3, r7, r2
 80044a4:	18ba      	adds	r2, r7, r2
 80044a6:	8812      	ldrh	r2, [r2, #0]
 80044a8:	2180      	movs	r1, #128	@ 0x80
 80044aa:	0089      	lsls	r1, r1, #2
 80044ac:	430a      	orrs	r2, r1
 80044ae:	801a      	strh	r2, [r3, #0]
      break;
 80044b0:	e01c      	b.n	80044ec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80044b2:	226c      	movs	r2, #108	@ 0x6c
 80044b4:	18bb      	adds	r3, r7, r2
 80044b6:	18ba      	adds	r2, r7, r2
 80044b8:	8812      	ldrh	r2, [r2, #0]
 80044ba:	801a      	strh	r2, [r3, #0]
      break;
 80044bc:	e016      	b.n	80044ec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80044be:	226c      	movs	r2, #108	@ 0x6c
 80044c0:	18bb      	adds	r3, r7, r2
 80044c2:	18ba      	adds	r2, r7, r2
 80044c4:	8812      	ldrh	r2, [r2, #0]
 80044c6:	21c0      	movs	r1, #192	@ 0xc0
 80044c8:	00c9      	lsls	r1, r1, #3
 80044ca:	430a      	orrs	r2, r1
 80044cc:	801a      	strh	r2, [r3, #0]
      break;
 80044ce:	e00d      	b.n	80044ec <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80044d0:	226c      	movs	r2, #108	@ 0x6c
 80044d2:	18bb      	adds	r3, r7, r2
 80044d4:	18ba      	adds	r2, r7, r2
 80044d6:	8812      	ldrh	r2, [r2, #0]
 80044d8:	2180      	movs	r1, #128	@ 0x80
 80044da:	00c9      	lsls	r1, r1, #3
 80044dc:	430a      	orrs	r2, r1
 80044de:	801a      	strh	r2, [r3, #0]
      break;
 80044e0:	e004      	b.n	80044ec <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80044e2:	236f      	movs	r3, #111	@ 0x6f
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	2201      	movs	r2, #1
 80044e8:	701a      	strb	r2, [r3, #0]
      break;
 80044ea:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	18d3      	adds	r3, r2, r3
 80044f6:	226c      	movs	r2, #108	@ 0x6c
 80044f8:	18ba      	adds	r2, r7, r2
 80044fa:	8812      	ldrh	r2, [r2, #0]
 80044fc:	4983      	ldr	r1, [pc, #524]	@ (800470c <USB_ActivateEndpoint+0x2b0>)
 80044fe:	430a      	orrs	r2, r1
 8004500:	b292      	uxth	r2, r2
 8004502:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	881b      	ldrh	r3, [r3, #0]
 8004510:	b29b      	uxth	r3, r3
 8004512:	b21b      	sxth	r3, r3
 8004514:	4a7e      	ldr	r2, [pc, #504]	@ (8004710 <USB_ActivateEndpoint+0x2b4>)
 8004516:	4013      	ands	r3, r2
 8004518:	b21a      	sxth	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	b21b      	sxth	r3, r3
 8004520:	4313      	orrs	r3, r2
 8004522:	b21a      	sxth	r2, r3
 8004524:	2166      	movs	r1, #102	@ 0x66
 8004526:	187b      	adds	r3, r7, r1
 8004528:	801a      	strh	r2, [r3, #0]
 800452a:	687a      	ldr	r2, [r7, #4]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	18d3      	adds	r3, r2, r3
 8004534:	187a      	adds	r2, r7, r1
 8004536:	8812      	ldrh	r2, [r2, #0]
 8004538:	4974      	ldr	r1, [pc, #464]	@ (800470c <USB_ActivateEndpoint+0x2b0>)
 800453a:	430a      	orrs	r2, r1
 800453c:	b292      	uxth	r2, r2
 800453e:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	7b1b      	ldrb	r3, [r3, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d000      	beq.n	800454a <USB_ActivateEndpoint+0xee>
 8004548:	e177      	b.n	800483a <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	785b      	ldrb	r3, [r3, #1]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d100      	bne.n	8004554 <USB_ActivateEndpoint+0xf8>
 8004552:	e07a      	b.n	800464a <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	61bb      	str	r3, [r7, #24]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2250      	movs	r2, #80	@ 0x50
 800455c:	5a9b      	ldrh	r3, [r3, r2]
 800455e:	b29b      	uxth	r3, r3
 8004560:	001a      	movs	r2, r3
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	189b      	adds	r3, r3, r2
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	00da      	lsls	r2, r3, #3
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	18d3      	adds	r3, r2, r3
 8004572:	2280      	movs	r2, #128	@ 0x80
 8004574:	00d2      	lsls	r2, r2, #3
 8004576:	4694      	mov	ip, r2
 8004578:	4463      	add	r3, ip
 800457a:	617b      	str	r3, [r7, #20]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	88db      	ldrh	r3, [r3, #6]
 8004580:	085b      	lsrs	r3, r3, #1
 8004582:	b29b      	uxth	r3, r3
 8004584:	18db      	adds	r3, r3, r3
 8004586:	b29a      	uxth	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	18d2      	adds	r2, r2, r3
 8004596:	2112      	movs	r1, #18
 8004598:	187b      	adds	r3, r7, r1
 800459a:	8812      	ldrh	r2, [r2, #0]
 800459c:	801a      	strh	r2, [r3, #0]
 800459e:	187b      	adds	r3, r7, r1
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	2240      	movs	r2, #64	@ 0x40
 80045a4:	4013      	ands	r3, r2
 80045a6:	d016      	beq.n	80045d6 <USB_ActivateEndpoint+0x17a>
 80045a8:	687a      	ldr	r2, [r7, #4]
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	18d3      	adds	r3, r2, r3
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	2010      	movs	r0, #16
 80045b8:	183b      	adds	r3, r7, r0
 80045ba:	4955      	ldr	r1, [pc, #340]	@ (8004710 <USB_ActivateEndpoint+0x2b4>)
 80045bc:	400a      	ands	r2, r1
 80045be:	801a      	strh	r2, [r3, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	18d3      	adds	r3, r2, r3
 80045ca:	183a      	adds	r2, r7, r0
 80045cc:	8812      	ldrh	r2, [r2, #0]
 80045ce:	4951      	ldr	r1, [pc, #324]	@ (8004714 <USB_ActivateEndpoint+0x2b8>)
 80045d0:	430a      	orrs	r2, r1
 80045d2:	b292      	uxth	r2, r2
 80045d4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	78db      	ldrb	r3, [r3, #3]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d01d      	beq.n	800461a <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	18d3      	adds	r3, r2, r3
 80045e8:	881b      	ldrh	r3, [r3, #0]
 80045ea:	b29a      	uxth	r2, r3
 80045ec:	200c      	movs	r0, #12
 80045ee:	183b      	adds	r3, r7, r0
 80045f0:	4949      	ldr	r1, [pc, #292]	@ (8004718 <USB_ActivateEndpoint+0x2bc>)
 80045f2:	400a      	ands	r2, r1
 80045f4:	801a      	strh	r2, [r3, #0]
 80045f6:	183b      	adds	r3, r7, r0
 80045f8:	183a      	adds	r2, r7, r0
 80045fa:	8812      	ldrh	r2, [r2, #0]
 80045fc:	2120      	movs	r1, #32
 80045fe:	404a      	eors	r2, r1
 8004600:	801a      	strh	r2, [r3, #0]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	18d3      	adds	r3, r2, r3
 800460c:	183a      	adds	r2, r7, r0
 800460e:	8812      	ldrh	r2, [r2, #0]
 8004610:	493e      	ldr	r1, [pc, #248]	@ (800470c <USB_ActivateEndpoint+0x2b0>)
 8004612:	430a      	orrs	r2, r1
 8004614:	b292      	uxth	r2, r2
 8004616:	801a      	strh	r2, [r3, #0]
 8004618:	e2b5      	b.n	8004b86 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	18d3      	adds	r3, r2, r3
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29a      	uxth	r2, r3
 8004628:	200e      	movs	r0, #14
 800462a:	183b      	adds	r3, r7, r0
 800462c:	493a      	ldr	r1, [pc, #232]	@ (8004718 <USB_ActivateEndpoint+0x2bc>)
 800462e:	400a      	ands	r2, r1
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	18d3      	adds	r3, r2, r3
 800463c:	183a      	adds	r2, r7, r0
 800463e:	8812      	ldrh	r2, [r2, #0]
 8004640:	4932      	ldr	r1, [pc, #200]	@ (800470c <USB_ActivateEndpoint+0x2b0>)
 8004642:	430a      	orrs	r2, r1
 8004644:	b292      	uxth	r2, r2
 8004646:	801a      	strh	r2, [r3, #0]
 8004648:	e29d      	b.n	8004b86 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	633b      	str	r3, [r7, #48]	@ 0x30
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2250      	movs	r2, #80	@ 0x50
 8004652:	5a9b      	ldrh	r3, [r3, r2]
 8004654:	b29b      	uxth	r3, r3
 8004656:	001a      	movs	r2, r3
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	189b      	adds	r3, r3, r2
 800465c:	633b      	str	r3, [r7, #48]	@ 0x30
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	00da      	lsls	r2, r3, #3
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	18d3      	adds	r3, r2, r3
 8004668:	4a2c      	ldr	r2, [pc, #176]	@ (800471c <USB_ActivateEndpoint+0x2c0>)
 800466a:	4694      	mov	ip, r2
 800466c:	4463      	add	r3, ip
 800466e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	88db      	ldrh	r3, [r3, #6]
 8004674:	085b      	lsrs	r3, r3, #1
 8004676:	b29b      	uxth	r3, r3
 8004678:	18db      	adds	r3, r3, r3
 800467a:	b29a      	uxth	r2, r3
 800467c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800467e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2250      	movs	r2, #80	@ 0x50
 8004688:	5a9b      	ldrh	r3, [r3, r2]
 800468a:	b29b      	uxth	r3, r3
 800468c:	001a      	movs	r2, r3
 800468e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004690:	189b      	adds	r3, r3, r2
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	00da      	lsls	r2, r3, #3
 800469a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800469c:	18d3      	adds	r3, r2, r3
 800469e:	4a20      	ldr	r2, [pc, #128]	@ (8004720 <USB_ActivateEndpoint+0x2c4>)
 80046a0:	4694      	mov	ip, r2
 80046a2:	4463      	add	r3, ip
 80046a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	059b      	lsls	r3, r3, #22
 80046ae:	0d9b      	lsrs	r3, r3, #22
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b4:	801a      	strh	r2, [r3, #0]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d108      	bne.n	80046d0 <USB_ActivateEndpoint+0x274>
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4a17      	ldr	r2, [pc, #92]	@ (8004724 <USB_ActivateEndpoint+0x2c8>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046cc:	801a      	strh	r2, [r3, #0]
 80046ce:	e045      	b.n	800475c <USB_ActivateEndpoint+0x300>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b3e      	cmp	r3, #62	@ 0x3e
 80046d6:	d827      	bhi.n	8004728 <USB_ActivateEndpoint+0x2cc>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	085b      	lsrs	r3, r3, #1
 80046de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2201      	movs	r2, #1
 80046e6:	4013      	ands	r3, r2
 80046e8:	d002      	beq.n	80046f0 <USB_ActivateEndpoint+0x294>
 80046ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046ec:	3301      	adds	r3, #1
 80046ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	029b      	lsls	r3, r3, #10
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	4313      	orrs	r3, r2
 8004700:	b29a      	uxth	r2, r3
 8004702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004704:	801a      	strh	r2, [r3, #0]
 8004706:	e029      	b.n	800475c <USB_ActivateEndpoint+0x300>
 8004708:	ffff898f 	.word	0xffff898f
 800470c:	ffff8080 	.word	0xffff8080
 8004710:	ffff8f8f 	.word	0xffff8f8f
 8004714:	ffff80c0 	.word	0xffff80c0
 8004718:	ffff8fbf 	.word	0xffff8fbf
 800471c:	00000404 	.word	0x00000404
 8004720:	00000406 	.word	0x00000406
 8004724:	ffff8000 	.word	0xffff8000
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	221f      	movs	r2, #31
 8004736:	4013      	ands	r3, r2
 8004738:	d102      	bne.n	8004740 <USB_ActivateEndpoint+0x2e4>
 800473a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800473c:	3b01      	subs	r3, #1
 800473e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004742:	881b      	ldrh	r3, [r3, #0]
 8004744:	b29a      	uxth	r2, r3
 8004746:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004748:	b29b      	uxth	r3, r3
 800474a:	029b      	lsls	r3, r3, #10
 800474c:	b29b      	uxth	r3, r3
 800474e:	4313      	orrs	r3, r2
 8004750:	b29b      	uxth	r3, r3
 8004752:	4ab5      	ldr	r2, [pc, #724]	@ (8004a28 <USB_ActivateEndpoint+0x5cc>)
 8004754:	4313      	orrs	r3, r2
 8004756:	b29a      	uxth	r2, r3
 8004758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800475c:	687a      	ldr	r2, [r7, #4]
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	18d2      	adds	r2, r2, r3
 8004766:	2122      	movs	r1, #34	@ 0x22
 8004768:	187b      	adds	r3, r7, r1
 800476a:	8812      	ldrh	r2, [r2, #0]
 800476c:	801a      	strh	r2, [r3, #0]
 800476e:	187b      	adds	r3, r7, r1
 8004770:	881a      	ldrh	r2, [r3, #0]
 8004772:	2380      	movs	r3, #128	@ 0x80
 8004774:	01db      	lsls	r3, r3, #7
 8004776:	4013      	ands	r3, r2
 8004778:	d016      	beq.n	80047a8 <USB_ActivateEndpoint+0x34c>
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	18d3      	adds	r3, r2, r3
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	b29a      	uxth	r2, r3
 8004788:	2020      	movs	r0, #32
 800478a:	183b      	adds	r3, r7, r0
 800478c:	49a7      	ldr	r1, [pc, #668]	@ (8004a2c <USB_ActivateEndpoint+0x5d0>)
 800478e:	400a      	ands	r2, r1
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	18d3      	adds	r3, r2, r3
 800479c:	183a      	adds	r2, r7, r0
 800479e:	8812      	ldrh	r2, [r2, #0]
 80047a0:	49a3      	ldr	r1, [pc, #652]	@ (8004a30 <USB_ActivateEndpoint+0x5d4>)
 80047a2:	430a      	orrs	r2, r1
 80047a4:	b292      	uxth	r2, r2
 80047a6:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d125      	bne.n	80047fc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	18d3      	adds	r3, r2, r3
 80047ba:	881b      	ldrh	r3, [r3, #0]
 80047bc:	b29a      	uxth	r2, r3
 80047be:	201c      	movs	r0, #28
 80047c0:	183b      	adds	r3, r7, r0
 80047c2:	499c      	ldr	r1, [pc, #624]	@ (8004a34 <USB_ActivateEndpoint+0x5d8>)
 80047c4:	400a      	ands	r2, r1
 80047c6:	801a      	strh	r2, [r3, #0]
 80047c8:	183b      	adds	r3, r7, r0
 80047ca:	183a      	adds	r2, r7, r0
 80047cc:	8812      	ldrh	r2, [r2, #0]
 80047ce:	2180      	movs	r1, #128	@ 0x80
 80047d0:	0149      	lsls	r1, r1, #5
 80047d2:	404a      	eors	r2, r1
 80047d4:	801a      	strh	r2, [r3, #0]
 80047d6:	183b      	adds	r3, r7, r0
 80047d8:	183a      	adds	r2, r7, r0
 80047da:	8812      	ldrh	r2, [r2, #0]
 80047dc:	2180      	movs	r1, #128	@ 0x80
 80047de:	0189      	lsls	r1, r1, #6
 80047e0:	404a      	eors	r2, r1
 80047e2:	801a      	strh	r2, [r3, #0]
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	18d3      	adds	r3, r2, r3
 80047ee:	183a      	adds	r2, r7, r0
 80047f0:	8812      	ldrh	r2, [r2, #0]
 80047f2:	4991      	ldr	r1, [pc, #580]	@ (8004a38 <USB_ActivateEndpoint+0x5dc>)
 80047f4:	430a      	orrs	r2, r1
 80047f6:	b292      	uxth	r2, r2
 80047f8:	801a      	strh	r2, [r3, #0]
 80047fa:	e1c4      	b.n	8004b86 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	18d3      	adds	r3, r2, r3
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29a      	uxth	r2, r3
 800480a:	201e      	movs	r0, #30
 800480c:	183b      	adds	r3, r7, r0
 800480e:	4989      	ldr	r1, [pc, #548]	@ (8004a34 <USB_ActivateEndpoint+0x5d8>)
 8004810:	400a      	ands	r2, r1
 8004812:	801a      	strh	r2, [r3, #0]
 8004814:	183b      	adds	r3, r7, r0
 8004816:	183a      	adds	r2, r7, r0
 8004818:	8812      	ldrh	r2, [r2, #0]
 800481a:	2180      	movs	r1, #128	@ 0x80
 800481c:	0189      	lsls	r1, r1, #6
 800481e:	404a      	eors	r2, r1
 8004820:	801a      	strh	r2, [r3, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	18d3      	adds	r3, r2, r3
 800482c:	183a      	adds	r2, r7, r0
 800482e:	8812      	ldrh	r2, [r2, #0]
 8004830:	4981      	ldr	r1, [pc, #516]	@ (8004a38 <USB_ActivateEndpoint+0x5dc>)
 8004832:	430a      	orrs	r2, r1
 8004834:	b292      	uxth	r2, r2
 8004836:	801a      	strh	r2, [r3, #0]
 8004838:	e1a5      	b.n	8004b86 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	78db      	ldrb	r3, [r3, #3]
 800483e:	2b02      	cmp	r3, #2
 8004840:	d117      	bne.n	8004872 <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	683b      	ldr	r3, [r7, #0]
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	18d3      	adds	r3, r2, r3
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	b29a      	uxth	r2, r3
 8004850:	2062      	movs	r0, #98	@ 0x62
 8004852:	183b      	adds	r3, r7, r0
 8004854:	4975      	ldr	r1, [pc, #468]	@ (8004a2c <USB_ActivateEndpoint+0x5d0>)
 8004856:	400a      	ands	r2, r1
 8004858:	801a      	strh	r2, [r3, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	18d3      	adds	r3, r2, r3
 8004864:	183a      	adds	r2, r7, r0
 8004866:	8812      	ldrh	r2, [r2, #0]
 8004868:	4974      	ldr	r1, [pc, #464]	@ (8004a3c <USB_ActivateEndpoint+0x5e0>)
 800486a:	430a      	orrs	r2, r1
 800486c:	b292      	uxth	r2, r2
 800486e:	801a      	strh	r2, [r3, #0]
 8004870:	e016      	b.n	80048a0 <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	18d3      	adds	r3, r2, r3
 800487c:	881b      	ldrh	r3, [r3, #0]
 800487e:	b29a      	uxth	r2, r3
 8004880:	2064      	movs	r0, #100	@ 0x64
 8004882:	183b      	adds	r3, r7, r0
 8004884:	496e      	ldr	r1, [pc, #440]	@ (8004a40 <USB_ActivateEndpoint+0x5e4>)
 8004886:	400a      	ands	r2, r1
 8004888:	801a      	strh	r2, [r3, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	009b      	lsls	r3, r3, #2
 8004892:	18d3      	adds	r3, r2, r3
 8004894:	183a      	adds	r2, r7, r0
 8004896:	8812      	ldrh	r2, [r2, #0]
 8004898:	4967      	ldr	r1, [pc, #412]	@ (8004a38 <USB_ActivateEndpoint+0x5dc>)
 800489a:	430a      	orrs	r2, r1
 800489c:	b292      	uxth	r2, r2
 800489e:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2250      	movs	r2, #80	@ 0x50
 80048a8:	5a9b      	ldrh	r3, [r3, r2]
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	001a      	movs	r2, r3
 80048ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048b0:	189b      	adds	r3, r3, r2
 80048b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	00da      	lsls	r2, r3, #3
 80048ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048bc:	18d3      	adds	r3, r2, r3
 80048be:	2280      	movs	r2, #128	@ 0x80
 80048c0:	00d2      	lsls	r2, r2, #3
 80048c2:	4694      	mov	ip, r2
 80048c4:	4463      	add	r3, ip
 80048c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	891b      	ldrh	r3, [r3, #8]
 80048cc:	085b      	lsrs	r3, r3, #1
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	18db      	adds	r3, r3, r3
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	657b      	str	r3, [r7, #84]	@ 0x54
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2250      	movs	r2, #80	@ 0x50
 80048e0:	5a9b      	ldrh	r3, [r3, r2]
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	001a      	movs	r2, r3
 80048e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048e8:	189b      	adds	r3, r3, r2
 80048ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	00da      	lsls	r2, r3, #3
 80048f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80048f4:	18d3      	adds	r3, r2, r3
 80048f6:	4a53      	ldr	r2, [pc, #332]	@ (8004a44 <USB_ActivateEndpoint+0x5e8>)
 80048f8:	4694      	mov	ip, r2
 80048fa:	4463      	add	r3, ip
 80048fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	895b      	ldrh	r3, [r3, #10]
 8004902:	085b      	lsrs	r3, r3, #1
 8004904:	b29b      	uxth	r3, r3
 8004906:	18db      	adds	r3, r3, r3
 8004908:	b29a      	uxth	r2, r3
 800490a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800490c:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	785b      	ldrb	r3, [r3, #1]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d000      	beq.n	8004918 <USB_ActivateEndpoint+0x4bc>
 8004916:	e09b      	b.n	8004a50 <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	18d2      	adds	r2, r2, r3
 8004922:	2140      	movs	r1, #64	@ 0x40
 8004924:	187b      	adds	r3, r7, r1
 8004926:	8812      	ldrh	r2, [r2, #0]
 8004928:	801a      	strh	r2, [r3, #0]
 800492a:	187b      	adds	r3, r7, r1
 800492c:	881a      	ldrh	r2, [r3, #0]
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	01db      	lsls	r3, r3, #7
 8004932:	4013      	ands	r3, r2
 8004934:	d016      	beq.n	8004964 <USB_ActivateEndpoint+0x508>
 8004936:	687a      	ldr	r2, [r7, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	009b      	lsls	r3, r3, #2
 800493e:	18d3      	adds	r3, r2, r3
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	b29a      	uxth	r2, r3
 8004944:	203e      	movs	r0, #62	@ 0x3e
 8004946:	183b      	adds	r3, r7, r0
 8004948:	4938      	ldr	r1, [pc, #224]	@ (8004a2c <USB_ActivateEndpoint+0x5d0>)
 800494a:	400a      	ands	r2, r1
 800494c:	801a      	strh	r2, [r3, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	18d3      	adds	r3, r2, r3
 8004958:	183a      	adds	r2, r7, r0
 800495a:	8812      	ldrh	r2, [r2, #0]
 800495c:	4934      	ldr	r1, [pc, #208]	@ (8004a30 <USB_ActivateEndpoint+0x5d4>)
 800495e:	430a      	orrs	r2, r1
 8004960:	b292      	uxth	r2, r2
 8004962:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	18d2      	adds	r2, r2, r3
 800496e:	213c      	movs	r1, #60	@ 0x3c
 8004970:	187b      	adds	r3, r7, r1
 8004972:	8812      	ldrh	r2, [r2, #0]
 8004974:	801a      	strh	r2, [r3, #0]
 8004976:	187b      	adds	r3, r7, r1
 8004978:	881b      	ldrh	r3, [r3, #0]
 800497a:	2240      	movs	r2, #64	@ 0x40
 800497c:	4013      	ands	r3, r2
 800497e:	d016      	beq.n	80049ae <USB_ActivateEndpoint+0x552>
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	18d3      	adds	r3, r2, r3
 800498a:	881b      	ldrh	r3, [r3, #0]
 800498c:	b29a      	uxth	r2, r3
 800498e:	203a      	movs	r0, #58	@ 0x3a
 8004990:	183b      	adds	r3, r7, r0
 8004992:	4926      	ldr	r1, [pc, #152]	@ (8004a2c <USB_ActivateEndpoint+0x5d0>)
 8004994:	400a      	ands	r2, r1
 8004996:	801a      	strh	r2, [r3, #0]
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	18d3      	adds	r3, r2, r3
 80049a2:	183a      	adds	r2, r7, r0
 80049a4:	8812      	ldrh	r2, [r2, #0]
 80049a6:	4928      	ldr	r1, [pc, #160]	@ (8004a48 <USB_ActivateEndpoint+0x5ec>)
 80049a8:	430a      	orrs	r2, r1
 80049aa:	b292      	uxth	r2, r2
 80049ac:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	18d3      	adds	r3, r2, r3
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29a      	uxth	r2, r3
 80049bc:	2038      	movs	r0, #56	@ 0x38
 80049be:	183b      	adds	r3, r7, r0
 80049c0:	491c      	ldr	r1, [pc, #112]	@ (8004a34 <USB_ActivateEndpoint+0x5d8>)
 80049c2:	400a      	ands	r2, r1
 80049c4:	801a      	strh	r2, [r3, #0]
 80049c6:	183b      	adds	r3, r7, r0
 80049c8:	183a      	adds	r2, r7, r0
 80049ca:	8812      	ldrh	r2, [r2, #0]
 80049cc:	2180      	movs	r1, #128	@ 0x80
 80049ce:	0149      	lsls	r1, r1, #5
 80049d0:	404a      	eors	r2, r1
 80049d2:	801a      	strh	r2, [r3, #0]
 80049d4:	183b      	adds	r3, r7, r0
 80049d6:	183a      	adds	r2, r7, r0
 80049d8:	8812      	ldrh	r2, [r2, #0]
 80049da:	2180      	movs	r1, #128	@ 0x80
 80049dc:	0189      	lsls	r1, r1, #6
 80049de:	404a      	eors	r2, r1
 80049e0:	801a      	strh	r2, [r3, #0]
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	18d3      	adds	r3, r2, r3
 80049ec:	183a      	adds	r2, r7, r0
 80049ee:	8812      	ldrh	r2, [r2, #0]
 80049f0:	4911      	ldr	r1, [pc, #68]	@ (8004a38 <USB_ActivateEndpoint+0x5dc>)
 80049f2:	430a      	orrs	r2, r1
 80049f4:	b292      	uxth	r2, r2
 80049f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	18d3      	adds	r3, r2, r3
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	2036      	movs	r0, #54	@ 0x36
 8004a08:	183b      	adds	r3, r7, r0
 8004a0a:	4910      	ldr	r1, [pc, #64]	@ (8004a4c <USB_ActivateEndpoint+0x5f0>)
 8004a0c:	400a      	ands	r2, r1
 8004a0e:	801a      	strh	r2, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	18d3      	adds	r3, r2, r3
 8004a1a:	183a      	adds	r2, r7, r0
 8004a1c:	8812      	ldrh	r2, [r2, #0]
 8004a1e:	4906      	ldr	r1, [pc, #24]	@ (8004a38 <USB_ActivateEndpoint+0x5dc>)
 8004a20:	430a      	orrs	r2, r1
 8004a22:	b292      	uxth	r2, r2
 8004a24:	801a      	strh	r2, [r3, #0]
 8004a26:	e0ae      	b.n	8004b86 <USB_ActivateEndpoint+0x72a>
 8004a28:	ffff8000 	.word	0xffff8000
 8004a2c:	ffff8f8f 	.word	0xffff8f8f
 8004a30:	ffffc080 	.word	0xffffc080
 8004a34:	ffffbf8f 	.word	0xffffbf8f
 8004a38:	ffff8080 	.word	0xffff8080
 8004a3c:	ffff8180 	.word	0xffff8180
 8004a40:	ffff8e8f 	.word	0xffff8e8f
 8004a44:	00000404 	.word	0x00000404
 8004a48:	ffff80c0 	.word	0xffff80c0
 8004a4c:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	18d2      	adds	r2, r2, r3
 8004a5a:	214e      	movs	r1, #78	@ 0x4e
 8004a5c:	187b      	adds	r3, r7, r1
 8004a5e:	8812      	ldrh	r2, [r2, #0]
 8004a60:	801a      	strh	r2, [r3, #0]
 8004a62:	187b      	adds	r3, r7, r1
 8004a64:	881a      	ldrh	r2, [r3, #0]
 8004a66:	2380      	movs	r3, #128	@ 0x80
 8004a68:	01db      	lsls	r3, r3, #7
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	d016      	beq.n	8004a9c <USB_ActivateEndpoint+0x640>
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	18d3      	adds	r3, r2, r3
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	204c      	movs	r0, #76	@ 0x4c
 8004a7e:	183b      	adds	r3, r7, r0
 8004a80:	4944      	ldr	r1, [pc, #272]	@ (8004b94 <USB_ActivateEndpoint+0x738>)
 8004a82:	400a      	ands	r2, r1
 8004a84:	801a      	strh	r2, [r3, #0]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	18d3      	adds	r3, r2, r3
 8004a90:	183a      	adds	r2, r7, r0
 8004a92:	8812      	ldrh	r2, [r2, #0]
 8004a94:	4940      	ldr	r1, [pc, #256]	@ (8004b98 <USB_ActivateEndpoint+0x73c>)
 8004a96:	430a      	orrs	r2, r1
 8004a98:	b292      	uxth	r2, r2
 8004a9a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	18d2      	adds	r2, r2, r3
 8004aa6:	214a      	movs	r1, #74	@ 0x4a
 8004aa8:	187b      	adds	r3, r7, r1
 8004aaa:	8812      	ldrh	r2, [r2, #0]
 8004aac:	801a      	strh	r2, [r3, #0]
 8004aae:	187b      	adds	r3, r7, r1
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	2240      	movs	r2, #64	@ 0x40
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	d016      	beq.n	8004ae6 <USB_ActivateEndpoint+0x68a>
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	781b      	ldrb	r3, [r3, #0]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	18d3      	adds	r3, r2, r3
 8004ac2:	881b      	ldrh	r3, [r3, #0]
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	2048      	movs	r0, #72	@ 0x48
 8004ac8:	183b      	adds	r3, r7, r0
 8004aca:	4932      	ldr	r1, [pc, #200]	@ (8004b94 <USB_ActivateEndpoint+0x738>)
 8004acc:	400a      	ands	r2, r1
 8004ace:	801a      	strh	r2, [r3, #0]
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	009b      	lsls	r3, r3, #2
 8004ad8:	18d3      	adds	r3, r2, r3
 8004ada:	183a      	adds	r2, r7, r0
 8004adc:	8812      	ldrh	r2, [r2, #0]
 8004ade:	492f      	ldr	r1, [pc, #188]	@ (8004b9c <USB_ActivateEndpoint+0x740>)
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	b292      	uxth	r2, r2
 8004ae4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	78db      	ldrb	r3, [r3, #3]
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d01d      	beq.n	8004b2a <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	18d3      	adds	r3, r2, r3
 8004af8:	881b      	ldrh	r3, [r3, #0]
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	2044      	movs	r0, #68	@ 0x44
 8004afe:	183b      	adds	r3, r7, r0
 8004b00:	4927      	ldr	r1, [pc, #156]	@ (8004ba0 <USB_ActivateEndpoint+0x744>)
 8004b02:	400a      	ands	r2, r1
 8004b04:	801a      	strh	r2, [r3, #0]
 8004b06:	183b      	adds	r3, r7, r0
 8004b08:	183a      	adds	r2, r7, r0
 8004b0a:	8812      	ldrh	r2, [r2, #0]
 8004b0c:	2120      	movs	r1, #32
 8004b0e:	404a      	eors	r2, r1
 8004b10:	801a      	strh	r2, [r3, #0]
 8004b12:	687a      	ldr	r2, [r7, #4]
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	18d3      	adds	r3, r2, r3
 8004b1c:	183a      	adds	r2, r7, r0
 8004b1e:	8812      	ldrh	r2, [r2, #0]
 8004b20:	4920      	ldr	r1, [pc, #128]	@ (8004ba4 <USB_ActivateEndpoint+0x748>)
 8004b22:	430a      	orrs	r2, r1
 8004b24:	b292      	uxth	r2, r2
 8004b26:	801a      	strh	r2, [r3, #0]
 8004b28:	e016      	b.n	8004b58 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	18d3      	adds	r3, r2, r3
 8004b34:	881b      	ldrh	r3, [r3, #0]
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	2046      	movs	r0, #70	@ 0x46
 8004b3a:	183b      	adds	r3, r7, r0
 8004b3c:	4918      	ldr	r1, [pc, #96]	@ (8004ba0 <USB_ActivateEndpoint+0x744>)
 8004b3e:	400a      	ands	r2, r1
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	781b      	ldrb	r3, [r3, #0]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	18d3      	adds	r3, r2, r3
 8004b4c:	183a      	adds	r2, r7, r0
 8004b4e:	8812      	ldrh	r2, [r2, #0]
 8004b50:	4914      	ldr	r1, [pc, #80]	@ (8004ba4 <USB_ActivateEndpoint+0x748>)
 8004b52:	430a      	orrs	r2, r1
 8004b54:	b292      	uxth	r2, r2
 8004b56:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	18d3      	adds	r3, r2, r3
 8004b62:	881b      	ldrh	r3, [r3, #0]
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	2042      	movs	r0, #66	@ 0x42
 8004b68:	183b      	adds	r3, r7, r0
 8004b6a:	490f      	ldr	r1, [pc, #60]	@ (8004ba8 <USB_ActivateEndpoint+0x74c>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	801a      	strh	r2, [r3, #0]
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	781b      	ldrb	r3, [r3, #0]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	18d3      	adds	r3, r2, r3
 8004b7a:	183a      	adds	r2, r7, r0
 8004b7c:	8812      	ldrh	r2, [r2, #0]
 8004b7e:	4909      	ldr	r1, [pc, #36]	@ (8004ba4 <USB_ActivateEndpoint+0x748>)
 8004b80:	430a      	orrs	r2, r1
 8004b82:	b292      	uxth	r2, r2
 8004b84:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8004b86:	236f      	movs	r3, #111	@ 0x6f
 8004b88:	18fb      	adds	r3, r7, r3
 8004b8a:	781b      	ldrb	r3, [r3, #0]
}
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	b01c      	add	sp, #112	@ 0x70
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	ffff8f8f 	.word	0xffff8f8f
 8004b98:	ffffc080 	.word	0xffffc080
 8004b9c:	ffff80c0 	.word	0xffff80c0
 8004ba0:	ffff8fbf 	.word	0xffff8fbf
 8004ba4:	ffff8080 	.word	0xffff8080
 8004ba8:	ffffbf8f 	.word	0xffffbf8f

08004bac <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	@ 0x30
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	7b1b      	ldrb	r3, [r3, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d000      	beq.n	8004bc0 <USB_DeactivateEndpoint+0x14>
 8004bbe:	e07e      	b.n	8004cbe <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d03c      	beq.n	8004c42 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	18d2      	adds	r2, r2, r3
 8004bd2:	210c      	movs	r1, #12
 8004bd4:	187b      	adds	r3, r7, r1
 8004bd6:	8812      	ldrh	r2, [r2, #0]
 8004bd8:	801a      	strh	r2, [r3, #0]
 8004bda:	187b      	adds	r3, r7, r1
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	2240      	movs	r2, #64	@ 0x40
 8004be0:	4013      	ands	r3, r2
 8004be2:	d016      	beq.n	8004c12 <USB_DeactivateEndpoint+0x66>
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	18d3      	adds	r3, r2, r3
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	200a      	movs	r0, #10
 8004bf4:	183b      	adds	r3, r7, r0
 8004bf6:	49c7      	ldr	r1, [pc, #796]	@ (8004f14 <USB_DeactivateEndpoint+0x368>)
 8004bf8:	400a      	ands	r2, r1
 8004bfa:	801a      	strh	r2, [r3, #0]
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	18d3      	adds	r3, r2, r3
 8004c06:	183a      	adds	r2, r7, r0
 8004c08:	8812      	ldrh	r2, [r2, #0]
 8004c0a:	49c3      	ldr	r1, [pc, #780]	@ (8004f18 <USB_DeactivateEndpoint+0x36c>)
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	b292      	uxth	r2, r2
 8004c10:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	18d3      	adds	r3, r2, r3
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	2008      	movs	r0, #8
 8004c22:	183b      	adds	r3, r7, r0
 8004c24:	49bd      	ldr	r1, [pc, #756]	@ (8004f1c <USB_DeactivateEndpoint+0x370>)
 8004c26:	400a      	ands	r2, r1
 8004c28:	801a      	strh	r2, [r3, #0]
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	18d3      	adds	r3, r2, r3
 8004c34:	183a      	adds	r2, r7, r0
 8004c36:	8812      	ldrh	r2, [r2, #0]
 8004c38:	49b9      	ldr	r1, [pc, #740]	@ (8004f20 <USB_DeactivateEndpoint+0x374>)
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	b292      	uxth	r2, r2
 8004c3e:	801a      	strh	r2, [r3, #0]
 8004c40:	e163      	b.n	8004f0a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	18d2      	adds	r2, r2, r3
 8004c4c:	2112      	movs	r1, #18
 8004c4e:	187b      	adds	r3, r7, r1
 8004c50:	8812      	ldrh	r2, [r2, #0]
 8004c52:	801a      	strh	r2, [r3, #0]
 8004c54:	187b      	adds	r3, r7, r1
 8004c56:	881a      	ldrh	r2, [r3, #0]
 8004c58:	2380      	movs	r3, #128	@ 0x80
 8004c5a:	01db      	lsls	r3, r3, #7
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	d016      	beq.n	8004c8e <USB_DeactivateEndpoint+0xe2>
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	18d3      	adds	r3, r2, r3
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	2010      	movs	r0, #16
 8004c70:	183b      	adds	r3, r7, r0
 8004c72:	49a8      	ldr	r1, [pc, #672]	@ (8004f14 <USB_DeactivateEndpoint+0x368>)
 8004c74:	400a      	ands	r2, r1
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	18d3      	adds	r3, r2, r3
 8004c82:	183a      	adds	r2, r7, r0
 8004c84:	8812      	ldrh	r2, [r2, #0]
 8004c86:	49a7      	ldr	r1, [pc, #668]	@ (8004f24 <USB_DeactivateEndpoint+0x378>)
 8004c88:	430a      	orrs	r2, r1
 8004c8a:	b292      	uxth	r2, r2
 8004c8c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	18d3      	adds	r3, r2, r3
 8004c98:	881b      	ldrh	r3, [r3, #0]
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	200e      	movs	r0, #14
 8004c9e:	183b      	adds	r3, r7, r0
 8004ca0:	49a1      	ldr	r1, [pc, #644]	@ (8004f28 <USB_DeactivateEndpoint+0x37c>)
 8004ca2:	400a      	ands	r2, r1
 8004ca4:	801a      	strh	r2, [r3, #0]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	18d3      	adds	r3, r2, r3
 8004cb0:	183a      	adds	r2, r7, r0
 8004cb2:	8812      	ldrh	r2, [r2, #0]
 8004cb4:	499a      	ldr	r1, [pc, #616]	@ (8004f20 <USB_DeactivateEndpoint+0x374>)
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	b292      	uxth	r2, r2
 8004cba:	801a      	strh	r2, [r3, #0]
 8004cbc:	e125      	b.n	8004f0a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d000      	beq.n	8004cc8 <USB_DeactivateEndpoint+0x11c>
 8004cc6:	e090      	b.n	8004dea <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	18d2      	adds	r2, r2, r3
 8004cd2:	2120      	movs	r1, #32
 8004cd4:	187b      	adds	r3, r7, r1
 8004cd6:	8812      	ldrh	r2, [r2, #0]
 8004cd8:	801a      	strh	r2, [r3, #0]
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	881a      	ldrh	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	@ 0x80
 8004ce0:	01db      	lsls	r3, r3, #7
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d016      	beq.n	8004d14 <USB_DeactivateEndpoint+0x168>
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	18d3      	adds	r3, r2, r3
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	201e      	movs	r0, #30
 8004cf6:	183b      	adds	r3, r7, r0
 8004cf8:	4986      	ldr	r1, [pc, #536]	@ (8004f14 <USB_DeactivateEndpoint+0x368>)
 8004cfa:	400a      	ands	r2, r1
 8004cfc:	801a      	strh	r2, [r3, #0]
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	18d3      	adds	r3, r2, r3
 8004d08:	183a      	adds	r2, r7, r0
 8004d0a:	8812      	ldrh	r2, [r2, #0]
 8004d0c:	4985      	ldr	r1, [pc, #532]	@ (8004f24 <USB_DeactivateEndpoint+0x378>)
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	b292      	uxth	r2, r2
 8004d12:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	18d2      	adds	r2, r2, r3
 8004d1e:	211c      	movs	r1, #28
 8004d20:	187b      	adds	r3, r7, r1
 8004d22:	8812      	ldrh	r2, [r2, #0]
 8004d24:	801a      	strh	r2, [r3, #0]
 8004d26:	187b      	adds	r3, r7, r1
 8004d28:	881b      	ldrh	r3, [r3, #0]
 8004d2a:	2240      	movs	r2, #64	@ 0x40
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	d016      	beq.n	8004d5e <USB_DeactivateEndpoint+0x1b2>
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	18d3      	adds	r3, r2, r3
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	201a      	movs	r0, #26
 8004d40:	183b      	adds	r3, r7, r0
 8004d42:	4974      	ldr	r1, [pc, #464]	@ (8004f14 <USB_DeactivateEndpoint+0x368>)
 8004d44:	400a      	ands	r2, r1
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	781b      	ldrb	r3, [r3, #0]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	18d3      	adds	r3, r2, r3
 8004d52:	183a      	adds	r2, r7, r0
 8004d54:	8812      	ldrh	r2, [r2, #0]
 8004d56:	4970      	ldr	r1, [pc, #448]	@ (8004f18 <USB_DeactivateEndpoint+0x36c>)
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	b292      	uxth	r2, r2
 8004d5c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	781b      	ldrb	r3, [r3, #0]
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	18d3      	adds	r3, r2, r3
 8004d68:	881b      	ldrh	r3, [r3, #0]
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	2018      	movs	r0, #24
 8004d6e:	183b      	adds	r3, r7, r0
 8004d70:	4968      	ldr	r1, [pc, #416]	@ (8004f14 <USB_DeactivateEndpoint+0x368>)
 8004d72:	400a      	ands	r2, r1
 8004d74:	801a      	strh	r2, [r3, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	18d3      	adds	r3, r2, r3
 8004d80:	183a      	adds	r2, r7, r0
 8004d82:	8812      	ldrh	r2, [r2, #0]
 8004d84:	4964      	ldr	r1, [pc, #400]	@ (8004f18 <USB_DeactivateEndpoint+0x36c>)
 8004d86:	430a      	orrs	r2, r1
 8004d88:	b292      	uxth	r2, r2
 8004d8a:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	18d3      	adds	r3, r2, r3
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	2016      	movs	r0, #22
 8004d9c:	183b      	adds	r3, r7, r0
 8004d9e:	4962      	ldr	r1, [pc, #392]	@ (8004f28 <USB_DeactivateEndpoint+0x37c>)
 8004da0:	400a      	ands	r2, r1
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	18d3      	adds	r3, r2, r3
 8004dae:	183a      	adds	r2, r7, r0
 8004db0:	8812      	ldrh	r2, [r2, #0]
 8004db2:	495b      	ldr	r1, [pc, #364]	@ (8004f20 <USB_DeactivateEndpoint+0x374>)
 8004db4:	430a      	orrs	r2, r1
 8004db6:	b292      	uxth	r2, r2
 8004db8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	009b      	lsls	r3, r3, #2
 8004dc2:	18d3      	adds	r3, r2, r3
 8004dc4:	881b      	ldrh	r3, [r3, #0]
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	2014      	movs	r0, #20
 8004dca:	183b      	adds	r3, r7, r0
 8004dcc:	4953      	ldr	r1, [pc, #332]	@ (8004f1c <USB_DeactivateEndpoint+0x370>)
 8004dce:	400a      	ands	r2, r1
 8004dd0:	801a      	strh	r2, [r3, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	18d3      	adds	r3, r2, r3
 8004ddc:	183a      	adds	r2, r7, r0
 8004dde:	8812      	ldrh	r2, [r2, #0]
 8004de0:	494f      	ldr	r1, [pc, #316]	@ (8004f20 <USB_DeactivateEndpoint+0x374>)
 8004de2:	430a      	orrs	r2, r1
 8004de4:	b292      	uxth	r2, r2
 8004de6:	801a      	strh	r2, [r3, #0]
 8004de8:	e08f      	b.n	8004f0a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	18d2      	adds	r2, r2, r3
 8004df4:	212e      	movs	r1, #46	@ 0x2e
 8004df6:	187b      	adds	r3, r7, r1
 8004df8:	8812      	ldrh	r2, [r2, #0]
 8004dfa:	801a      	strh	r2, [r3, #0]
 8004dfc:	187b      	adds	r3, r7, r1
 8004dfe:	881a      	ldrh	r2, [r3, #0]
 8004e00:	2380      	movs	r3, #128	@ 0x80
 8004e02:	01db      	lsls	r3, r3, #7
 8004e04:	4013      	ands	r3, r2
 8004e06:	d016      	beq.n	8004e36 <USB_DeactivateEndpoint+0x28a>
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	18d3      	adds	r3, r2, r3
 8004e12:	881b      	ldrh	r3, [r3, #0]
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	202c      	movs	r0, #44	@ 0x2c
 8004e18:	183b      	adds	r3, r7, r0
 8004e1a:	493e      	ldr	r1, [pc, #248]	@ (8004f14 <USB_DeactivateEndpoint+0x368>)
 8004e1c:	400a      	ands	r2, r1
 8004e1e:	801a      	strh	r2, [r3, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	18d3      	adds	r3, r2, r3
 8004e2a:	183a      	adds	r2, r7, r0
 8004e2c:	8812      	ldrh	r2, [r2, #0]
 8004e2e:	493d      	ldr	r1, [pc, #244]	@ (8004f24 <USB_DeactivateEndpoint+0x378>)
 8004e30:	430a      	orrs	r2, r1
 8004e32:	b292      	uxth	r2, r2
 8004e34:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	18d2      	adds	r2, r2, r3
 8004e40:	212a      	movs	r1, #42	@ 0x2a
 8004e42:	187b      	adds	r3, r7, r1
 8004e44:	8812      	ldrh	r2, [r2, #0]
 8004e46:	801a      	strh	r2, [r3, #0]
 8004e48:	187b      	adds	r3, r7, r1
 8004e4a:	881b      	ldrh	r3, [r3, #0]
 8004e4c:	2240      	movs	r2, #64	@ 0x40
 8004e4e:	4013      	ands	r3, r2
 8004e50:	d016      	beq.n	8004e80 <USB_DeactivateEndpoint+0x2d4>
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	18d3      	adds	r3, r2, r3
 8004e5c:	881b      	ldrh	r3, [r3, #0]
 8004e5e:	b29a      	uxth	r2, r3
 8004e60:	2028      	movs	r0, #40	@ 0x28
 8004e62:	183b      	adds	r3, r7, r0
 8004e64:	492b      	ldr	r1, [pc, #172]	@ (8004f14 <USB_DeactivateEndpoint+0x368>)
 8004e66:	400a      	ands	r2, r1
 8004e68:	801a      	strh	r2, [r3, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	18d3      	adds	r3, r2, r3
 8004e74:	183a      	adds	r2, r7, r0
 8004e76:	8812      	ldrh	r2, [r2, #0]
 8004e78:	4927      	ldr	r1, [pc, #156]	@ (8004f18 <USB_DeactivateEndpoint+0x36c>)
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	b292      	uxth	r2, r2
 8004e7e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	18d3      	adds	r3, r2, r3
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29a      	uxth	r2, r3
 8004e8e:	2026      	movs	r0, #38	@ 0x26
 8004e90:	183b      	adds	r3, r7, r0
 8004e92:	4920      	ldr	r1, [pc, #128]	@ (8004f14 <USB_DeactivateEndpoint+0x368>)
 8004e94:	400a      	ands	r2, r1
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	18d3      	adds	r3, r2, r3
 8004ea2:	183a      	adds	r2, r7, r0
 8004ea4:	8812      	ldrh	r2, [r2, #0]
 8004ea6:	491f      	ldr	r1, [pc, #124]	@ (8004f24 <USB_DeactivateEndpoint+0x378>)
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	b292      	uxth	r2, r2
 8004eac:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	18d3      	adds	r3, r2, r3
 8004eb8:	881b      	ldrh	r3, [r3, #0]
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	2024      	movs	r0, #36	@ 0x24
 8004ebe:	183b      	adds	r3, r7, r0
 8004ec0:	4916      	ldr	r1, [pc, #88]	@ (8004f1c <USB_DeactivateEndpoint+0x370>)
 8004ec2:	400a      	ands	r2, r1
 8004ec4:	801a      	strh	r2, [r3, #0]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	18d3      	adds	r3, r2, r3
 8004ed0:	183a      	adds	r2, r7, r0
 8004ed2:	8812      	ldrh	r2, [r2, #0]
 8004ed4:	4912      	ldr	r1, [pc, #72]	@ (8004f20 <USB_DeactivateEndpoint+0x374>)
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	b292      	uxth	r2, r2
 8004eda:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	781b      	ldrb	r3, [r3, #0]
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29a      	uxth	r2, r3
 8004eea:	2022      	movs	r0, #34	@ 0x22
 8004eec:	183b      	adds	r3, r7, r0
 8004eee:	490e      	ldr	r1, [pc, #56]	@ (8004f28 <USB_DeactivateEndpoint+0x37c>)
 8004ef0:	400a      	ands	r2, r1
 8004ef2:	801a      	strh	r2, [r3, #0]
 8004ef4:	687a      	ldr	r2, [r7, #4]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	18d3      	adds	r3, r2, r3
 8004efe:	183a      	adds	r2, r7, r0
 8004f00:	8812      	ldrh	r2, [r2, #0]
 8004f02:	4907      	ldr	r1, [pc, #28]	@ (8004f20 <USB_DeactivateEndpoint+0x374>)
 8004f04:	430a      	orrs	r2, r1
 8004f06:	b292      	uxth	r2, r2
 8004f08:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b00c      	add	sp, #48	@ 0x30
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	ffff8f8f 	.word	0xffff8f8f
 8004f18:	ffff80c0 	.word	0xffff80c0
 8004f1c:	ffff8fbf 	.word	0xffff8fbf
 8004f20:	ffff8080 	.word	0xffff8080
 8004f24:	ffffc080 	.word	0xffffc080
 8004f28:	ffffbf8f 	.word	0xffffbf8f

08004f2c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b0c3      	sub	sp, #268	@ 0x10c
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	785b      	ldrb	r3, [r3, #1]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d001      	beq.n	8004f42 <USB_EPStartXfer+0x16>
 8004f3e:	f000 fd2d 	bl	800599c <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d905      	bls.n	8004f5a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	1d7a      	adds	r2, r7, #5
 8004f54:	32ff      	adds	r2, #255	@ 0xff
 8004f56:	6013      	str	r3, [r2, #0]
 8004f58:	e004      	b.n	8004f64 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	1d7a      	adds	r2, r7, #5
 8004f60:	32ff      	adds	r2, #255	@ 0xff
 8004f62:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	7b1b      	ldrb	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d125      	bne.n	8004fb8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	6959      	ldr	r1, [r3, #20]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	88da      	ldrh	r2, [r3, #6]
 8004f74:	1d7b      	adds	r3, r7, #5
 8004f76:	33ff      	adds	r3, #255	@ 0xff
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fa3f 	bl	8006400 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	613b      	str	r3, [r7, #16]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2250      	movs	r2, #80	@ 0x50
 8004f8a:	5a9b      	ldrh	r3, [r3, r2]
 8004f8c:	b29b      	uxth	r3, r3
 8004f8e:	001a      	movs	r2, r3
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	00da      	lsls	r2, r3, #3
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	18d3      	adds	r3, r2, r3
 8004fa0:	4ad7      	ldr	r2, [pc, #860]	@ (8005300 <USB_EPStartXfer+0x3d4>)
 8004fa2:	4694      	mov	ip, r2
 8004fa4:	4463      	add	r3, ip
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	1d7b      	adds	r3, r7, #5
 8004faa:	33ff      	adds	r3, #255	@ 0xff
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	801a      	strh	r2, [r3, #0]
 8004fb4:	f000 fccd 	bl	8005952 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	78db      	ldrb	r3, [r3, #3]
 8004fbc:	2b02      	cmp	r3, #2
 8004fbe:	d000      	beq.n	8004fc2 <USB_EPStartXfer+0x96>
 8004fc0:	e362      	b.n	8005688 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6a1a      	ldr	r2, [r3, #32]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d800      	bhi.n	8004fd0 <USB_EPStartXfer+0xa4>
 8004fce:	e309      	b.n	80055e4 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	18d3      	adds	r3, r2, r3
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	2056      	movs	r0, #86	@ 0x56
 8004fe0:	183b      	adds	r3, r7, r0
 8004fe2:	49c8      	ldr	r1, [pc, #800]	@ (8005304 <USB_EPStartXfer+0x3d8>)
 8004fe4:	400a      	ands	r2, r1
 8004fe6:	801a      	strh	r2, [r3, #0]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	18d3      	adds	r3, r2, r3
 8004ff2:	183a      	adds	r2, r7, r0
 8004ff4:	8812      	ldrh	r2, [r2, #0]
 8004ff6:	49c4      	ldr	r1, [pc, #784]	@ (8005308 <USB_EPStartXfer+0x3dc>)
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	b292      	uxth	r2, r2
 8004ffc:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6a1a      	ldr	r2, [r3, #32]
 8005002:	1d7b      	adds	r3, r7, #5
 8005004:	33ff      	adds	r3, #255	@ 0xff
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	1ad2      	subs	r2, r2, r3
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800500e:	687a      	ldr	r2, [r7, #4]
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	18d3      	adds	r3, r2, r3
 8005018:	881b      	ldrh	r3, [r3, #0]
 800501a:	b29b      	uxth	r3, r3
 800501c:	001a      	movs	r2, r3
 800501e:	2340      	movs	r3, #64	@ 0x40
 8005020:	4013      	ands	r3, r2
 8005022:	d100      	bne.n	8005026 <USB_EPStartXfer+0xfa>
 8005024:	e176      	b.n	8005314 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	633b      	str	r3, [r7, #48]	@ 0x30
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	785b      	ldrb	r3, [r3, #1]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d000      	beq.n	8005034 <USB_EPStartXfer+0x108>
 8005032:	e074      	b.n	800511e <USB_EPStartXfer+0x1f2>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2250      	movs	r2, #80	@ 0x50
 800503c:	5a9b      	ldrh	r3, [r3, r2]
 800503e:	b29b      	uxth	r3, r3
 8005040:	001a      	movs	r2, r3
 8005042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005044:	189b      	adds	r3, r3, r2
 8005046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	00da      	lsls	r2, r3, #3
 800504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005050:	18d3      	adds	r3, r2, r3
 8005052:	4aae      	ldr	r2, [pc, #696]	@ (800530c <USB_EPStartXfer+0x3e0>)
 8005054:	4694      	mov	ip, r2
 8005056:	4463      	add	r3, ip
 8005058:	627b      	str	r3, [r7, #36]	@ 0x24
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	881b      	ldrh	r3, [r3, #0]
 800505e:	b29b      	uxth	r3, r3
 8005060:	059b      	lsls	r3, r3, #22
 8005062:	0d9b      	lsrs	r3, r3, #22
 8005064:	b29a      	uxth	r2, r3
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	801a      	strh	r2, [r3, #0]
 800506a:	1d7b      	adds	r3, r7, #5
 800506c:	33ff      	adds	r3, #255	@ 0xff
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d108      	bne.n	8005086 <USB_EPStartXfer+0x15a>
 8005074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	b29b      	uxth	r3, r3
 800507a:	4aa5      	ldr	r2, [pc, #660]	@ (8005310 <USB_EPStartXfer+0x3e4>)
 800507c:	4313      	orrs	r3, r2
 800507e:	b29a      	uxth	r2, r3
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	801a      	strh	r2, [r3, #0]
 8005084:	e066      	b.n	8005154 <USB_EPStartXfer+0x228>
 8005086:	1d7b      	adds	r3, r7, #5
 8005088:	33ff      	adds	r3, #255	@ 0xff
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b3e      	cmp	r3, #62	@ 0x3e
 800508e:	d821      	bhi.n	80050d4 <USB_EPStartXfer+0x1a8>
 8005090:	1d7b      	adds	r3, r7, #5
 8005092:	33ff      	adds	r3, #255	@ 0xff
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	085b      	lsrs	r3, r3, #1
 8005098:	1c7a      	adds	r2, r7, #1
 800509a:	32ff      	adds	r2, #255	@ 0xff
 800509c:	6013      	str	r3, [r2, #0]
 800509e:	1d7b      	adds	r3, r7, #5
 80050a0:	33ff      	adds	r3, #255	@ 0xff
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	4013      	ands	r3, r2
 80050a8:	d006      	beq.n	80050b8 <USB_EPStartXfer+0x18c>
 80050aa:	1c7b      	adds	r3, r7, #1
 80050ac:	33ff      	adds	r3, #255	@ 0xff
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3301      	adds	r3, #1
 80050b2:	1c7a      	adds	r2, r7, #1
 80050b4:	32ff      	adds	r2, #255	@ 0xff
 80050b6:	6013      	str	r3, [r2, #0]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ba:	881b      	ldrh	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	1c7b      	adds	r3, r7, #1
 80050c0:	33ff      	adds	r3, #255	@ 0xff
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	029b      	lsls	r3, r3, #10
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4313      	orrs	r3, r2
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	801a      	strh	r2, [r3, #0]
 80050d2:	e03f      	b.n	8005154 <USB_EPStartXfer+0x228>
 80050d4:	1d7b      	adds	r3, r7, #5
 80050d6:	33ff      	adds	r3, #255	@ 0xff
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	1c7a      	adds	r2, r7, #1
 80050de:	32ff      	adds	r2, #255	@ 0xff
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	1d7b      	adds	r3, r7, #5
 80050e4:	33ff      	adds	r3, #255	@ 0xff
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	221f      	movs	r2, #31
 80050ea:	4013      	ands	r3, r2
 80050ec:	d106      	bne.n	80050fc <USB_EPStartXfer+0x1d0>
 80050ee:	1c7b      	adds	r3, r7, #1
 80050f0:	33ff      	adds	r3, #255	@ 0xff
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	1c7a      	adds	r2, r7, #1
 80050f8:	32ff      	adds	r2, #255	@ 0xff
 80050fa:	6013      	str	r3, [r2, #0]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29a      	uxth	r2, r3
 8005102:	1c7b      	adds	r3, r7, #1
 8005104:	33ff      	adds	r3, #255	@ 0xff
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	b29b      	uxth	r3, r3
 800510a:	029b      	lsls	r3, r3, #10
 800510c:	b29b      	uxth	r3, r3
 800510e:	4313      	orrs	r3, r2
 8005110:	b29b      	uxth	r3, r3
 8005112:	4a7f      	ldr	r2, [pc, #508]	@ (8005310 <USB_EPStartXfer+0x3e4>)
 8005114:	4313      	orrs	r3, r2
 8005116:	b29a      	uxth	r2, r3
 8005118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511a:	801a      	strh	r2, [r3, #0]
 800511c:	e01a      	b.n	8005154 <USB_EPStartXfer+0x228>
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	2b01      	cmp	r3, #1
 8005124:	d116      	bne.n	8005154 <USB_EPStartXfer+0x228>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2250      	movs	r2, #80	@ 0x50
 800512a:	5a9b      	ldrh	r3, [r3, r2]
 800512c:	b29b      	uxth	r3, r3
 800512e:	001a      	movs	r2, r3
 8005130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005132:	189b      	adds	r3, r3, r2
 8005134:	633b      	str	r3, [r7, #48]	@ 0x30
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	00da      	lsls	r2, r3, #3
 800513c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513e:	18d3      	adds	r3, r2, r3
 8005140:	4a72      	ldr	r2, [pc, #456]	@ (800530c <USB_EPStartXfer+0x3e0>)
 8005142:	4694      	mov	ip, r2
 8005144:	4463      	add	r3, ip
 8005146:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005148:	1d7b      	adds	r3, r7, #5
 800514a:	33ff      	adds	r3, #255	@ 0xff
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	b29a      	uxth	r2, r3
 8005150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005152:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005154:	2076      	movs	r0, #118	@ 0x76
 8005156:	183b      	adds	r3, r7, r0
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	8952      	ldrh	r2, [r2, #10]
 800515c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6959      	ldr	r1, [r3, #20]
 8005162:	1d7b      	adds	r3, r7, #5
 8005164:	33ff      	adds	r3, #255	@ 0xff
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	b29c      	uxth	r4, r3
 800516a:	183b      	adds	r3, r7, r0
 800516c:	881a      	ldrh	r2, [r3, #0]
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	0023      	movs	r3, r4
 8005172:	f001 f945 	bl	8006400 <USB_WritePMA>
            ep->xfer_buff += len;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	1d7b      	adds	r3, r7, #5
 800517c:	33ff      	adds	r3, #255	@ 0xff
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	18d2      	adds	r2, r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6a1a      	ldr	r2, [r3, #32]
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	429a      	cmp	r2, r3
 8005190:	d908      	bls.n	80051a4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	6a1a      	ldr	r2, [r3, #32]
 8005196:	1d7b      	adds	r3, r7, #5
 8005198:	33ff      	adds	r3, #255	@ 0xff
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	1ad2      	subs	r2, r2, r3
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	621a      	str	r2, [r3, #32]
 80051a2:	e007      	b.n	80051b4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	6a1b      	ldr	r3, [r3, #32]
 80051a8:	1d7a      	adds	r2, r7, #5
 80051aa:	32ff      	adds	r2, #255	@ 0xff
 80051ac:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2200      	movs	r2, #0
 80051b2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	785b      	ldrb	r3, [r3, #1]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d000      	beq.n	80051be <USB_EPStartXfer+0x292>
 80051bc:	e070      	b.n	80052a0 <USB_EPStartXfer+0x374>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2250      	movs	r2, #80	@ 0x50
 80051c6:	5a9b      	ldrh	r3, [r3, r2]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	001a      	movs	r2, r3
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	189b      	adds	r3, r3, r2
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	00da      	lsls	r2, r3, #3
 80051d8:	69bb      	ldr	r3, [r7, #24]
 80051da:	18d3      	adds	r3, r2, r3
 80051dc:	4a48      	ldr	r2, [pc, #288]	@ (8005300 <USB_EPStartXfer+0x3d4>)
 80051de:	4694      	mov	ip, r2
 80051e0:	4463      	add	r3, ip
 80051e2:	617b      	str	r3, [r7, #20]
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	059b      	lsls	r3, r3, #22
 80051ec:	0d9b      	lsrs	r3, r3, #22
 80051ee:	b29a      	uxth	r2, r3
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	801a      	strh	r2, [r3, #0]
 80051f4:	1d7b      	adds	r3, r7, #5
 80051f6:	33ff      	adds	r3, #255	@ 0xff
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d108      	bne.n	8005210 <USB_EPStartXfer+0x2e4>
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	4a42      	ldr	r2, [pc, #264]	@ (8005310 <USB_EPStartXfer+0x3e4>)
 8005206:	4313      	orrs	r3, r2
 8005208:	b29a      	uxth	r2, r3
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	801a      	strh	r2, [r3, #0]
 800520e:	e064      	b.n	80052da <USB_EPStartXfer+0x3ae>
 8005210:	1d7b      	adds	r3, r7, #5
 8005212:	33ff      	adds	r3, #255	@ 0xff
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b3e      	cmp	r3, #62	@ 0x3e
 8005218:	d81f      	bhi.n	800525a <USB_EPStartXfer+0x32e>
 800521a:	1d7b      	adds	r3, r7, #5
 800521c:	33ff      	adds	r3, #255	@ 0xff
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	085b      	lsrs	r3, r3, #1
 8005222:	21fc      	movs	r1, #252	@ 0xfc
 8005224:	187a      	adds	r2, r7, r1
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	1d7b      	adds	r3, r7, #5
 800522a:	33ff      	adds	r3, #255	@ 0xff
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2201      	movs	r2, #1
 8005230:	4013      	ands	r3, r2
 8005232:	d004      	beq.n	800523e <USB_EPStartXfer+0x312>
 8005234:	187b      	adds	r3, r7, r1
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	3301      	adds	r3, #1
 800523a:	187a      	adds	r2, r7, r1
 800523c:	6013      	str	r3, [r2, #0]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	881b      	ldrh	r3, [r3, #0]
 8005242:	b29a      	uxth	r2, r3
 8005244:	23fc      	movs	r3, #252	@ 0xfc
 8005246:	18fb      	adds	r3, r7, r3
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	029b      	lsls	r3, r3, #10
 800524e:	b29b      	uxth	r3, r3
 8005250:	4313      	orrs	r3, r2
 8005252:	b29a      	uxth	r2, r3
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	801a      	strh	r2, [r3, #0]
 8005258:	e03f      	b.n	80052da <USB_EPStartXfer+0x3ae>
 800525a:	1d7b      	adds	r3, r7, #5
 800525c:	33ff      	adds	r3, #255	@ 0xff
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	21fc      	movs	r1, #252	@ 0xfc
 8005264:	187a      	adds	r2, r7, r1
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	1d7b      	adds	r3, r7, #5
 800526a:	33ff      	adds	r3, #255	@ 0xff
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	221f      	movs	r2, #31
 8005270:	4013      	ands	r3, r2
 8005272:	d104      	bne.n	800527e <USB_EPStartXfer+0x352>
 8005274:	187b      	adds	r3, r7, r1
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3b01      	subs	r3, #1
 800527a:	187a      	adds	r2, r7, r1
 800527c:	6013      	str	r3, [r2, #0]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	881b      	ldrh	r3, [r3, #0]
 8005282:	b29a      	uxth	r2, r3
 8005284:	23fc      	movs	r3, #252	@ 0xfc
 8005286:	18fb      	adds	r3, r7, r3
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	b29b      	uxth	r3, r3
 800528c:	029b      	lsls	r3, r3, #10
 800528e:	b29b      	uxth	r3, r3
 8005290:	4313      	orrs	r3, r2
 8005292:	b29b      	uxth	r3, r3
 8005294:	4a1e      	ldr	r2, [pc, #120]	@ (8005310 <USB_EPStartXfer+0x3e4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	b29a      	uxth	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	801a      	strh	r2, [r3, #0]
 800529e:	e01c      	b.n	80052da <USB_EPStartXfer+0x3ae>
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	785b      	ldrb	r3, [r3, #1]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d118      	bne.n	80052da <USB_EPStartXfer+0x3ae>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	623b      	str	r3, [r7, #32]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2250      	movs	r2, #80	@ 0x50
 80052b0:	5a9b      	ldrh	r3, [r3, r2]
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	001a      	movs	r2, r3
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	189b      	adds	r3, r3, r2
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	00da      	lsls	r2, r3, #3
 80052c2:	6a3b      	ldr	r3, [r7, #32]
 80052c4:	18d3      	adds	r3, r2, r3
 80052c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005300 <USB_EPStartXfer+0x3d4>)
 80052c8:	4694      	mov	ip, r2
 80052ca:	4463      	add	r3, ip
 80052cc:	61fb      	str	r3, [r7, #28]
 80052ce:	1d7b      	adds	r3, r7, #5
 80052d0:	33ff      	adds	r3, #255	@ 0xff
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052da:	2076      	movs	r0, #118	@ 0x76
 80052dc:	183b      	adds	r3, r7, r0
 80052de:	683a      	ldr	r2, [r7, #0]
 80052e0:	8912      	ldrh	r2, [r2, #8]
 80052e2:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	6959      	ldr	r1, [r3, #20]
 80052e8:	1d7b      	adds	r3, r7, #5
 80052ea:	33ff      	adds	r3, #255	@ 0xff
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	b29c      	uxth	r4, r3
 80052f0:	183b      	adds	r3, r7, r0
 80052f2:	881a      	ldrh	r2, [r3, #0]
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	0023      	movs	r3, r4
 80052f8:	f001 f882 	bl	8006400 <USB_WritePMA>
 80052fc:	e329      	b.n	8005952 <USB_EPStartXfer+0xa26>
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	00000402 	.word	0x00000402
 8005304:	ffff8f8f 	.word	0xffff8f8f
 8005308:	ffff8180 	.word	0xffff8180
 800530c:	00000406 	.word	0x00000406
 8005310:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	785b      	ldrb	r3, [r3, #1]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d000      	beq.n	800531e <USB_EPStartXfer+0x3f2>
 800531c:	e070      	b.n	8005400 <USB_EPStartXfer+0x4d4>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2250      	movs	r2, #80	@ 0x50
 8005326:	5a9b      	ldrh	r3, [r3, r2]
 8005328:	b29b      	uxth	r3, r3
 800532a:	001a      	movs	r2, r3
 800532c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800532e:	189b      	adds	r3, r3, r2
 8005330:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	781b      	ldrb	r3, [r3, #0]
 8005336:	00da      	lsls	r2, r3, #3
 8005338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800533a:	18d3      	adds	r3, r2, r3
 800533c:	4acd      	ldr	r2, [pc, #820]	@ (8005674 <USB_EPStartXfer+0x748>)
 800533e:	4694      	mov	ip, r2
 8005340:	4463      	add	r3, ip
 8005342:	647b      	str	r3, [r7, #68]	@ 0x44
 8005344:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005346:	881b      	ldrh	r3, [r3, #0]
 8005348:	b29b      	uxth	r3, r3
 800534a:	059b      	lsls	r3, r3, #22
 800534c:	0d9b      	lsrs	r3, r3, #22
 800534e:	b29a      	uxth	r2, r3
 8005350:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005352:	801a      	strh	r2, [r3, #0]
 8005354:	1d7b      	adds	r3, r7, #5
 8005356:	33ff      	adds	r3, #255	@ 0xff
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d108      	bne.n	8005370 <USB_EPStartXfer+0x444>
 800535e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	b29b      	uxth	r3, r3
 8005364:	4ac4      	ldr	r2, [pc, #784]	@ (8005678 <USB_EPStartXfer+0x74c>)
 8005366:	4313      	orrs	r3, r2
 8005368:	b29a      	uxth	r2, r3
 800536a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800536c:	801a      	strh	r2, [r3, #0]
 800536e:	e064      	b.n	800543a <USB_EPStartXfer+0x50e>
 8005370:	1d7b      	adds	r3, r7, #5
 8005372:	33ff      	adds	r3, #255	@ 0xff
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b3e      	cmp	r3, #62	@ 0x3e
 8005378:	d81f      	bhi.n	80053ba <USB_EPStartXfer+0x48e>
 800537a:	1d7b      	adds	r3, r7, #5
 800537c:	33ff      	adds	r3, #255	@ 0xff
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	21f8      	movs	r1, #248	@ 0xf8
 8005384:	187a      	adds	r2, r7, r1
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	1d7b      	adds	r3, r7, #5
 800538a:	33ff      	adds	r3, #255	@ 0xff
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2201      	movs	r2, #1
 8005390:	4013      	ands	r3, r2
 8005392:	d004      	beq.n	800539e <USB_EPStartXfer+0x472>
 8005394:	187b      	adds	r3, r7, r1
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3301      	adds	r3, #1
 800539a:	187a      	adds	r2, r7, r1
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053a0:	881b      	ldrh	r3, [r3, #0]
 80053a2:	b29a      	uxth	r2, r3
 80053a4:	23f8      	movs	r3, #248	@ 0xf8
 80053a6:	18fb      	adds	r3, r7, r3
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	029b      	lsls	r3, r3, #10
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	4313      	orrs	r3, r2
 80053b2:	b29a      	uxth	r2, r3
 80053b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053b6:	801a      	strh	r2, [r3, #0]
 80053b8:	e03f      	b.n	800543a <USB_EPStartXfer+0x50e>
 80053ba:	1d7b      	adds	r3, r7, #5
 80053bc:	33ff      	adds	r3, #255	@ 0xff
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	095b      	lsrs	r3, r3, #5
 80053c2:	21f8      	movs	r1, #248	@ 0xf8
 80053c4:	187a      	adds	r2, r7, r1
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	1d7b      	adds	r3, r7, #5
 80053ca:	33ff      	adds	r3, #255	@ 0xff
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	221f      	movs	r2, #31
 80053d0:	4013      	ands	r3, r2
 80053d2:	d104      	bne.n	80053de <USB_EPStartXfer+0x4b2>
 80053d4:	187b      	adds	r3, r7, r1
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3b01      	subs	r3, #1
 80053da:	187a      	adds	r2, r7, r1
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053e0:	881b      	ldrh	r3, [r3, #0]
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	23f8      	movs	r3, #248	@ 0xf8
 80053e6:	18fb      	adds	r3, r7, r3
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	029b      	lsls	r3, r3, #10
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	4313      	orrs	r3, r2
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	4aa0      	ldr	r2, [pc, #640]	@ (8005678 <USB_EPStartXfer+0x74c>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fc:	801a      	strh	r2, [r3, #0]
 80053fe:	e01c      	b.n	800543a <USB_EPStartXfer+0x50e>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	785b      	ldrb	r3, [r3, #1]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d118      	bne.n	800543a <USB_EPStartXfer+0x50e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	653b      	str	r3, [r7, #80]	@ 0x50
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2250      	movs	r2, #80	@ 0x50
 8005410:	5a9b      	ldrh	r3, [r3, r2]
 8005412:	b29b      	uxth	r3, r3
 8005414:	001a      	movs	r2, r3
 8005416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005418:	189b      	adds	r3, r3, r2
 800541a:	653b      	str	r3, [r7, #80]	@ 0x50
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	00da      	lsls	r2, r3, #3
 8005422:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005424:	18d3      	adds	r3, r2, r3
 8005426:	4a93      	ldr	r2, [pc, #588]	@ (8005674 <USB_EPStartXfer+0x748>)
 8005428:	4694      	mov	ip, r2
 800542a:	4463      	add	r3, ip
 800542c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800542e:	1d7b      	adds	r3, r7, #5
 8005430:	33ff      	adds	r3, #255	@ 0xff
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	b29a      	uxth	r2, r3
 8005436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005438:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800543a:	2076      	movs	r0, #118	@ 0x76
 800543c:	183b      	adds	r3, r7, r0
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	8912      	ldrh	r2, [r2, #8]
 8005442:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	6959      	ldr	r1, [r3, #20]
 8005448:	1d7b      	adds	r3, r7, #5
 800544a:	33ff      	adds	r3, #255	@ 0xff
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	b29c      	uxth	r4, r3
 8005450:	183b      	adds	r3, r7, r0
 8005452:	881a      	ldrh	r2, [r3, #0]
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	0023      	movs	r3, r4
 8005458:	f000 ffd2 	bl	8006400 <USB_WritePMA>
            ep->xfer_buff += len;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	695a      	ldr	r2, [r3, #20]
 8005460:	1d7b      	adds	r3, r7, #5
 8005462:	33ff      	adds	r3, #255	@ 0xff
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	18d2      	adds	r2, r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	6a1a      	ldr	r2, [r3, #32]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	429a      	cmp	r2, r3
 8005476:	d908      	bls.n	800548a <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	6a1a      	ldr	r2, [r3, #32]
 800547c:	1d7b      	adds	r3, r7, #5
 800547e:	33ff      	adds	r3, #255	@ 0xff
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	1ad2      	subs	r2, r2, r3
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	621a      	str	r2, [r3, #32]
 8005488:	e007      	b.n	800549a <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	1d7a      	adds	r2, r7, #5
 8005490:	32ff      	adds	r2, #255	@ 0xff
 8005492:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	643b      	str	r3, [r7, #64]	@ 0x40
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	785b      	ldrb	r3, [r3, #1]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d000      	beq.n	80054a8 <USB_EPStartXfer+0x57c>
 80054a6:	e070      	b.n	800558a <USB_EPStartXfer+0x65e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2250      	movs	r2, #80	@ 0x50
 80054b0:	5a9b      	ldrh	r3, [r3, r2]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	001a      	movs	r2, r3
 80054b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b8:	189b      	adds	r3, r3, r2
 80054ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	00da      	lsls	r2, r3, #3
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	18d3      	adds	r3, r2, r3
 80054c6:	4a6d      	ldr	r2, [pc, #436]	@ (800567c <USB_EPStartXfer+0x750>)
 80054c8:	4694      	mov	ip, r2
 80054ca:	4463      	add	r3, ip
 80054cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	059b      	lsls	r3, r3, #22
 80054d6:	0d9b      	lsrs	r3, r3, #22
 80054d8:	b29a      	uxth	r2, r3
 80054da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054dc:	801a      	strh	r2, [r3, #0]
 80054de:	1d7b      	adds	r3, r7, #5
 80054e0:	33ff      	adds	r3, #255	@ 0xff
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d108      	bne.n	80054fa <USB_EPStartXfer+0x5ce>
 80054e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ea:	881b      	ldrh	r3, [r3, #0]
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	4a62      	ldr	r2, [pc, #392]	@ (8005678 <USB_EPStartXfer+0x74c>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	b29a      	uxth	r2, r3
 80054f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054f6:	801a      	strh	r2, [r3, #0]
 80054f8:	e062      	b.n	80055c0 <USB_EPStartXfer+0x694>
 80054fa:	1d7b      	adds	r3, r7, #5
 80054fc:	33ff      	adds	r3, #255	@ 0xff
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b3e      	cmp	r3, #62	@ 0x3e
 8005502:	d81f      	bhi.n	8005544 <USB_EPStartXfer+0x618>
 8005504:	1d7b      	adds	r3, r7, #5
 8005506:	33ff      	adds	r3, #255	@ 0xff
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	085b      	lsrs	r3, r3, #1
 800550c:	21f4      	movs	r1, #244	@ 0xf4
 800550e:	187a      	adds	r2, r7, r1
 8005510:	6013      	str	r3, [r2, #0]
 8005512:	1d7b      	adds	r3, r7, #5
 8005514:	33ff      	adds	r3, #255	@ 0xff
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2201      	movs	r2, #1
 800551a:	4013      	ands	r3, r2
 800551c:	d004      	beq.n	8005528 <USB_EPStartXfer+0x5fc>
 800551e:	187b      	adds	r3, r7, r1
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3301      	adds	r3, #1
 8005524:	187a      	adds	r2, r7, r1
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29a      	uxth	r2, r3
 800552e:	23f4      	movs	r3, #244	@ 0xf4
 8005530:	18fb      	adds	r3, r7, r3
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	b29b      	uxth	r3, r3
 8005536:	029b      	lsls	r3, r3, #10
 8005538:	b29b      	uxth	r3, r3
 800553a:	4313      	orrs	r3, r2
 800553c:	b29a      	uxth	r2, r3
 800553e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005540:	801a      	strh	r2, [r3, #0]
 8005542:	e03d      	b.n	80055c0 <USB_EPStartXfer+0x694>
 8005544:	1d7b      	adds	r3, r7, #5
 8005546:	33ff      	adds	r3, #255	@ 0xff
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	21f4      	movs	r1, #244	@ 0xf4
 800554e:	187a      	adds	r2, r7, r1
 8005550:	6013      	str	r3, [r2, #0]
 8005552:	1d7b      	adds	r3, r7, #5
 8005554:	33ff      	adds	r3, #255	@ 0xff
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	221f      	movs	r2, #31
 800555a:	4013      	ands	r3, r2
 800555c:	d104      	bne.n	8005568 <USB_EPStartXfer+0x63c>
 800555e:	187b      	adds	r3, r7, r1
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3b01      	subs	r3, #1
 8005564:	187a      	adds	r2, r7, r1
 8005566:	6013      	str	r3, [r2, #0]
 8005568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29a      	uxth	r2, r3
 800556e:	23f4      	movs	r3, #244	@ 0xf4
 8005570:	18fb      	adds	r3, r7, r3
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	b29b      	uxth	r3, r3
 8005576:	029b      	lsls	r3, r3, #10
 8005578:	b29b      	uxth	r3, r3
 800557a:	4313      	orrs	r3, r2
 800557c:	b29b      	uxth	r3, r3
 800557e:	4a3e      	ldr	r2, [pc, #248]	@ (8005678 <USB_EPStartXfer+0x74c>)
 8005580:	4313      	orrs	r3, r2
 8005582:	b29a      	uxth	r2, r3
 8005584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e01a      	b.n	80055c0 <USB_EPStartXfer+0x694>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	785b      	ldrb	r3, [r3, #1]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d116      	bne.n	80055c0 <USB_EPStartXfer+0x694>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2250      	movs	r2, #80	@ 0x50
 8005596:	5a9b      	ldrh	r3, [r3, r2]
 8005598:	b29b      	uxth	r3, r3
 800559a:	001a      	movs	r2, r3
 800559c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	00da      	lsls	r2, r3, #3
 80055a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055aa:	18d3      	adds	r3, r2, r3
 80055ac:	4a33      	ldr	r2, [pc, #204]	@ (800567c <USB_EPStartXfer+0x750>)
 80055ae:	4694      	mov	ip, r2
 80055b0:	4463      	add	r3, ip
 80055b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b4:	1d7b      	adds	r3, r7, #5
 80055b6:	33ff      	adds	r3, #255	@ 0xff
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	b29a      	uxth	r2, r3
 80055bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055be:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80055c0:	2076      	movs	r0, #118	@ 0x76
 80055c2:	183b      	adds	r3, r7, r0
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	8952      	ldrh	r2, [r2, #10]
 80055c8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	6959      	ldr	r1, [r3, #20]
 80055ce:	1d7b      	adds	r3, r7, #5
 80055d0:	33ff      	adds	r3, #255	@ 0xff
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	b29c      	uxth	r4, r3
 80055d6:	183b      	adds	r3, r7, r0
 80055d8:	881a      	ldrh	r2, [r3, #0]
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	0023      	movs	r3, r4
 80055de:	f000 ff0f 	bl	8006400 <USB_WritePMA>
 80055e2:	e1b6      	b.n	8005952 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	1d7a      	adds	r2, r7, #5
 80055ea:	32ff      	adds	r2, #255	@ 0xff
 80055ec:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	18d3      	adds	r3, r2, r3
 80055f8:	881b      	ldrh	r3, [r3, #0]
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	2062      	movs	r0, #98	@ 0x62
 80055fe:	183b      	adds	r3, r7, r0
 8005600:	491f      	ldr	r1, [pc, #124]	@ (8005680 <USB_EPStartXfer+0x754>)
 8005602:	400a      	ands	r2, r1
 8005604:	801a      	strh	r2, [r3, #0]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	781b      	ldrb	r3, [r3, #0]
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	18d3      	adds	r3, r2, r3
 8005610:	183a      	adds	r2, r7, r0
 8005612:	8812      	ldrh	r2, [r2, #0]
 8005614:	491b      	ldr	r1, [pc, #108]	@ (8005684 <USB_EPStartXfer+0x758>)
 8005616:	430a      	orrs	r2, r1
 8005618:	b292      	uxth	r2, r2
 800561a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2250      	movs	r2, #80	@ 0x50
 8005624:	5a9b      	ldrh	r3, [r3, r2]
 8005626:	b29b      	uxth	r3, r3
 8005628:	001a      	movs	r2, r3
 800562a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800562c:	189b      	adds	r3, r3, r2
 800562e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	00da      	lsls	r2, r3, #3
 8005636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005638:	18d3      	adds	r3, r2, r3
 800563a:	4a0e      	ldr	r2, [pc, #56]	@ (8005674 <USB_EPStartXfer+0x748>)
 800563c:	4694      	mov	ip, r2
 800563e:	4463      	add	r3, ip
 8005640:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005642:	1d7b      	adds	r3, r7, #5
 8005644:	33ff      	adds	r3, #255	@ 0xff
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	b29a      	uxth	r2, r3
 800564a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800564c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800564e:	2076      	movs	r0, #118	@ 0x76
 8005650:	183b      	adds	r3, r7, r0
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	8912      	ldrh	r2, [r2, #8]
 8005656:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6959      	ldr	r1, [r3, #20]
 800565c:	1d7b      	adds	r3, r7, #5
 800565e:	33ff      	adds	r3, #255	@ 0xff
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	b29c      	uxth	r4, r3
 8005664:	183b      	adds	r3, r7, r0
 8005666:	881a      	ldrh	r2, [r3, #0]
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	0023      	movs	r3, r4
 800566c:	f000 fec8 	bl	8006400 <USB_WritePMA>
 8005670:	e16f      	b.n	8005952 <USB_EPStartXfer+0xa26>
 8005672:	46c0      	nop			@ (mov r8, r8)
 8005674:	00000402 	.word	0x00000402
 8005678:	ffff8000 	.word	0xffff8000
 800567c:	00000406 	.word	0x00000406
 8005680:	ffff8e8f 	.word	0xffff8e8f
 8005684:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	1d7b      	adds	r3, r7, #5
 800568e:	33ff      	adds	r3, #255	@ 0xff
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	1ad2      	subs	r2, r2, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005698:	687a      	ldr	r2, [r7, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	009b      	lsls	r3, r3, #2
 80056a0:	18d3      	adds	r3, r2, r3
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	001a      	movs	r2, r3
 80056a8:	2340      	movs	r3, #64	@ 0x40
 80056aa:	4013      	ands	r3, r2
 80056ac:	d100      	bne.n	80056b0 <USB_EPStartXfer+0x784>
 80056ae:	e0a4      	b.n	80057fa <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	785b      	ldrb	r3, [r3, #1]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d000      	beq.n	80056be <USB_EPStartXfer+0x792>
 80056bc:	e070      	b.n	80057a0 <USB_EPStartXfer+0x874>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2250      	movs	r2, #80	@ 0x50
 80056c6:	5a9b      	ldrh	r3, [r3, r2]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	001a      	movs	r2, r3
 80056cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	00da      	lsls	r2, r3, #3
 80056d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80056da:	18d3      	adds	r3, r2, r3
 80056dc:	4ada      	ldr	r2, [pc, #872]	@ (8005a48 <USB_EPStartXfer+0xb1c>)
 80056de:	4694      	mov	ip, r2
 80056e0:	4463      	add	r3, ip
 80056e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80056e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056e6:	881b      	ldrh	r3, [r3, #0]
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	059b      	lsls	r3, r3, #22
 80056ec:	0d9b      	lsrs	r3, r3, #22
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056f2:	801a      	strh	r2, [r3, #0]
 80056f4:	1d7b      	adds	r3, r7, #5
 80056f6:	33ff      	adds	r3, #255	@ 0xff
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d108      	bne.n	8005710 <USB_EPStartXfer+0x7e4>
 80056fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	4ad1      	ldr	r2, [pc, #836]	@ (8005a4c <USB_EPStartXfer+0xb20>)
 8005706:	4313      	orrs	r3, r2
 8005708:	b29a      	uxth	r2, r3
 800570a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	e062      	b.n	80057d6 <USB_EPStartXfer+0x8aa>
 8005710:	1d7b      	adds	r3, r7, #5
 8005712:	33ff      	adds	r3, #255	@ 0xff
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b3e      	cmp	r3, #62	@ 0x3e
 8005718:	d81f      	bhi.n	800575a <USB_EPStartXfer+0x82e>
 800571a:	1d7b      	adds	r3, r7, #5
 800571c:	33ff      	adds	r3, #255	@ 0xff
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	085b      	lsrs	r3, r3, #1
 8005722:	21f0      	movs	r1, #240	@ 0xf0
 8005724:	187a      	adds	r2, r7, r1
 8005726:	6013      	str	r3, [r2, #0]
 8005728:	1d7b      	adds	r3, r7, #5
 800572a:	33ff      	adds	r3, #255	@ 0xff
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2201      	movs	r2, #1
 8005730:	4013      	ands	r3, r2
 8005732:	d004      	beq.n	800573e <USB_EPStartXfer+0x812>
 8005734:	187b      	adds	r3, r7, r1
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	3301      	adds	r3, #1
 800573a:	187a      	adds	r2, r7, r1
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29a      	uxth	r2, r3
 8005744:	23f0      	movs	r3, #240	@ 0xf0
 8005746:	18fb      	adds	r3, r7, r3
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	b29b      	uxth	r3, r3
 800574c:	029b      	lsls	r3, r3, #10
 800574e:	b29b      	uxth	r3, r3
 8005750:	4313      	orrs	r3, r2
 8005752:	b29a      	uxth	r2, r3
 8005754:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005756:	801a      	strh	r2, [r3, #0]
 8005758:	e03d      	b.n	80057d6 <USB_EPStartXfer+0x8aa>
 800575a:	1d7b      	adds	r3, r7, #5
 800575c:	33ff      	adds	r3, #255	@ 0xff
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	21f0      	movs	r1, #240	@ 0xf0
 8005764:	187a      	adds	r2, r7, r1
 8005766:	6013      	str	r3, [r2, #0]
 8005768:	1d7b      	adds	r3, r7, #5
 800576a:	33ff      	adds	r3, #255	@ 0xff
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	221f      	movs	r2, #31
 8005770:	4013      	ands	r3, r2
 8005772:	d104      	bne.n	800577e <USB_EPStartXfer+0x852>
 8005774:	187b      	adds	r3, r7, r1
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	187a      	adds	r2, r7, r1
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29a      	uxth	r2, r3
 8005784:	23f0      	movs	r3, #240	@ 0xf0
 8005786:	18fb      	adds	r3, r7, r3
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	b29b      	uxth	r3, r3
 800578c:	029b      	lsls	r3, r3, #10
 800578e:	b29b      	uxth	r3, r3
 8005790:	4313      	orrs	r3, r2
 8005792:	b29b      	uxth	r3, r3
 8005794:	4aad      	ldr	r2, [pc, #692]	@ (8005a4c <USB_EPStartXfer+0xb20>)
 8005796:	4313      	orrs	r3, r2
 8005798:	b29a      	uxth	r2, r3
 800579a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800579c:	801a      	strh	r2, [r3, #0]
 800579e:	e01a      	b.n	80057d6 <USB_EPStartXfer+0x8aa>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	785b      	ldrb	r3, [r3, #1]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d116      	bne.n	80057d6 <USB_EPStartXfer+0x8aa>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2250      	movs	r2, #80	@ 0x50
 80057ac:	5a9b      	ldrh	r3, [r3, r2]
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	001a      	movs	r2, r3
 80057b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057b4:	189b      	adds	r3, r3, r2
 80057b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	00da      	lsls	r2, r3, #3
 80057be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057c0:	18d3      	adds	r3, r2, r3
 80057c2:	4aa1      	ldr	r2, [pc, #644]	@ (8005a48 <USB_EPStartXfer+0xb1c>)
 80057c4:	4694      	mov	ip, r2
 80057c6:	4463      	add	r3, ip
 80057c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80057ca:	1d7b      	adds	r3, r7, #5
 80057cc:	33ff      	adds	r3, #255	@ 0xff
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057d4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80057d6:	2076      	movs	r0, #118	@ 0x76
 80057d8:	183b      	adds	r3, r7, r0
 80057da:	683a      	ldr	r2, [r7, #0]
 80057dc:	8952      	ldrh	r2, [r2, #10]
 80057de:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6959      	ldr	r1, [r3, #20]
 80057e4:	1d7b      	adds	r3, r7, #5
 80057e6:	33ff      	adds	r3, #255	@ 0xff
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	b29c      	uxth	r4, r3
 80057ec:	183b      	adds	r3, r7, r0
 80057ee:	881a      	ldrh	r2, [r3, #0]
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	0023      	movs	r3, r4
 80057f4:	f000 fe04 	bl	8006400 <USB_WritePMA>
 80057f8:	e0ab      	b.n	8005952 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d000      	beq.n	8005804 <USB_EPStartXfer+0x8d8>
 8005802:	e070      	b.n	80058e6 <USB_EPStartXfer+0x9ba>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2250      	movs	r2, #80	@ 0x50
 800580c:	5a9b      	ldrh	r3, [r3, r2]
 800580e:	b29b      	uxth	r3, r3
 8005810:	001a      	movs	r2, r3
 8005812:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005814:	189b      	adds	r3, r3, r2
 8005816:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	00da      	lsls	r2, r3, #3
 800581e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005820:	18d3      	adds	r3, r2, r3
 8005822:	4a8b      	ldr	r2, [pc, #556]	@ (8005a50 <USB_EPStartXfer+0xb24>)
 8005824:	4694      	mov	ip, r2
 8005826:	4463      	add	r3, ip
 8005828:	67bb      	str	r3, [r7, #120]	@ 0x78
 800582a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800582c:	881b      	ldrh	r3, [r3, #0]
 800582e:	b29b      	uxth	r3, r3
 8005830:	059b      	lsls	r3, r3, #22
 8005832:	0d9b      	lsrs	r3, r3, #22
 8005834:	b29a      	uxth	r2, r3
 8005836:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005838:	801a      	strh	r2, [r3, #0]
 800583a:	1d7b      	adds	r3, r7, #5
 800583c:	33ff      	adds	r3, #255	@ 0xff
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d108      	bne.n	8005856 <USB_EPStartXfer+0x92a>
 8005844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005846:	881b      	ldrh	r3, [r3, #0]
 8005848:	b29b      	uxth	r3, r3
 800584a:	4a80      	ldr	r2, [pc, #512]	@ (8005a4c <USB_EPStartXfer+0xb20>)
 800584c:	4313      	orrs	r3, r2
 800584e:	b29a      	uxth	r2, r3
 8005850:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005852:	801a      	strh	r2, [r3, #0]
 8005854:	e06c      	b.n	8005930 <USB_EPStartXfer+0xa04>
 8005856:	1d7b      	adds	r3, r7, #5
 8005858:	33ff      	adds	r3, #255	@ 0xff
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b3e      	cmp	r3, #62	@ 0x3e
 800585e:	d81f      	bhi.n	80058a0 <USB_EPStartXfer+0x974>
 8005860:	1d7b      	adds	r3, r7, #5
 8005862:	33ff      	adds	r3, #255	@ 0xff
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	21ec      	movs	r1, #236	@ 0xec
 800586a:	187a      	adds	r2, r7, r1
 800586c:	6013      	str	r3, [r2, #0]
 800586e:	1d7b      	adds	r3, r7, #5
 8005870:	33ff      	adds	r3, #255	@ 0xff
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2201      	movs	r2, #1
 8005876:	4013      	ands	r3, r2
 8005878:	d004      	beq.n	8005884 <USB_EPStartXfer+0x958>
 800587a:	187b      	adds	r3, r7, r1
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3301      	adds	r3, #1
 8005880:	187a      	adds	r2, r7, r1
 8005882:	6013      	str	r3, [r2, #0]
 8005884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005886:	881b      	ldrh	r3, [r3, #0]
 8005888:	b29a      	uxth	r2, r3
 800588a:	23ec      	movs	r3, #236	@ 0xec
 800588c:	18fb      	adds	r3, r7, r3
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	029b      	lsls	r3, r3, #10
 8005894:	b29b      	uxth	r3, r3
 8005896:	4313      	orrs	r3, r2
 8005898:	b29a      	uxth	r2, r3
 800589a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800589c:	801a      	strh	r2, [r3, #0]
 800589e:	e047      	b.n	8005930 <USB_EPStartXfer+0xa04>
 80058a0:	1d7b      	adds	r3, r7, #5
 80058a2:	33ff      	adds	r3, #255	@ 0xff
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	095b      	lsrs	r3, r3, #5
 80058a8:	21ec      	movs	r1, #236	@ 0xec
 80058aa:	187a      	adds	r2, r7, r1
 80058ac:	6013      	str	r3, [r2, #0]
 80058ae:	1d7b      	adds	r3, r7, #5
 80058b0:	33ff      	adds	r3, #255	@ 0xff
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	221f      	movs	r2, #31
 80058b6:	4013      	ands	r3, r2
 80058b8:	d104      	bne.n	80058c4 <USB_EPStartXfer+0x998>
 80058ba:	187b      	adds	r3, r7, r1
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	3b01      	subs	r3, #1
 80058c0:	187a      	adds	r2, r7, r1
 80058c2:	6013      	str	r3, [r2, #0]
 80058c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058c6:	881b      	ldrh	r3, [r3, #0]
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	23ec      	movs	r3, #236	@ 0xec
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	029b      	lsls	r3, r3, #10
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	4313      	orrs	r3, r2
 80058d8:	b29b      	uxth	r3, r3
 80058da:	4a5c      	ldr	r2, [pc, #368]	@ (8005a4c <USB_EPStartXfer+0xb20>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	b29a      	uxth	r2, r3
 80058e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058e2:	801a      	strh	r2, [r3, #0]
 80058e4:	e024      	b.n	8005930 <USB_EPStartXfer+0xa04>
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	785b      	ldrb	r3, [r3, #1]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d120      	bne.n	8005930 <USB_EPStartXfer+0xa04>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2184      	movs	r1, #132	@ 0x84
 80058f2:	187a      	adds	r2, r7, r1
 80058f4:	6013      	str	r3, [r2, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2250      	movs	r2, #80	@ 0x50
 80058fa:	5a9b      	ldrh	r3, [r3, r2]
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	001a      	movs	r2, r3
 8005900:	187b      	adds	r3, r7, r1
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	189b      	adds	r3, r3, r2
 8005906:	187a      	adds	r2, r7, r1
 8005908:	6013      	str	r3, [r2, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	00da      	lsls	r2, r3, #3
 8005910:	187b      	adds	r3, r7, r1
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	18d3      	adds	r3, r2, r3
 8005916:	4a4e      	ldr	r2, [pc, #312]	@ (8005a50 <USB_EPStartXfer+0xb24>)
 8005918:	4694      	mov	ip, r2
 800591a:	4463      	add	r3, ip
 800591c:	2180      	movs	r1, #128	@ 0x80
 800591e:	187a      	adds	r2, r7, r1
 8005920:	6013      	str	r3, [r2, #0]
 8005922:	1d7b      	adds	r3, r7, #5
 8005924:	33ff      	adds	r3, #255	@ 0xff
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	b29a      	uxth	r2, r3
 800592a:	187b      	adds	r3, r7, r1
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005930:	2076      	movs	r0, #118	@ 0x76
 8005932:	183b      	adds	r3, r7, r0
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	8912      	ldrh	r2, [r2, #8]
 8005938:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	6959      	ldr	r1, [r3, #20]
 800593e:	1d7b      	adds	r3, r7, #5
 8005940:	33ff      	adds	r3, #255	@ 0xff
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	b29c      	uxth	r4, r3
 8005946:	183b      	adds	r3, r7, r0
 8005948:	881a      	ldrh	r2, [r3, #0]
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	0023      	movs	r3, r4
 800594e:	f000 fd57 	bl	8006400 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	18d3      	adds	r3, r2, r3
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	b29a      	uxth	r2, r3
 8005960:	200a      	movs	r0, #10
 8005962:	183b      	adds	r3, r7, r0
 8005964:	493b      	ldr	r1, [pc, #236]	@ (8005a54 <USB_EPStartXfer+0xb28>)
 8005966:	400a      	ands	r2, r1
 8005968:	801a      	strh	r2, [r3, #0]
 800596a:	183b      	adds	r3, r7, r0
 800596c:	183a      	adds	r2, r7, r0
 800596e:	8812      	ldrh	r2, [r2, #0]
 8005970:	2110      	movs	r1, #16
 8005972:	404a      	eors	r2, r1
 8005974:	801a      	strh	r2, [r3, #0]
 8005976:	183b      	adds	r3, r7, r0
 8005978:	183a      	adds	r2, r7, r0
 800597a:	8812      	ldrh	r2, [r2, #0]
 800597c:	2120      	movs	r1, #32
 800597e:	404a      	eors	r2, r1
 8005980:	801a      	strh	r2, [r3, #0]
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	18d3      	adds	r3, r2, r3
 800598c:	183a      	adds	r2, r7, r0
 800598e:	8812      	ldrh	r2, [r2, #0]
 8005990:	4931      	ldr	r1, [pc, #196]	@ (8005a58 <USB_EPStartXfer+0xb2c>)
 8005992:	430a      	orrs	r2, r1
 8005994:	b292      	uxth	r2, r2
 8005996:	801a      	strh	r2, [r3, #0]
 8005998:	f000 fbe9 	bl	800616e <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	7b1b      	ldrb	r3, [r3, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d000      	beq.n	80059a6 <USB_EPStartXfer+0xa7a>
 80059a4:	e0a8      	b.n	8005af8 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	699a      	ldr	r2, [r3, #24]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d90d      	bls.n	80059ce <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	1d7a      	adds	r2, r7, #5
 80059b8:	32ff      	adds	r2, #255	@ 0xff
 80059ba:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	699a      	ldr	r2, [r3, #24]
 80059c0:	1d7b      	adds	r3, r7, #5
 80059c2:	33ff      	adds	r3, #255	@ 0xff
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	1ad2      	subs	r2, r2, r3
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	619a      	str	r2, [r3, #24]
 80059cc:	e007      	b.n	80059de <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	699b      	ldr	r3, [r3, #24]
 80059d2:	1d7a      	adds	r2, r7, #5
 80059d4:	32ff      	adds	r2, #255	@ 0xff
 80059d6:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	2200      	movs	r2, #0
 80059dc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2190      	movs	r1, #144	@ 0x90
 80059e2:	187a      	adds	r2, r7, r1
 80059e4:	6013      	str	r3, [r2, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2250      	movs	r2, #80	@ 0x50
 80059ea:	5a9b      	ldrh	r3, [r3, r2]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	001a      	movs	r2, r3
 80059f0:	187b      	adds	r3, r7, r1
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	189b      	adds	r3, r3, r2
 80059f6:	187a      	adds	r2, r7, r1
 80059f8:	6013      	str	r3, [r2, #0]
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	00da      	lsls	r2, r3, #3
 8005a00:	187b      	adds	r3, r7, r1
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	18d3      	adds	r3, r2, r3
 8005a06:	4a10      	ldr	r2, [pc, #64]	@ (8005a48 <USB_EPStartXfer+0xb1c>)
 8005a08:	4694      	mov	ip, r2
 8005a0a:	4463      	add	r3, ip
 8005a0c:	218c      	movs	r1, #140	@ 0x8c
 8005a0e:	187a      	adds	r2, r7, r1
 8005a10:	6013      	str	r3, [r2, #0]
 8005a12:	187b      	adds	r3, r7, r1
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	881b      	ldrh	r3, [r3, #0]
 8005a18:	b29b      	uxth	r3, r3
 8005a1a:	059b      	lsls	r3, r3, #22
 8005a1c:	0d9b      	lsrs	r3, r3, #22
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	187b      	adds	r3, r7, r1
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	801a      	strh	r2, [r3, #0]
 8005a26:	1d7b      	adds	r3, r7, #5
 8005a28:	33ff      	adds	r3, #255	@ 0xff
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d115      	bne.n	8005a5c <USB_EPStartXfer+0xb30>
 8005a30:	187b      	adds	r3, r7, r1
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	881b      	ldrh	r3, [r3, #0]
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	4a04      	ldr	r2, [pc, #16]	@ (8005a4c <USB_EPStartXfer+0xb20>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	b29a      	uxth	r2, r3
 8005a3e:	187b      	adds	r3, r7, r1
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e36e      	b.n	8006124 <USB_EPStartXfer+0x11f8>
 8005a46:	46c0      	nop			@ (mov r8, r8)
 8005a48:	00000406 	.word	0x00000406
 8005a4c:	ffff8000 	.word	0xffff8000
 8005a50:	00000402 	.word	0x00000402
 8005a54:	ffff8fbf 	.word	0xffff8fbf
 8005a58:	ffff8080 	.word	0xffff8080
 8005a5c:	1d7b      	adds	r3, r7, #5
 8005a5e:	33ff      	adds	r3, #255	@ 0xff
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b3e      	cmp	r3, #62	@ 0x3e
 8005a64:	d822      	bhi.n	8005aac <USB_EPStartXfer+0xb80>
 8005a66:	1d7b      	adds	r3, r7, #5
 8005a68:	33ff      	adds	r3, #255	@ 0xff
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	085b      	lsrs	r3, r3, #1
 8005a6e:	21e8      	movs	r1, #232	@ 0xe8
 8005a70:	187a      	adds	r2, r7, r1
 8005a72:	6013      	str	r3, [r2, #0]
 8005a74:	1d7b      	adds	r3, r7, #5
 8005a76:	33ff      	adds	r3, #255	@ 0xff
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	d004      	beq.n	8005a8a <USB_EPStartXfer+0xb5e>
 8005a80:	187b      	adds	r3, r7, r1
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	187a      	adds	r2, r7, r1
 8005a88:	6013      	str	r3, [r2, #0]
 8005a8a:	218c      	movs	r1, #140	@ 0x8c
 8005a8c:	187b      	adds	r3, r7, r1
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	881b      	ldrh	r3, [r3, #0]
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	23e8      	movs	r3, #232	@ 0xe8
 8005a96:	18fb      	adds	r3, r7, r3
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	029b      	lsls	r3, r3, #10
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	187b      	adds	r3, r7, r1
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	801a      	strh	r2, [r3, #0]
 8005aaa:	e33b      	b.n	8006124 <USB_EPStartXfer+0x11f8>
 8005aac:	1d7b      	adds	r3, r7, #5
 8005aae:	33ff      	adds	r3, #255	@ 0xff
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	21e8      	movs	r1, #232	@ 0xe8
 8005ab6:	187a      	adds	r2, r7, r1
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	1d7b      	adds	r3, r7, #5
 8005abc:	33ff      	adds	r3, #255	@ 0xff
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	221f      	movs	r2, #31
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	d104      	bne.n	8005ad0 <USB_EPStartXfer+0xba4>
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	187a      	adds	r2, r7, r1
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	218c      	movs	r1, #140	@ 0x8c
 8005ad2:	187b      	adds	r3, r7, r1
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	881b      	ldrh	r3, [r3, #0]
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	23e8      	movs	r3, #232	@ 0xe8
 8005adc:	18fb      	adds	r3, r7, r3
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	4ad7      	ldr	r2, [pc, #860]	@ (8005e48 <USB_EPStartXfer+0xf1c>)
 8005aec:	4313      	orrs	r3, r2
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	187b      	adds	r3, r7, r1
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	e315      	b.n	8006124 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	78db      	ldrb	r3, [r3, #3]
 8005afc:	2b02      	cmp	r3, #2
 8005afe:	d000      	beq.n	8005b02 <USB_EPStartXfer+0xbd6>
 8005b00:	e189      	b.n	8005e16 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	785b      	ldrb	r3, [r3, #1]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d000      	beq.n	8005b0c <USB_EPStartXfer+0xbe0>
 8005b0a:	e07b      	b.n	8005c04 <USB_EPStartXfer+0xcd8>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	21ac      	movs	r1, #172	@ 0xac
 8005b10:	187a      	adds	r2, r7, r1
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2250      	movs	r2, #80	@ 0x50
 8005b18:	5a9b      	ldrh	r3, [r3, r2]
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	001a      	movs	r2, r3
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	187a      	adds	r2, r7, r1
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	00da      	lsls	r2, r3, #3
 8005b2e:	187b      	adds	r3, r7, r1
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	18d3      	adds	r3, r2, r3
 8005b34:	4ac5      	ldr	r2, [pc, #788]	@ (8005e4c <USB_EPStartXfer+0xf20>)
 8005b36:	4694      	mov	ip, r2
 8005b38:	4463      	add	r3, ip
 8005b3a:	21a8      	movs	r1, #168	@ 0xa8
 8005b3c:	187a      	adds	r2, r7, r1
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	187b      	adds	r3, r7, r1
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	881b      	ldrh	r3, [r3, #0]
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	059b      	lsls	r3, r3, #22
 8005b4a:	0d9b      	lsrs	r3, r3, #22
 8005b4c:	b29a      	uxth	r2, r3
 8005b4e:	187b      	adds	r3, r7, r1
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d10a      	bne.n	8005b72 <USB_EPStartXfer+0xc46>
 8005b5c:	187b      	adds	r3, r7, r1
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	881b      	ldrh	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	4ab8      	ldr	r2, [pc, #736]	@ (8005e48 <USB_EPStartXfer+0xf1c>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	801a      	strh	r2, [r3, #0]
 8005b70:	e06c      	b.n	8005c4c <USB_EPStartXfer+0xd20>
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	2b3e      	cmp	r3, #62	@ 0x3e
 8005b78:	d820      	bhi.n	8005bbc <USB_EPStartXfer+0xc90>
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	21e4      	movs	r1, #228	@ 0xe4
 8005b82:	187a      	adds	r2, r7, r1
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	d004      	beq.n	8005b9a <USB_EPStartXfer+0xc6e>
 8005b90:	187b      	adds	r3, r7, r1
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	187a      	adds	r2, r7, r1
 8005b98:	6013      	str	r3, [r2, #0]
 8005b9a:	21a8      	movs	r1, #168	@ 0xa8
 8005b9c:	187b      	adds	r3, r7, r1
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	881b      	ldrh	r3, [r3, #0]
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	23e4      	movs	r3, #228	@ 0xe4
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	b29b      	uxth	r3, r3
 8005bac:	029b      	lsls	r3, r3, #10
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	b29a      	uxth	r2, r3
 8005bb4:	187b      	adds	r3, r7, r1
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	801a      	strh	r2, [r3, #0]
 8005bba:	e047      	b.n	8005c4c <USB_EPStartXfer+0xd20>
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	095b      	lsrs	r3, r3, #5
 8005bc2:	21e4      	movs	r1, #228	@ 0xe4
 8005bc4:	187a      	adds	r2, r7, r1
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	691b      	ldr	r3, [r3, #16]
 8005bcc:	221f      	movs	r2, #31
 8005bce:	4013      	ands	r3, r2
 8005bd0:	d104      	bne.n	8005bdc <USB_EPStartXfer+0xcb0>
 8005bd2:	187b      	adds	r3, r7, r1
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3b01      	subs	r3, #1
 8005bd8:	187a      	adds	r2, r7, r1
 8005bda:	6013      	str	r3, [r2, #0]
 8005bdc:	21a8      	movs	r1, #168	@ 0xa8
 8005bde:	187b      	adds	r3, r7, r1
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	881b      	ldrh	r3, [r3, #0]
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	23e4      	movs	r3, #228	@ 0xe4
 8005be8:	18fb      	adds	r3, r7, r3
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	029b      	lsls	r3, r3, #10
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	4a94      	ldr	r2, [pc, #592]	@ (8005e48 <USB_EPStartXfer+0xf1c>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	187b      	adds	r3, r7, r1
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	e023      	b.n	8005c4c <USB_EPStartXfer+0xd20>
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	785b      	ldrb	r3, [r3, #1]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d11f      	bne.n	8005c4c <USB_EPStartXfer+0xd20>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	21b4      	movs	r1, #180	@ 0xb4
 8005c10:	187a      	adds	r2, r7, r1
 8005c12:	6013      	str	r3, [r2, #0]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2250      	movs	r2, #80	@ 0x50
 8005c18:	5a9b      	ldrh	r3, [r3, r2]
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	001a      	movs	r2, r3
 8005c1e:	187b      	adds	r3, r7, r1
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	189b      	adds	r3, r3, r2
 8005c24:	187a      	adds	r2, r7, r1
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	00da      	lsls	r2, r3, #3
 8005c2e:	187b      	adds	r3, r7, r1
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	18d3      	adds	r3, r2, r3
 8005c34:	4a85      	ldr	r2, [pc, #532]	@ (8005e4c <USB_EPStartXfer+0xf20>)
 8005c36:	4694      	mov	ip, r2
 8005c38:	4463      	add	r3, ip
 8005c3a:	21b0      	movs	r1, #176	@ 0xb0
 8005c3c:	187a      	adds	r2, r7, r1
 8005c3e:	6013      	str	r3, [r2, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	b29a      	uxth	r2, r3
 8005c46:	187b      	adds	r3, r7, r1
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	801a      	strh	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	22a4      	movs	r2, #164	@ 0xa4
 8005c50:	18ba      	adds	r2, r7, r2
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	785b      	ldrb	r3, [r3, #1]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d000      	beq.n	8005c5e <USB_EPStartXfer+0xd32>
 8005c5c:	e07b      	b.n	8005d56 <USB_EPStartXfer+0xe2a>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	219c      	movs	r1, #156	@ 0x9c
 8005c62:	187a      	adds	r2, r7, r1
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2250      	movs	r2, #80	@ 0x50
 8005c6a:	5a9b      	ldrh	r3, [r3, r2]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	001a      	movs	r2, r3
 8005c70:	187b      	adds	r3, r7, r1
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	189b      	adds	r3, r3, r2
 8005c76:	187a      	adds	r2, r7, r1
 8005c78:	6013      	str	r3, [r2, #0]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	00da      	lsls	r2, r3, #3
 8005c80:	187b      	adds	r3, r7, r1
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	18d3      	adds	r3, r2, r3
 8005c86:	4a72      	ldr	r2, [pc, #456]	@ (8005e50 <USB_EPStartXfer+0xf24>)
 8005c88:	4694      	mov	ip, r2
 8005c8a:	4463      	add	r3, ip
 8005c8c:	2198      	movs	r1, #152	@ 0x98
 8005c8e:	187a      	adds	r2, r7, r1
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	187b      	adds	r3, r7, r1
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	059b      	lsls	r3, r3, #22
 8005c9c:	0d9b      	lsrs	r3, r3, #22
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	187b      	adds	r3, r7, r1
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	801a      	strh	r2, [r3, #0]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	691b      	ldr	r3, [r3, #16]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10a      	bne.n	8005cc4 <USB_EPStartXfer+0xd98>
 8005cae:	187b      	adds	r3, r7, r1
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	881b      	ldrh	r3, [r3, #0]
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	4a64      	ldr	r2, [pc, #400]	@ (8005e48 <USB_EPStartXfer+0xf1c>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	187b      	adds	r3, r7, r1
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	801a      	strh	r2, [r3, #0]
 8005cc2:	e069      	b.n	8005d98 <USB_EPStartXfer+0xe6c>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8005cca:	d820      	bhi.n	8005d0e <USB_EPStartXfer+0xde2>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	085b      	lsrs	r3, r3, #1
 8005cd2:	21e0      	movs	r1, #224	@ 0xe0
 8005cd4:	187a      	adds	r2, r7, r1
 8005cd6:	6013      	str	r3, [r2, #0]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	691b      	ldr	r3, [r3, #16]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	4013      	ands	r3, r2
 8005ce0:	d004      	beq.n	8005cec <USB_EPStartXfer+0xdc0>
 8005ce2:	187b      	adds	r3, r7, r1
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	187a      	adds	r2, r7, r1
 8005cea:	6013      	str	r3, [r2, #0]
 8005cec:	2198      	movs	r1, #152	@ 0x98
 8005cee:	187b      	adds	r3, r7, r1
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	881b      	ldrh	r3, [r3, #0]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	23e0      	movs	r3, #224	@ 0xe0
 8005cf8:	18fb      	adds	r3, r7, r3
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	029b      	lsls	r3, r3, #10
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	4313      	orrs	r3, r2
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	187b      	adds	r3, r7, r1
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	801a      	strh	r2, [r3, #0]
 8005d0c:	e044      	b.n	8005d98 <USB_EPStartXfer+0xe6c>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	095b      	lsrs	r3, r3, #5
 8005d14:	21e0      	movs	r1, #224	@ 0xe0
 8005d16:	187a      	adds	r2, r7, r1
 8005d18:	6013      	str	r3, [r2, #0]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	221f      	movs	r2, #31
 8005d20:	4013      	ands	r3, r2
 8005d22:	d104      	bne.n	8005d2e <USB_EPStartXfer+0xe02>
 8005d24:	187b      	adds	r3, r7, r1
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	187a      	adds	r2, r7, r1
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	2198      	movs	r1, #152	@ 0x98
 8005d30:	187b      	adds	r3, r7, r1
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	23e0      	movs	r3, #224	@ 0xe0
 8005d3a:	18fb      	adds	r3, r7, r3
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	029b      	lsls	r3, r3, #10
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	4313      	orrs	r3, r2
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	4a3f      	ldr	r2, [pc, #252]	@ (8005e48 <USB_EPStartXfer+0xf1c>)
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	b29a      	uxth	r2, r3
 8005d4e:	187b      	adds	r3, r7, r1
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	801a      	strh	r2, [r3, #0]
 8005d54:	e020      	b.n	8005d98 <USB_EPStartXfer+0xe6c>
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	785b      	ldrb	r3, [r3, #1]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d11c      	bne.n	8005d98 <USB_EPStartXfer+0xe6c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2250      	movs	r2, #80	@ 0x50
 8005d62:	5a9b      	ldrh	r3, [r3, r2]
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	001a      	movs	r2, r3
 8005d68:	21a4      	movs	r1, #164	@ 0xa4
 8005d6a:	187b      	adds	r3, r7, r1
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	187a      	adds	r2, r7, r1
 8005d72:	6013      	str	r3, [r2, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	00da      	lsls	r2, r3, #3
 8005d7a:	187b      	adds	r3, r7, r1
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	18d3      	adds	r3, r2, r3
 8005d80:	4a33      	ldr	r2, [pc, #204]	@ (8005e50 <USB_EPStartXfer+0xf24>)
 8005d82:	4694      	mov	ip, r2
 8005d84:	4463      	add	r3, ip
 8005d86:	21a0      	movs	r1, #160	@ 0xa0
 8005d88:	187a      	adds	r2, r7, r1
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	187b      	adds	r3, r7, r1
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d100      	bne.n	8005da2 <USB_EPStartXfer+0xe76>
 8005da0:	e1c0      	b.n	8006124 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	18d2      	adds	r2, r2, r3
 8005dac:	2196      	movs	r1, #150	@ 0x96
 8005dae:	187b      	adds	r3, r7, r1
 8005db0:	8812      	ldrh	r2, [r2, #0]
 8005db2:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005db4:	187b      	adds	r3, r7, r1
 8005db6:	881a      	ldrh	r2, [r3, #0]
 8005db8:	2380      	movs	r3, #128	@ 0x80
 8005dba:	01db      	lsls	r3, r3, #7
 8005dbc:	4013      	ands	r3, r2
 8005dbe:	d004      	beq.n	8005dca <USB_EPStartXfer+0xe9e>
 8005dc0:	187b      	adds	r3, r7, r1
 8005dc2:	881b      	ldrh	r3, [r3, #0]
 8005dc4:	2240      	movs	r2, #64	@ 0x40
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	d10d      	bne.n	8005de6 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005dca:	2196      	movs	r1, #150	@ 0x96
 8005dcc:	187b      	adds	r3, r7, r1
 8005dce:	881a      	ldrh	r2, [r3, #0]
 8005dd0:	2380      	movs	r3, #128	@ 0x80
 8005dd2:	01db      	lsls	r3, r3, #7
 8005dd4:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005dd6:	d000      	beq.n	8005dda <USB_EPStartXfer+0xeae>
 8005dd8:	e1a4      	b.n	8006124 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005dda:	187b      	adds	r3, r7, r1
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	2240      	movs	r2, #64	@ 0x40
 8005de0:	4013      	ands	r3, r2
 8005de2:	d000      	beq.n	8005de6 <USB_EPStartXfer+0xeba>
 8005de4:	e19e      	b.n	8006124 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	009b      	lsls	r3, r3, #2
 8005dee:	18d3      	adds	r3, r2, r3
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	2094      	movs	r0, #148	@ 0x94
 8005df6:	183b      	adds	r3, r7, r0
 8005df8:	4916      	ldr	r1, [pc, #88]	@ (8005e54 <USB_EPStartXfer+0xf28>)
 8005dfa:	400a      	ands	r2, r1
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	18d3      	adds	r3, r2, r3
 8005e08:	183a      	adds	r2, r7, r0
 8005e0a:	8812      	ldrh	r2, [r2, #0]
 8005e0c:	4912      	ldr	r1, [pc, #72]	@ (8005e58 <USB_EPStartXfer+0xf2c>)
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	b292      	uxth	r2, r2
 8005e12:	801a      	strh	r2, [r3, #0]
 8005e14:	e186      	b.n	8006124 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	78db      	ldrb	r3, [r3, #3]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d000      	beq.n	8005e20 <USB_EPStartXfer+0xef4>
 8005e1e:	e17f      	b.n	8006120 <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	699a      	ldr	r2, [r3, #24]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d917      	bls.n	8005e5c <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	1d7a      	adds	r2, r7, #5
 8005e32:	32ff      	adds	r2, #255	@ 0xff
 8005e34:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	699a      	ldr	r2, [r3, #24]
 8005e3a:	1d7b      	adds	r3, r7, #5
 8005e3c:	33ff      	adds	r3, #255	@ 0xff
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	1ad2      	subs	r2, r2, r3
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	619a      	str	r2, [r3, #24]
 8005e46:	e011      	b.n	8005e6c <USB_EPStartXfer+0xf40>
 8005e48:	ffff8000 	.word	0xffff8000
 8005e4c:	00000402 	.word	0x00000402
 8005e50:	00000406 	.word	0x00000406
 8005e54:	ffff8f8f 	.word	0xffff8f8f
 8005e58:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	699b      	ldr	r3, [r3, #24]
 8005e60:	1d7a      	adds	r2, r7, #5
 8005e62:	32ff      	adds	r2, #255	@ 0xff
 8005e64:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	785b      	ldrb	r3, [r3, #1]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d000      	beq.n	8005e76 <USB_EPStartXfer+0xf4a>
 8005e74:	e081      	b.n	8005f7a <USB_EPStartXfer+0x104e>
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	21cc      	movs	r1, #204	@ 0xcc
 8005e7a:	187a      	adds	r2, r7, r1
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2250      	movs	r2, #80	@ 0x50
 8005e82:	5a9b      	ldrh	r3, [r3, r2]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	001a      	movs	r2, r3
 8005e88:	187b      	adds	r3, r7, r1
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	189b      	adds	r3, r3, r2
 8005e8e:	187a      	adds	r2, r7, r1
 8005e90:	6013      	str	r3, [r2, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	00da      	lsls	r2, r3, #3
 8005e98:	187b      	adds	r3, r7, r1
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	18d3      	adds	r3, r2, r3
 8005e9e:	4ab6      	ldr	r2, [pc, #728]	@ (8006178 <USB_EPStartXfer+0x124c>)
 8005ea0:	4694      	mov	ip, r2
 8005ea2:	4463      	add	r3, ip
 8005ea4:	21c8      	movs	r1, #200	@ 0xc8
 8005ea6:	187a      	adds	r2, r7, r1
 8005ea8:	6013      	str	r3, [r2, #0]
 8005eaa:	187b      	adds	r3, r7, r1
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	881b      	ldrh	r3, [r3, #0]
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	059b      	lsls	r3, r3, #22
 8005eb4:	0d9b      	lsrs	r3, r3, #22
 8005eb6:	b29a      	uxth	r2, r3
 8005eb8:	187b      	adds	r3, r7, r1
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	801a      	strh	r2, [r3, #0]
 8005ebe:	1d7b      	adds	r3, r7, #5
 8005ec0:	33ff      	adds	r3, #255	@ 0xff
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <USB_EPStartXfer+0xfb2>
 8005ec8:	187b      	adds	r3, r7, r1
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	4aaa      	ldr	r2, [pc, #680]	@ (800617c <USB_EPStartXfer+0x1250>)
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	187b      	adds	r3, r7, r1
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	801a      	strh	r2, [r3, #0]
 8005edc:	e072      	b.n	8005fc4 <USB_EPStartXfer+0x1098>
 8005ede:	1d7b      	adds	r3, r7, #5
 8005ee0:	33ff      	adds	r3, #255	@ 0xff
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b3e      	cmp	r3, #62	@ 0x3e
 8005ee6:	d822      	bhi.n	8005f2e <USB_EPStartXfer+0x1002>
 8005ee8:	1d7b      	adds	r3, r7, #5
 8005eea:	33ff      	adds	r3, #255	@ 0xff
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	085b      	lsrs	r3, r3, #1
 8005ef0:	21dc      	movs	r1, #220	@ 0xdc
 8005ef2:	187a      	adds	r2, r7, r1
 8005ef4:	6013      	str	r3, [r2, #0]
 8005ef6:	1d7b      	adds	r3, r7, #5
 8005ef8:	33ff      	adds	r3, #255	@ 0xff
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2201      	movs	r2, #1
 8005efe:	4013      	ands	r3, r2
 8005f00:	d004      	beq.n	8005f0c <USB_EPStartXfer+0xfe0>
 8005f02:	187b      	adds	r3, r7, r1
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	187a      	adds	r2, r7, r1
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	21c8      	movs	r1, #200	@ 0xc8
 8005f0e:	187b      	adds	r3, r7, r1
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	881b      	ldrh	r3, [r3, #0]
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	23dc      	movs	r3, #220	@ 0xdc
 8005f18:	18fb      	adds	r3, r7, r3
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	029b      	lsls	r3, r3, #10
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	187b      	adds	r3, r7, r1
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	e04a      	b.n	8005fc4 <USB_EPStartXfer+0x1098>
 8005f2e:	1d7b      	adds	r3, r7, #5
 8005f30:	33ff      	adds	r3, #255	@ 0xff
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	095b      	lsrs	r3, r3, #5
 8005f36:	21dc      	movs	r1, #220	@ 0xdc
 8005f38:	187a      	adds	r2, r7, r1
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	1d7b      	adds	r3, r7, #5
 8005f3e:	33ff      	adds	r3, #255	@ 0xff
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	221f      	movs	r2, #31
 8005f44:	4013      	ands	r3, r2
 8005f46:	d104      	bne.n	8005f52 <USB_EPStartXfer+0x1026>
 8005f48:	187b      	adds	r3, r7, r1
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	187a      	adds	r2, r7, r1
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	21c8      	movs	r1, #200	@ 0xc8
 8005f54:	187b      	adds	r3, r7, r1
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	881b      	ldrh	r3, [r3, #0]
 8005f5a:	b29a      	uxth	r2, r3
 8005f5c:	23dc      	movs	r3, #220	@ 0xdc
 8005f5e:	18fb      	adds	r3, r7, r3
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	029b      	lsls	r3, r3, #10
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4a83      	ldr	r2, [pc, #524]	@ (800617c <USB_EPStartXfer+0x1250>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	187b      	adds	r3, r7, r1
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	801a      	strh	r2, [r3, #0]
 8005f78:	e024      	b.n	8005fc4 <USB_EPStartXfer+0x1098>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	785b      	ldrb	r3, [r3, #1]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d120      	bne.n	8005fc4 <USB_EPStartXfer+0x1098>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	21d4      	movs	r1, #212	@ 0xd4
 8005f86:	187a      	adds	r2, r7, r1
 8005f88:	6013      	str	r3, [r2, #0]
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2250      	movs	r2, #80	@ 0x50
 8005f8e:	5a9b      	ldrh	r3, [r3, r2]
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	001a      	movs	r2, r3
 8005f94:	187b      	adds	r3, r7, r1
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	189b      	adds	r3, r3, r2
 8005f9a:	187a      	adds	r2, r7, r1
 8005f9c:	6013      	str	r3, [r2, #0]
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	00da      	lsls	r2, r3, #3
 8005fa4:	187b      	adds	r3, r7, r1
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	18d3      	adds	r3, r2, r3
 8005faa:	4a73      	ldr	r2, [pc, #460]	@ (8006178 <USB_EPStartXfer+0x124c>)
 8005fac:	4694      	mov	ip, r2
 8005fae:	4463      	add	r3, ip
 8005fb0:	21d0      	movs	r1, #208	@ 0xd0
 8005fb2:	187a      	adds	r2, r7, r1
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	1d7b      	adds	r3, r7, #5
 8005fb8:	33ff      	adds	r3, #255	@ 0xff
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	187b      	adds	r3, r7, r1
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	22c4      	movs	r2, #196	@ 0xc4
 8005fc8:	18ba      	adds	r2, r7, r2
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	785b      	ldrb	r3, [r3, #1]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d000      	beq.n	8005fd6 <USB_EPStartXfer+0x10aa>
 8005fd4:	e081      	b.n	80060da <USB_EPStartXfer+0x11ae>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	21bc      	movs	r1, #188	@ 0xbc
 8005fda:	187a      	adds	r2, r7, r1
 8005fdc:	6013      	str	r3, [r2, #0]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2250      	movs	r2, #80	@ 0x50
 8005fe2:	5a9b      	ldrh	r3, [r3, r2]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	001a      	movs	r2, r3
 8005fe8:	187b      	adds	r3, r7, r1
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	189b      	adds	r3, r3, r2
 8005fee:	187a      	adds	r2, r7, r1
 8005ff0:	6013      	str	r3, [r2, #0]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	00da      	lsls	r2, r3, #3
 8005ff8:	187b      	adds	r3, r7, r1
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	18d3      	adds	r3, r2, r3
 8005ffe:	4a60      	ldr	r2, [pc, #384]	@ (8006180 <USB_EPStartXfer+0x1254>)
 8006000:	4694      	mov	ip, r2
 8006002:	4463      	add	r3, ip
 8006004:	21b8      	movs	r1, #184	@ 0xb8
 8006006:	187a      	adds	r2, r7, r1
 8006008:	6013      	str	r3, [r2, #0]
 800600a:	187b      	adds	r3, r7, r1
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	b29b      	uxth	r3, r3
 8006012:	059b      	lsls	r3, r3, #22
 8006014:	0d9b      	lsrs	r3, r3, #22
 8006016:	b29a      	uxth	r2, r3
 8006018:	187b      	adds	r3, r7, r1
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	801a      	strh	r2, [r3, #0]
 800601e:	1d7b      	adds	r3, r7, #5
 8006020:	33ff      	adds	r3, #255	@ 0xff
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <USB_EPStartXfer+0x1112>
 8006028:	187b      	adds	r3, r7, r1
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	4a52      	ldr	r2, [pc, #328]	@ (800617c <USB_EPStartXfer+0x1250>)
 8006032:	4313      	orrs	r3, r2
 8006034:	b29a      	uxth	r2, r3
 8006036:	187b      	adds	r3, r7, r1
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	801a      	strh	r2, [r3, #0]
 800603c:	e072      	b.n	8006124 <USB_EPStartXfer+0x11f8>
 800603e:	1d7b      	adds	r3, r7, #5
 8006040:	33ff      	adds	r3, #255	@ 0xff
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2b3e      	cmp	r3, #62	@ 0x3e
 8006046:	d822      	bhi.n	800608e <USB_EPStartXfer+0x1162>
 8006048:	1d7b      	adds	r3, r7, #5
 800604a:	33ff      	adds	r3, #255	@ 0xff
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	21d8      	movs	r1, #216	@ 0xd8
 8006052:	187a      	adds	r2, r7, r1
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	1d7b      	adds	r3, r7, #5
 8006058:	33ff      	adds	r3, #255	@ 0xff
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	2201      	movs	r2, #1
 800605e:	4013      	ands	r3, r2
 8006060:	d004      	beq.n	800606c <USB_EPStartXfer+0x1140>
 8006062:	187b      	adds	r3, r7, r1
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	3301      	adds	r3, #1
 8006068:	187a      	adds	r2, r7, r1
 800606a:	6013      	str	r3, [r2, #0]
 800606c:	21b8      	movs	r1, #184	@ 0xb8
 800606e:	187b      	adds	r3, r7, r1
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	881b      	ldrh	r3, [r3, #0]
 8006074:	b29a      	uxth	r2, r3
 8006076:	23d8      	movs	r3, #216	@ 0xd8
 8006078:	18fb      	adds	r3, r7, r3
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	b29b      	uxth	r3, r3
 8006082:	4313      	orrs	r3, r2
 8006084:	b29a      	uxth	r2, r3
 8006086:	187b      	adds	r3, r7, r1
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	801a      	strh	r2, [r3, #0]
 800608c:	e04a      	b.n	8006124 <USB_EPStartXfer+0x11f8>
 800608e:	1d7b      	adds	r3, r7, #5
 8006090:	33ff      	adds	r3, #255	@ 0xff
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	095b      	lsrs	r3, r3, #5
 8006096:	21d8      	movs	r1, #216	@ 0xd8
 8006098:	187a      	adds	r2, r7, r1
 800609a:	6013      	str	r3, [r2, #0]
 800609c:	1d7b      	adds	r3, r7, #5
 800609e:	33ff      	adds	r3, #255	@ 0xff
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	221f      	movs	r2, #31
 80060a4:	4013      	ands	r3, r2
 80060a6:	d104      	bne.n	80060b2 <USB_EPStartXfer+0x1186>
 80060a8:	187b      	adds	r3, r7, r1
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	3b01      	subs	r3, #1
 80060ae:	187a      	adds	r2, r7, r1
 80060b0:	6013      	str	r3, [r2, #0]
 80060b2:	21b8      	movs	r1, #184	@ 0xb8
 80060b4:	187b      	adds	r3, r7, r1
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	23d8      	movs	r3, #216	@ 0xd8
 80060be:	18fb      	adds	r3, r7, r3
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	029b      	lsls	r3, r3, #10
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	4313      	orrs	r3, r2
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	4a2b      	ldr	r2, [pc, #172]	@ (800617c <USB_EPStartXfer+0x1250>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	b29a      	uxth	r2, r3
 80060d2:	187b      	adds	r3, r7, r1
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	801a      	strh	r2, [r3, #0]
 80060d8:	e024      	b.n	8006124 <USB_EPStartXfer+0x11f8>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	785b      	ldrb	r3, [r3, #1]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d120      	bne.n	8006124 <USB_EPStartXfer+0x11f8>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2250      	movs	r2, #80	@ 0x50
 80060e6:	5a9b      	ldrh	r3, [r3, r2]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	001a      	movs	r2, r3
 80060ec:	21c4      	movs	r1, #196	@ 0xc4
 80060ee:	187b      	adds	r3, r7, r1
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	189b      	adds	r3, r3, r2
 80060f4:	187a      	adds	r2, r7, r1
 80060f6:	6013      	str	r3, [r2, #0]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	00da      	lsls	r2, r3, #3
 80060fe:	187b      	adds	r3, r7, r1
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	18d3      	adds	r3, r2, r3
 8006104:	4a1e      	ldr	r2, [pc, #120]	@ (8006180 <USB_EPStartXfer+0x1254>)
 8006106:	4694      	mov	ip, r2
 8006108:	4463      	add	r3, ip
 800610a:	21c0      	movs	r1, #192	@ 0xc0
 800610c:	187a      	adds	r2, r7, r1
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	1d7b      	adds	r3, r7, #5
 8006112:	33ff      	adds	r3, #255	@ 0xff
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	b29a      	uxth	r2, r3
 8006118:	187b      	adds	r3, r7, r1
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	801a      	strh	r2, [r3, #0]
 800611e:	e001      	b.n	8006124 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e025      	b.n	8006170 <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	781b      	ldrb	r3, [r3, #0]
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	18d3      	adds	r3, r2, r3
 800612e:	881b      	ldrh	r3, [r3, #0]
 8006130:	b29a      	uxth	r2, r3
 8006132:	208a      	movs	r0, #138	@ 0x8a
 8006134:	183b      	adds	r3, r7, r0
 8006136:	4913      	ldr	r1, [pc, #76]	@ (8006184 <USB_EPStartXfer+0x1258>)
 8006138:	400a      	ands	r2, r1
 800613a:	801a      	strh	r2, [r3, #0]
 800613c:	183b      	adds	r3, r7, r0
 800613e:	183a      	adds	r2, r7, r0
 8006140:	8812      	ldrh	r2, [r2, #0]
 8006142:	2180      	movs	r1, #128	@ 0x80
 8006144:	0149      	lsls	r1, r1, #5
 8006146:	404a      	eors	r2, r1
 8006148:	801a      	strh	r2, [r3, #0]
 800614a:	183b      	adds	r3, r7, r0
 800614c:	183a      	adds	r2, r7, r0
 800614e:	8812      	ldrh	r2, [r2, #0]
 8006150:	2180      	movs	r1, #128	@ 0x80
 8006152:	0189      	lsls	r1, r1, #6
 8006154:	404a      	eors	r2, r1
 8006156:	801a      	strh	r2, [r3, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	18d3      	adds	r3, r2, r3
 8006162:	183a      	adds	r2, r7, r0
 8006164:	8812      	ldrh	r2, [r2, #0]
 8006166:	4908      	ldr	r1, [pc, #32]	@ (8006188 <USB_EPStartXfer+0x125c>)
 8006168:	430a      	orrs	r2, r1
 800616a:	b292      	uxth	r2, r2
 800616c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	0018      	movs	r0, r3
 8006172:	46bd      	mov	sp, r7
 8006174:	b043      	add	sp, #268	@ 0x10c
 8006176:	bd90      	pop	{r4, r7, pc}
 8006178:	00000402 	.word	0x00000402
 800617c:	ffff8000 	.word	0xffff8000
 8006180:	00000406 	.word	0x00000406
 8006184:	ffffbf8f 	.word	0xffffbf8f
 8006188:	ffff8080 	.word	0xffff8080

0800618c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	785b      	ldrb	r3, [r3, #1]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01d      	beq.n	80061da <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	18d3      	adds	r3, r2, r3
 80061a8:	881b      	ldrh	r3, [r3, #0]
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	200c      	movs	r0, #12
 80061ae:	183b      	adds	r3, r7, r0
 80061b0:	491b      	ldr	r1, [pc, #108]	@ (8006220 <USB_EPSetStall+0x94>)
 80061b2:	400a      	ands	r2, r1
 80061b4:	801a      	strh	r2, [r3, #0]
 80061b6:	183b      	adds	r3, r7, r0
 80061b8:	183a      	adds	r2, r7, r0
 80061ba:	8812      	ldrh	r2, [r2, #0]
 80061bc:	2110      	movs	r1, #16
 80061be:	404a      	eors	r2, r1
 80061c0:	801a      	strh	r2, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	18d3      	adds	r3, r2, r3
 80061cc:	183a      	adds	r2, r7, r0
 80061ce:	8812      	ldrh	r2, [r2, #0]
 80061d0:	4914      	ldr	r1, [pc, #80]	@ (8006224 <USB_EPSetStall+0x98>)
 80061d2:	430a      	orrs	r2, r1
 80061d4:	b292      	uxth	r2, r2
 80061d6:	801a      	strh	r2, [r3, #0]
 80061d8:	e01d      	b.n	8006216 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	009b      	lsls	r3, r3, #2
 80061e2:	18d3      	adds	r3, r2, r3
 80061e4:	881b      	ldrh	r3, [r3, #0]
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	200e      	movs	r0, #14
 80061ea:	183b      	adds	r3, r7, r0
 80061ec:	490e      	ldr	r1, [pc, #56]	@ (8006228 <USB_EPSetStall+0x9c>)
 80061ee:	400a      	ands	r2, r1
 80061f0:	801a      	strh	r2, [r3, #0]
 80061f2:	183b      	adds	r3, r7, r0
 80061f4:	183a      	adds	r2, r7, r0
 80061f6:	8812      	ldrh	r2, [r2, #0]
 80061f8:	2180      	movs	r1, #128	@ 0x80
 80061fa:	0149      	lsls	r1, r1, #5
 80061fc:	404a      	eors	r2, r1
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	18d3      	adds	r3, r2, r3
 800620a:	183a      	adds	r2, r7, r0
 800620c:	8812      	ldrh	r2, [r2, #0]
 800620e:	4905      	ldr	r1, [pc, #20]	@ (8006224 <USB_EPSetStall+0x98>)
 8006210:	430a      	orrs	r2, r1
 8006212:	b292      	uxth	r2, r2
 8006214:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	0018      	movs	r0, r3
 800621a:	46bd      	mov	sp, r7
 800621c:	b004      	add	sp, #16
 800621e:	bd80      	pop	{r7, pc}
 8006220:	ffff8fbf 	.word	0xffff8fbf
 8006224:	ffff8080 	.word	0xffff8080
 8006228:	ffffbf8f 	.word	0xffffbf8f

0800622c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b086      	sub	sp, #24
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	7b1b      	ldrb	r3, [r3, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d000      	beq.n	8006240 <USB_EPClearStall+0x14>
 800623e:	e095      	b.n	800636c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	785b      	ldrb	r3, [r3, #1]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d046      	beq.n	80062d6 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	18d2      	adds	r2, r2, r3
 8006252:	2110      	movs	r1, #16
 8006254:	187b      	adds	r3, r7, r1
 8006256:	8812      	ldrh	r2, [r2, #0]
 8006258:	801a      	strh	r2, [r3, #0]
 800625a:	187b      	adds	r3, r7, r1
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	2240      	movs	r2, #64	@ 0x40
 8006260:	4013      	ands	r3, r2
 8006262:	d016      	beq.n	8006292 <USB_EPClearStall+0x66>
 8006264:	687a      	ldr	r2, [r7, #4]
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	18d3      	adds	r3, r2, r3
 800626e:	881b      	ldrh	r3, [r3, #0]
 8006270:	b29a      	uxth	r2, r3
 8006272:	200e      	movs	r0, #14
 8006274:	183b      	adds	r3, r7, r0
 8006276:	4940      	ldr	r1, [pc, #256]	@ (8006378 <USB_EPClearStall+0x14c>)
 8006278:	400a      	ands	r2, r1
 800627a:	801a      	strh	r2, [r3, #0]
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	18d3      	adds	r3, r2, r3
 8006286:	183a      	adds	r2, r7, r0
 8006288:	8812      	ldrh	r2, [r2, #0]
 800628a:	493c      	ldr	r1, [pc, #240]	@ (800637c <USB_EPClearStall+0x150>)
 800628c:	430a      	orrs	r2, r1
 800628e:	b292      	uxth	r2, r2
 8006290:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	78db      	ldrb	r3, [r3, #3]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d068      	beq.n	800636c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	18d3      	adds	r3, r2, r3
 80062a4:	881b      	ldrh	r3, [r3, #0]
 80062a6:	b29a      	uxth	r2, r3
 80062a8:	200c      	movs	r0, #12
 80062aa:	183b      	adds	r3, r7, r0
 80062ac:	4934      	ldr	r1, [pc, #208]	@ (8006380 <USB_EPClearStall+0x154>)
 80062ae:	400a      	ands	r2, r1
 80062b0:	801a      	strh	r2, [r3, #0]
 80062b2:	183b      	adds	r3, r7, r0
 80062b4:	183a      	adds	r2, r7, r0
 80062b6:	8812      	ldrh	r2, [r2, #0]
 80062b8:	2120      	movs	r1, #32
 80062ba:	404a      	eors	r2, r1
 80062bc:	801a      	strh	r2, [r3, #0]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	18d3      	adds	r3, r2, r3
 80062c8:	183a      	adds	r2, r7, r0
 80062ca:	8812      	ldrh	r2, [r2, #0]
 80062cc:	492d      	ldr	r1, [pc, #180]	@ (8006384 <USB_EPClearStall+0x158>)
 80062ce:	430a      	orrs	r2, r1
 80062d0:	b292      	uxth	r2, r2
 80062d2:	801a      	strh	r2, [r3, #0]
 80062d4:	e04a      	b.n	800636c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	781b      	ldrb	r3, [r3, #0]
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	18d2      	adds	r2, r2, r3
 80062e0:	2116      	movs	r1, #22
 80062e2:	187b      	adds	r3, r7, r1
 80062e4:	8812      	ldrh	r2, [r2, #0]
 80062e6:	801a      	strh	r2, [r3, #0]
 80062e8:	187b      	adds	r3, r7, r1
 80062ea:	881a      	ldrh	r2, [r3, #0]
 80062ec:	2380      	movs	r3, #128	@ 0x80
 80062ee:	01db      	lsls	r3, r3, #7
 80062f0:	4013      	ands	r3, r2
 80062f2:	d016      	beq.n	8006322 <USB_EPClearStall+0xf6>
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	18d3      	adds	r3, r2, r3
 80062fe:	881b      	ldrh	r3, [r3, #0]
 8006300:	b29a      	uxth	r2, r3
 8006302:	2014      	movs	r0, #20
 8006304:	183b      	adds	r3, r7, r0
 8006306:	491c      	ldr	r1, [pc, #112]	@ (8006378 <USB_EPClearStall+0x14c>)
 8006308:	400a      	ands	r2, r1
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	18d3      	adds	r3, r2, r3
 8006316:	183a      	adds	r2, r7, r0
 8006318:	8812      	ldrh	r2, [r2, #0]
 800631a:	491b      	ldr	r1, [pc, #108]	@ (8006388 <USB_EPClearStall+0x15c>)
 800631c:	430a      	orrs	r2, r1
 800631e:	b292      	uxth	r2, r2
 8006320:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	18d3      	adds	r3, r2, r3
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	b29a      	uxth	r2, r3
 8006330:	2012      	movs	r0, #18
 8006332:	183b      	adds	r3, r7, r0
 8006334:	4915      	ldr	r1, [pc, #84]	@ (800638c <USB_EPClearStall+0x160>)
 8006336:	400a      	ands	r2, r1
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	183b      	adds	r3, r7, r0
 800633c:	183a      	adds	r2, r7, r0
 800633e:	8812      	ldrh	r2, [r2, #0]
 8006340:	2180      	movs	r1, #128	@ 0x80
 8006342:	0149      	lsls	r1, r1, #5
 8006344:	404a      	eors	r2, r1
 8006346:	801a      	strh	r2, [r3, #0]
 8006348:	183b      	adds	r3, r7, r0
 800634a:	183a      	adds	r2, r7, r0
 800634c:	8812      	ldrh	r2, [r2, #0]
 800634e:	2180      	movs	r1, #128	@ 0x80
 8006350:	0189      	lsls	r1, r1, #6
 8006352:	404a      	eors	r2, r1
 8006354:	801a      	strh	r2, [r3, #0]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	18d3      	adds	r3, r2, r3
 8006360:	183a      	adds	r2, r7, r0
 8006362:	8812      	ldrh	r2, [r2, #0]
 8006364:	4907      	ldr	r1, [pc, #28]	@ (8006384 <USB_EPClearStall+0x158>)
 8006366:	430a      	orrs	r2, r1
 8006368:	b292      	uxth	r2, r2
 800636a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800636c:	2300      	movs	r3, #0
}
 800636e:	0018      	movs	r0, r3
 8006370:	46bd      	mov	sp, r7
 8006372:	b006      	add	sp, #24
 8006374:	bd80      	pop	{r7, pc}
 8006376:	46c0      	nop			@ (mov r8, r8)
 8006378:	ffff8f8f 	.word	0xffff8f8f
 800637c:	ffff80c0 	.word	0xffff80c0
 8006380:	ffff8fbf 	.word	0xffff8fbf
 8006384:	ffff8080 	.word	0xffff8080
 8006388:	ffffc080 	.word	0xffffc080
 800638c:	ffffbf8f 	.word	0xffffbf8f

08006390 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b082      	sub	sp, #8
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	000a      	movs	r2, r1
 800639a:	1cfb      	adds	r3, r7, #3
 800639c:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800639e:	1cfb      	adds	r3, r7, #3
 80063a0:	781b      	ldrb	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d103      	bne.n	80063ae <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	224c      	movs	r2, #76	@ 0x4c
 80063aa:	2180      	movs	r1, #128	@ 0x80
 80063ac:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80063ae:	2300      	movs	r3, #0
}
 80063b0:	0018      	movs	r0, r3
 80063b2:	46bd      	mov	sp, r7
 80063b4:	b002      	add	sp, #8
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2258      	movs	r2, #88	@ 0x58
 80063c4:	5a9b      	ldrh	r3, [r3, r2]
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	4a05      	ldr	r2, [pc, #20]	@ (80063e0 <USB_DevConnect+0x28>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	b299      	uxth	r1, r3
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2258      	movs	r2, #88	@ 0x58
 80063d2:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	0018      	movs	r0, r3
 80063d8:	46bd      	mov	sp, r7
 80063da:	b002      	add	sp, #8
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	46c0      	nop			@ (mov r8, r8)
 80063e0:	ffff8000 	.word	0xffff8000

080063e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2244      	movs	r2, #68	@ 0x44
 80063f0:	5a9b      	ldrh	r3, [r3, r2]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80063f6:	68fb      	ldr	r3, [r7, #12]
}
 80063f8:	0018      	movs	r0, r3
 80063fa:	46bd      	mov	sp, r7
 80063fc:	b004      	add	sp, #16
 80063fe:	bd80      	pop	{r7, pc}

08006400 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	@ 0x28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	0019      	movs	r1, r3
 800640c:	1dbb      	adds	r3, r7, #6
 800640e:	801a      	strh	r2, [r3, #0]
 8006410:	1d3b      	adds	r3, r7, #4
 8006412:	1c0a      	adds	r2, r1, #0
 8006414:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006416:	1d3b      	adds	r3, r7, #4
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	3301      	adds	r3, #1
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006428:	1dbb      	adds	r3, r7, #6
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	18d3      	adds	r3, r2, r3
 8006430:	2280      	movs	r2, #128	@ 0x80
 8006432:	00d2      	lsls	r2, r2, #3
 8006434:	4694      	mov	ip, r2
 8006436:	4463      	add	r3, ip
 8006438:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	627b      	str	r3, [r7, #36]	@ 0x24
 800643e:	e020      	b.n	8006482 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 8006440:	69fb      	ldr	r3, [r7, #28]
 8006442:	781a      	ldrb	r2, [r3, #0]
 8006444:	2112      	movs	r1, #18
 8006446:	187b      	adds	r3, r7, r1
 8006448:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	3301      	adds	r3, #1
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	021b      	lsls	r3, r3, #8
 8006452:	b21a      	sxth	r2, r3
 8006454:	187b      	adds	r3, r7, r1
 8006456:	2000      	movs	r0, #0
 8006458:	5e1b      	ldrsh	r3, [r3, r0]
 800645a:	4313      	orrs	r3, r2
 800645c:	b21a      	sxth	r2, r3
 800645e:	187b      	adds	r3, r7, r1
 8006460:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	187a      	adds	r2, r7, r1
 8006466:	8812      	ldrh	r2, [r2, #0]
 8006468:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	3302      	adds	r3, #2
 800646e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	3301      	adds	r3, #1
 8006474:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	3301      	adds	r3, #1
 800647a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	3b01      	subs	r3, #1
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
 8006482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1db      	bne.n	8006440 <USB_WritePMA+0x40>
  }
}
 8006488:	46c0      	nop			@ (mov r8, r8)
 800648a:	46c0      	nop			@ (mov r8, r8)
 800648c:	46bd      	mov	sp, r7
 800648e:	b00a      	add	sp, #40	@ 0x28
 8006490:	bd80      	pop	{r7, pc}

08006492 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006492:	b580      	push	{r7, lr}
 8006494:	b08a      	sub	sp, #40	@ 0x28
 8006496:	af00      	add	r7, sp, #0
 8006498:	60f8      	str	r0, [r7, #12]
 800649a:	60b9      	str	r1, [r7, #8]
 800649c:	0019      	movs	r1, r3
 800649e:	1dbb      	adds	r3, r7, #6
 80064a0:	801a      	strh	r2, [r3, #0]
 80064a2:	1d3b      	adds	r3, r7, #4
 80064a4:	1c0a      	adds	r2, r1, #0
 80064a6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80064a8:	1d3b      	adds	r3, r7, #4
 80064aa:	881b      	ldrh	r3, [r3, #0]
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80064ba:	1dbb      	adds	r3, r7, #6
 80064bc:	881a      	ldrh	r2, [r3, #0]
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	18d3      	adds	r3, r2, r3
 80064c2:	2280      	movs	r2, #128	@ 0x80
 80064c4:	00d2      	lsls	r2, r2, #3
 80064c6:	4694      	mov	ip, r2
 80064c8:	4463      	add	r3, ip
 80064ca:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80064cc:	69bb      	ldr	r3, [r7, #24]
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d0:	e018      	b.n	8006504 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	881b      	ldrh	r3, [r3, #0]
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	3302      	adds	r3, #2
 80064de:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	3301      	adds	r3, #1
 80064ec:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	0a1b      	lsrs	r3, r3, #8
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80064f8:	69fb      	ldr	r3, [r7, #28]
 80064fa:	3301      	adds	r3, #1
 80064fc:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	3b01      	subs	r3, #1
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1e3      	bne.n	80064d2 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800650a:	1d3b      	adds	r3, r7, #4
 800650c:	881b      	ldrh	r3, [r3, #0]
 800650e:	2201      	movs	r2, #1
 8006510:	4013      	ands	r3, r2
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	881b      	ldrh	r3, [r3, #0]
 800651c:	b29b      	uxth	r3, r3
 800651e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	b2da      	uxtb	r2, r3
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	701a      	strb	r2, [r3, #0]
  }
}
 8006528:	46c0      	nop			@ (mov r8, r8)
 800652a:	46bd      	mov	sp, r7
 800652c:	b00a      	add	sp, #40	@ 0x28
 800652e:	bd80      	pop	{r7, pc}

08006530 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b084      	sub	sp, #16
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8006538:	4b0d      	ldr	r3, [pc, #52]	@ (8006570 <LL_mDelay+0x40>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800653e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3301      	adds	r3, #1
 8006544:	d00c      	beq.n	8006560 <LL_mDelay+0x30>
  {
    Delay++;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3301      	adds	r3, #1
 800654a:	607b      	str	r3, [r7, #4]
 800654c:	e008      	b.n	8006560 <LL_mDelay+0x30>
  }

  while (Delay)
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800654e:	4b08      	ldr	r3, [pc, #32]	@ (8006570 <LL_mDelay+0x40>)
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	2380      	movs	r3, #128	@ 0x80
 8006554:	025b      	lsls	r3, r3, #9
 8006556:	4013      	ands	r3, r2
 8006558:	d002      	beq.n	8006560 <LL_mDelay+0x30>
    {
      Delay--;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	3b01      	subs	r3, #1
 800655e:	607b      	str	r3, [r7, #4]
  while (Delay)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1f3      	bne.n	800654e <LL_mDelay+0x1e>
    }
  }
}
 8006566:	46c0      	nop			@ (mov r8, r8)
 8006568:	46c0      	nop			@ (mov r8, r8)
 800656a:	46bd      	mov	sp, r7
 800656c:	b004      	add	sp, #16
 800656e:	bd80      	pop	{r7, pc}
 8006570:	e000e010 	.word	0xe000e010

08006574 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	000a      	movs	r2, r1
 800657e:	1cfb      	adds	r3, r7, #3
 8006580:	701a      	strb	r2, [r3, #0]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	2304      	movs	r3, #4
 8006586:	2203      	movs	r2, #3
 8006588:	2181      	movs	r1, #129	@ 0x81
 800658a:	f001 fe60 	bl	800824e <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2201      	movs	r2, #1
 8006592:	62da      	str	r2, [r3, #44]	@ 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8006594:	2010      	movs	r0, #16
 8006596:	f001 ffdb 	bl	8008550 <USBD_static_malloc>
 800659a:	0001      	movs	r1, r0
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	23ae      	movs	r3, #174	@ 0xae
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	23ae      	movs	r3, #174	@ 0xae
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	58d3      	ldr	r3, [r2, r3]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d101      	bne.n	80065b4 <USBD_HID_Init+0x40>
  {
    return USBD_FAIL;
 80065b0:	2302      	movs	r3, #2
 80065b2:	e006      	b.n	80065c2 <USBD_HID_Init+0x4e>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	23ae      	movs	r3, #174	@ 0xae
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	58d3      	ldr	r3, [r2, r3]
 80065bc:	2200      	movs	r2, #0
 80065be:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	0018      	movs	r0, r3
 80065c4:	46bd      	mov	sp, r7
 80065c6:	b002      	add	sp, #8
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b082      	sub	sp, #8
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	000a      	movs	r2, r1
 80065d4:	1cfb      	adds	r3, r7, #3
 80065d6:	701a      	strb	r2, [r3, #0]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2181      	movs	r1, #129	@ 0x81
 80065dc:	0018      	movs	r0, r3
 80065de:	f001 fe6d 	bl	80082bc <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	23ae      	movs	r3, #174	@ 0xae
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	58d3      	ldr	r3, [r2, r3]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <USBD_HID_DeInit+0x42>
  {
    USBD_free(pdev->pClassData);
 80065f4:	687a      	ldr	r2, [r7, #4]
 80065f6:	23ae      	movs	r3, #174	@ 0xae
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	58d3      	ldr	r3, [r2, r3]
 80065fc:	0018      	movs	r0, r3
 80065fe:	f001 ffb3 	bl	8008568 <USBD_static_free>
    pdev->pClassData = NULL;
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	23ae      	movs	r3, #174	@ 0xae
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	2100      	movs	r1, #0
 800660a:	50d1      	str	r1, [r2, r3]
  }

  return USBD_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	0018      	movs	r0, r3
 8006610:	46bd      	mov	sp, r7
 8006612:	b002      	add	sp, #8
 8006614:	bd80      	pop	{r7, pc}
	...

08006618 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b088      	sub	sp, #32
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	23ae      	movs	r3, #174	@ 0xae
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	58d3      	ldr	r3, [r2, r3]
 800662a:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800662c:	231e      	movs	r3, #30
 800662e:	18fb      	adds	r3, r7, r3
 8006630:	2200      	movs	r2, #0
 8006632:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8006638:	230e      	movs	r3, #14
 800663a:	18fb      	adds	r3, r7, r3
 800663c:	2200      	movs	r2, #0
 800663e:	801a      	strh	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006640:	2317      	movs	r3, #23
 8006642:	18fb      	adds	r3, r7, r3
 8006644:	2200      	movs	r2, #0
 8006646:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	001a      	movs	r2, r3
 800664e:	2360      	movs	r3, #96	@ 0x60
 8006650:	4013      	ands	r3, r2
 8006652:	d03a      	beq.n	80066ca <USBD_HID_Setup+0xb2>
 8006654:	2b20      	cmp	r3, #32
 8006656:	d000      	beq.n	800665a <USBD_HID_Setup+0x42>
 8006658:	e0d6      	b.n	8006808 <USBD_HID_Setup+0x1f0>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	785b      	ldrb	r3, [r3, #1]
 800665e:	2b0b      	cmp	r3, #11
 8006660:	d008      	beq.n	8006674 <USBD_HID_Setup+0x5c>
 8006662:	dc26      	bgt.n	80066b2 <USBD_HID_Setup+0x9a>
 8006664:	2b0a      	cmp	r3, #10
 8006666:	d013      	beq.n	8006690 <USBD_HID_Setup+0x78>
 8006668:	dc23      	bgt.n	80066b2 <USBD_HID_Setup+0x9a>
 800666a:	2b02      	cmp	r3, #2
 800666c:	d019      	beq.n	80066a2 <USBD_HID_Setup+0x8a>
 800666e:	2b03      	cmp	r3, #3
 8006670:	d007      	beq.n	8006682 <USBD_HID_Setup+0x6a>
 8006672:	e01e      	b.n	80066b2 <USBD_HID_Setup+0x9a>
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	885b      	ldrh	r3, [r3, #2]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	001a      	movs	r2, r3
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	601a      	str	r2, [r3, #0]
          break;
 8006680:	e022      	b.n	80066c8 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8006682:	6939      	ldr	r1, [r7, #16]
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	0018      	movs	r0, r3
 800668a:	f001 fabc 	bl	8007c06 <USBD_CtlSendData>
          break;
 800668e:	e01b      	b.n	80066c8 <USBD_HID_Setup+0xb0>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	885b      	ldrh	r3, [r3, #2]
 8006694:	0a1b      	lsrs	r3, r3, #8
 8006696:	b29b      	uxth	r3, r3
 8006698:	b2db      	uxtb	r3, r3
 800669a:	001a      	movs	r2, r3
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	605a      	str	r2, [r3, #4]
          break;
 80066a0:	e012      	b.n	80066c8 <USBD_HID_Setup+0xb0>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	1d19      	adds	r1, r3, #4
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2201      	movs	r2, #1
 80066aa:	0018      	movs	r0, r3
 80066ac:	f001 faab 	bl	8007c06 <USBD_CtlSendData>
          break;
 80066b0:	e00a      	b.n	80066c8 <USBD_HID_Setup+0xb0>

        default:
          USBD_CtlError(pdev, req);
 80066b2:	683a      	ldr	r2, [r7, #0]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	0011      	movs	r1, r2
 80066b8:	0018      	movs	r0, r3
 80066ba:	f001 fa26 	bl	8007b0a <USBD_CtlError>
          ret = USBD_FAIL;
 80066be:	2317      	movs	r3, #23
 80066c0:	18fb      	adds	r3, r7, r3
 80066c2:	2202      	movs	r2, #2
 80066c4:	701a      	strb	r2, [r3, #0]
          break;
 80066c6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80066c8:	e0a9      	b.n	800681e <USBD_HID_Setup+0x206>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	785b      	ldrb	r3, [r3, #1]
 80066ce:	2b0b      	cmp	r3, #11
 80066d0:	d100      	bne.n	80066d4 <USBD_HID_Setup+0xbc>
 80066d2:	e075      	b.n	80067c0 <USBD_HID_Setup+0x1a8>
 80066d4:	dd00      	ble.n	80066d8 <USBD_HID_Setup+0xc0>
 80066d6:	e08b      	b.n	80067f0 <USBD_HID_Setup+0x1d8>
 80066d8:	2b0a      	cmp	r3, #10
 80066da:	d057      	beq.n	800678c <USBD_HID_Setup+0x174>
 80066dc:	dd00      	ble.n	80066e0 <USBD_HID_Setup+0xc8>
 80066de:	e087      	b.n	80067f0 <USBD_HID_Setup+0x1d8>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d002      	beq.n	80066ea <USBD_HID_Setup+0xd2>
 80066e4:	2b06      	cmp	r3, #6
 80066e6:	d019      	beq.n	800671c <USBD_HID_Setup+0x104>
 80066e8:	e082      	b.n	80067f0 <USBD_HID_Setup+0x1d8>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	23a7      	movs	r3, #167	@ 0xa7
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	5cd3      	ldrb	r3, [r2, r3]
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	d107      	bne.n	8006706 <USBD_HID_Setup+0xee>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80066f6:	230e      	movs	r3, #14
 80066f8:	18f9      	adds	r1, r7, r3
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	0018      	movs	r0, r3
 8006700:	f001 fa81 	bl	8007c06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006704:	e07f      	b.n	8006806 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	0011      	movs	r1, r2
 800670c:	0018      	movs	r0, r3
 800670e:	f001 f9fc 	bl	8007b0a <USBD_CtlError>
            ret = USBD_FAIL;
 8006712:	2317      	movs	r3, #23
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	2202      	movs	r2, #2
 8006718:	701a      	strb	r2, [r3, #0]
          break;
 800671a:	e074      	b.n	8006806 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	885b      	ldrh	r3, [r3, #2]
 8006720:	0a1b      	lsrs	r3, r3, #8
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b22      	cmp	r3, #34	@ 0x22
 8006726:	d10b      	bne.n	8006740 <USBD_HID_Setup+0x128>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	88db      	ldrh	r3, [r3, #6]
 800672c:	221e      	movs	r2, #30
 800672e:	18ba      	adds	r2, r7, r2
 8006730:	b299      	uxth	r1, r3
 8006732:	293f      	cmp	r1, #63	@ 0x3f
 8006734:	d900      	bls.n	8006738 <USBD_HID_Setup+0x120>
 8006736:	233f      	movs	r3, #63	@ 0x3f
 8006738:	8013      	strh	r3, [r2, #0]
            pbuf = HID_MOUSE_ReportDesc;
 800673a:	4b3c      	ldr	r3, [pc, #240]	@ (800682c <USBD_HID_Setup+0x214>)
 800673c:	61bb      	str	r3, [r7, #24]
 800673e:	e01c      	b.n	800677a <USBD_HID_Setup+0x162>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	885b      	ldrh	r3, [r3, #2]
 8006744:	0a1b      	lsrs	r3, r3, #8
 8006746:	b29b      	uxth	r3, r3
 8006748:	2b21      	cmp	r3, #33	@ 0x21
 800674a:	d10b      	bne.n	8006764 <USBD_HID_Setup+0x14c>
          {
            pbuf = USBD_HID_Desc;
 800674c:	4b38      	ldr	r3, [pc, #224]	@ (8006830 <USBD_HID_Setup+0x218>)
 800674e:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	88db      	ldrh	r3, [r3, #6]
 8006754:	221e      	movs	r2, #30
 8006756:	18ba      	adds	r2, r7, r2
 8006758:	b299      	uxth	r1, r3
 800675a:	2909      	cmp	r1, #9
 800675c:	d900      	bls.n	8006760 <USBD_HID_Setup+0x148>
 800675e:	2309      	movs	r3, #9
 8006760:	8013      	strh	r3, [r2, #0]
 8006762:	e00a      	b.n	800677a <USBD_HID_Setup+0x162>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8006764:	683a      	ldr	r2, [r7, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	0011      	movs	r1, r2
 800676a:	0018      	movs	r0, r3
 800676c:	f001 f9cd 	bl	8007b0a <USBD_CtlError>
            ret = USBD_FAIL;
 8006770:	2317      	movs	r3, #23
 8006772:	18fb      	adds	r3, r7, r3
 8006774:	2202      	movs	r2, #2
 8006776:	701a      	strb	r2, [r3, #0]
            break;
 8006778:	e045      	b.n	8006806 <USBD_HID_Setup+0x1ee>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 800677a:	231e      	movs	r3, #30
 800677c:	18fb      	adds	r3, r7, r3
 800677e:	881a      	ldrh	r2, [r3, #0]
 8006780:	69b9      	ldr	r1, [r7, #24]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	0018      	movs	r0, r3
 8006786:	f001 fa3e 	bl	8007c06 <USBD_CtlSendData>
          break;
 800678a:	e03c      	b.n	8006806 <USBD_HID_Setup+0x1ee>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	23a7      	movs	r3, #167	@ 0xa7
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	5cd3      	ldrb	r3, [r2, r3]
 8006794:	2b03      	cmp	r3, #3
 8006796:	d108      	bne.n	80067aa <USBD_HID_Setup+0x192>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	3308      	adds	r3, #8
 800679c:	0019      	movs	r1, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2201      	movs	r2, #1
 80067a2:	0018      	movs	r0, r3
 80067a4:	f001 fa2f 	bl	8007c06 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067a8:	e02d      	b.n	8006806 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	0011      	movs	r1, r2
 80067b0:	0018      	movs	r0, r3
 80067b2:	f001 f9aa 	bl	8007b0a <USBD_CtlError>
            ret = USBD_FAIL;
 80067b6:	2317      	movs	r3, #23
 80067b8:	18fb      	adds	r3, r7, r3
 80067ba:	2202      	movs	r2, #2
 80067bc:	701a      	strb	r2, [r3, #0]
          break;
 80067be:	e022      	b.n	8006806 <USBD_HID_Setup+0x1ee>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	23a7      	movs	r3, #167	@ 0xa7
 80067c4:	009b      	lsls	r3, r3, #2
 80067c6:	5cd3      	ldrb	r3, [r2, r3]
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	d106      	bne.n	80067da <USBD_HID_Setup+0x1c2>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	885b      	ldrh	r3, [r3, #2]
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	001a      	movs	r2, r3
 80067d4:	693b      	ldr	r3, [r7, #16]
 80067d6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80067d8:	e015      	b.n	8006806 <USBD_HID_Setup+0x1ee>
            USBD_CtlError(pdev, req);
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	0011      	movs	r1, r2
 80067e0:	0018      	movs	r0, r3
 80067e2:	f001 f992 	bl	8007b0a <USBD_CtlError>
            ret = USBD_FAIL;
 80067e6:	2317      	movs	r3, #23
 80067e8:	18fb      	adds	r3, r7, r3
 80067ea:	2202      	movs	r2, #2
 80067ec:	701a      	strb	r2, [r3, #0]
          break;
 80067ee:	e00a      	b.n	8006806 <USBD_HID_Setup+0x1ee>

        default:
          USBD_CtlError(pdev, req);
 80067f0:	683a      	ldr	r2, [r7, #0]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	0011      	movs	r1, r2
 80067f6:	0018      	movs	r0, r3
 80067f8:	f001 f987 	bl	8007b0a <USBD_CtlError>
          ret = USBD_FAIL;
 80067fc:	2317      	movs	r3, #23
 80067fe:	18fb      	adds	r3, r7, r3
 8006800:	2202      	movs	r2, #2
 8006802:	701a      	strb	r2, [r3, #0]
          break;
 8006804:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006806:	e00a      	b.n	800681e <USBD_HID_Setup+0x206>

    default:
      USBD_CtlError(pdev, req);
 8006808:	683a      	ldr	r2, [r7, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0011      	movs	r1, r2
 800680e:	0018      	movs	r0, r3
 8006810:	f001 f97b 	bl	8007b0a <USBD_CtlError>
      ret = USBD_FAIL;
 8006814:	2317      	movs	r3, #23
 8006816:	18fb      	adds	r3, r7, r3
 8006818:	2202      	movs	r2, #2
 800681a:	701a      	strb	r2, [r3, #0]
      break;
 800681c:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800681e:	2317      	movs	r3, #23
 8006820:	18fb      	adds	r3, r7, r3
 8006822:	781b      	ldrb	r3, [r3, #0]
}
 8006824:	0018      	movs	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	b008      	add	sp, #32
 800682a:	bd80      	pop	{r7, pc}
 800682c:	20000188 	.word	0x20000188
 8006830:	20000170 	.word	0x20000170

08006834 <USBD_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef  *pdev,
                            uint8_t *report,
                            uint16_t len)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	1dbb      	adds	r3, r7, #6
 8006840:	801a      	strh	r2, [r3, #0]
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassData;
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	23ae      	movs	r3, #174	@ 0xae
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	58d3      	ldr	r3, [r2, r3]
 800684a:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	23a7      	movs	r3, #167	@ 0xa7
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	5cd3      	ldrb	r3, [r2, r3]
 8006854:	2b03      	cmp	r3, #3
 8006856:	d10d      	bne.n	8006874 <USBD_HID_SendReport+0x40>
  {
    if (hhid->state == HID_IDLE)
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	7b1b      	ldrb	r3, [r3, #12]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d109      	bne.n	8006874 <USBD_HID_SendReport+0x40>
    {
      hhid->state = HID_BUSY;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2201      	movs	r2, #1
 8006864:	731a      	strb	r2, [r3, #12]
      USBD_LL_Transmit(pdev,
 8006866:	1dbb      	adds	r3, r7, #6
 8006868:	881b      	ldrh	r3, [r3, #0]
 800686a:	68ba      	ldr	r2, [r7, #8]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	2181      	movs	r1, #129	@ 0x81
 8006870:	f001 fe00 	bl	8008474 <USBD_LL_Transmit>
                       HID_EPIN_ADDR,
                       report,
                       len);
    }
  }
  return USBD_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	0018      	movs	r0, r3
 8006878:	46bd      	mov	sp, r7
 800687a:	b006      	add	sp, #24
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2222      	movs	r2, #34	@ 0x22
 800688c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 800688e:	4b02      	ldr	r3, [pc, #8]	@ (8006898 <USBD_HID_GetFSCfgDesc+0x18>)
}
 8006890:	0018      	movs	r0, r3
 8006892:	46bd      	mov	sp, r7
 8006894:	b002      	add	sp, #8
 8006896:	bd80      	pop	{r7, pc}
 8006898:	20000104 	.word	0x20000104

0800689c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2222      	movs	r2, #34	@ 0x22
 80068a8:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 80068aa:	4b02      	ldr	r3, [pc, #8]	@ (80068b4 <USBD_HID_GetHSCfgDesc+0x18>)
}
 80068ac:	0018      	movs	r0, r3
 80068ae:	46bd      	mov	sp, r7
 80068b0:	b002      	add	sp, #8
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	20000128 	.word	0x20000128

080068b8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b082      	sub	sp, #8
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2222      	movs	r2, #34	@ 0x22
 80068c4:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 80068c6:	4b02      	ldr	r3, [pc, #8]	@ (80068d0 <USBD_HID_GetOtherSpeedCfgDesc+0x18>)
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b002      	add	sp, #8
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	2000014c 	.word	0x2000014c

080068d4 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b082      	sub	sp, #8
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	000a      	movs	r2, r1
 80068de:	1cfb      	adds	r3, r7, #3
 80068e0:	701a      	strb	r2, [r3, #0]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 80068e2:	687a      	ldr	r2, [r7, #4]
 80068e4:	23ae      	movs	r3, #174	@ 0xae
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	58d3      	ldr	r3, [r2, r3]
 80068ea:	2200      	movs	r2, #0
 80068ec:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	0018      	movs	r0, r3
 80068f2:	46bd      	mov	sp, r7
 80068f4:	b002      	add	sp, #8
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	220a      	movs	r2, #10
 8006904:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8006906:	4b02      	ldr	r3, [pc, #8]	@ (8006910 <USBD_HID_GetDeviceQualifierDesc+0x18>)
}
 8006908:	0018      	movs	r0, r3
 800690a:	46bd      	mov	sp, r7
 800690c:	b002      	add	sp, #8
 800690e:	bd80      	pop	{r7, pc}
 8006910:	2000017c 	.word	0x2000017c

08006914 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	1dfb      	adds	r3, r7, #7
 8006920:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006928:	2302      	movs	r3, #2
 800692a:	e020      	b.n	800696e <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	23ad      	movs	r3, #173	@ 0xad
 8006930:	009b      	lsls	r3, r3, #2
 8006932:	58d3      	ldr	r3, [r2, r3]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d004      	beq.n	8006942 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	23ad      	movs	r3, #173	@ 0xad
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	2100      	movs	r1, #0
 8006940:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d004      	beq.n	8006952 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	23ac      	movs	r3, #172	@ 0xac
 800694c:	009b      	lsls	r3, r3, #2
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	23a7      	movs	r3, #167	@ 0xa7
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	2101      	movs	r1, #1
 800695a:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	1dfa      	adds	r2, r7, #7
 8006960:	7812      	ldrb	r2, [r2, #0]
 8006962:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	0018      	movs	r0, r3
 8006968:	f001 fbfc 	bl	8008164 <USBD_LL_Init>

  return USBD_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	0018      	movs	r0, r3
 8006970:	46bd      	mov	sp, r7
 8006972:	b004      	add	sp, #16
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b084      	sub	sp, #16
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006980:	200f      	movs	r0, #15
 8006982:	183b      	adds	r3, r7, r0
 8006984:	2200      	movs	r2, #0
 8006986:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	23ad      	movs	r3, #173	@ 0xad
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	6839      	ldr	r1, [r7, #0]
 8006996:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8006998:	183b      	adds	r3, r7, r0
 800699a:	2200      	movs	r2, #0
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	e003      	b.n	80069a8 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80069a0:	230f      	movs	r3, #15
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	2202      	movs	r2, #2
 80069a6:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80069a8:	230f      	movs	r3, #15
 80069aa:	18fb      	adds	r3, r7, r3
 80069ac:	781b      	ldrb	r3, [r3, #0]
}
 80069ae:	0018      	movs	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b004      	add	sp, #16
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b082      	sub	sp, #8
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	0018      	movs	r0, r3
 80069c2:	f001 fc1f 	bl	8008204 <USBD_LL_Start>

  return USBD_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	0018      	movs	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b002      	add	sp, #8
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	0018      	movs	r0, r3
 80069dc:	46bd      	mov	sp, r7
 80069de:	b002      	add	sp, #8
 80069e0:	bd80      	pop	{r7, pc}

080069e2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069e2:	b590      	push	{r4, r7, lr}
 80069e4:	b085      	sub	sp, #20
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	000a      	movs	r2, r1
 80069ec:	1cfb      	adds	r3, r7, #3
 80069ee:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069f0:	240f      	movs	r4, #15
 80069f2:	193b      	adds	r3, r7, r4
 80069f4:	2202      	movs	r2, #2
 80069f6:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	23ad      	movs	r3, #173	@ 0xad
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	58d3      	ldr	r3, [r2, r3]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00e      	beq.n	8006a22 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	23ad      	movs	r3, #173	@ 0xad
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	58d3      	ldr	r3, [r2, r3]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	1cfa      	adds	r2, r7, #3
 8006a10:	7811      	ldrb	r1, [r2, #0]
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	0010      	movs	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	1e03      	subs	r3, r0, #0
 8006a1a:	d102      	bne.n	8006a22 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8006a1c:	193b      	adds	r3, r7, r4
 8006a1e:	2200      	movs	r2, #0
 8006a20:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8006a22:	230f      	movs	r3, #15
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	781b      	ldrb	r3, [r3, #0]
}
 8006a28:	0018      	movs	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b005      	add	sp, #20
 8006a2e:	bd90      	pop	{r4, r7, pc}

08006a30 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	000a      	movs	r2, r1
 8006a3a:	1cfb      	adds	r3, r7, #3
 8006a3c:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	23ad      	movs	r3, #173	@ 0xad
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	58d3      	ldr	r3, [r2, r3]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	1cfa      	adds	r2, r7, #3
 8006a4a:	7811      	ldrb	r1, [r2, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	0010      	movs	r0, r2
 8006a50:	4798      	blx	r3

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	0018      	movs	r0, r3
 8006a56:	46bd      	mov	sp, r7
 8006a58:	b002      	add	sp, #8
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	22aa      	movs	r2, #170	@ 0xaa
 8006a6a:	0092      	lsls	r2, r2, #2
 8006a6c:	4694      	mov	ip, r2
 8006a6e:	4463      	add	r3, ip
 8006a70:	683a      	ldr	r2, [r7, #0]
 8006a72:	0011      	movs	r1, r2
 8006a74:	0018      	movs	r0, r3
 8006a76:	f001 f810 	bl	8007a9a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	23a5      	movs	r3, #165	@ 0xa5
 8006a7e:	009b      	lsls	r3, r3, #2
 8006a80:	2101      	movs	r1, #1
 8006a82:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a23      	ldr	r2, [pc, #140]	@ (8006b14 <USBD_LL_SetupStage+0xb8>)
 8006a88:	5a9b      	ldrh	r3, [r3, r2]
 8006a8a:	0019      	movs	r1, r3
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	23a6      	movs	r3, #166	@ 0xa6
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	23aa      	movs	r3, #170	@ 0xaa
 8006a98:	009b      	lsls	r3, r3, #2
 8006a9a:	5cd3      	ldrb	r3, [r2, r3]
 8006a9c:	001a      	movs	r2, r3
 8006a9e:	231f      	movs	r3, #31
 8006aa0:	4013      	ands	r3, r2
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d019      	beq.n	8006ada <USBD_LL_SetupStage+0x7e>
 8006aa6:	d822      	bhi.n	8006aee <USBD_LL_SetupStage+0x92>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <USBD_LL_SetupStage+0x56>
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d00a      	beq.n	8006ac6 <USBD_LL_SetupStage+0x6a>
 8006ab0:	e01d      	b.n	8006aee <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	22aa      	movs	r2, #170	@ 0xaa
 8006ab6:	0092      	lsls	r2, r2, #2
 8006ab8:	189a      	adds	r2, r3, r2
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	0011      	movs	r1, r2
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f000 fa10 	bl	8006ee4 <USBD_StdDevReq>
      break;
 8006ac4:	e020      	b.n	8006b08 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	22aa      	movs	r2, #170	@ 0xaa
 8006aca:	0092      	lsls	r2, r2, #2
 8006acc:	189a      	adds	r2, r3, r2
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	0011      	movs	r1, r2
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	f000 fa78 	bl	8006fc8 <USBD_StdItfReq>
      break;
 8006ad8:	e016      	b.n	8006b08 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	22aa      	movs	r2, #170	@ 0xaa
 8006ade:	0092      	lsls	r2, r2, #2
 8006ae0:	189a      	adds	r2, r3, r2
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	0011      	movs	r1, r2
 8006ae6:	0018      	movs	r0, r3
 8006ae8:	f000 fac5 	bl	8007076 <USBD_StdEPReq>
      break;
 8006aec:	e00c      	b.n	8006b08 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	23aa      	movs	r3, #170	@ 0xaa
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	5cd3      	ldrb	r3, [r2, r3]
 8006af6:	227f      	movs	r2, #127	@ 0x7f
 8006af8:	4393      	bics	r3, r2
 8006afa:	b2da      	uxtb	r2, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	0011      	movs	r1, r2
 8006b00:	0018      	movs	r0, r3
 8006b02:	f001 fc06 	bl	8008312 <USBD_LL_StallEP>
      break;
 8006b06:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	b002      	add	sp, #8
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	46c0      	nop			@ (mov r8, r8)
 8006b14:	000002ae 	.word	0x000002ae

08006b18 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	607a      	str	r2, [r7, #4]
 8006b22:	200b      	movs	r0, #11
 8006b24:	183b      	adds	r3, r7, r0
 8006b26:	1c0a      	adds	r2, r1, #0
 8006b28:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b2a:	183b      	adds	r3, r7, r0
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d154      	bne.n	8006bdc <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3355      	adds	r3, #85	@ 0x55
 8006b36:	33ff      	adds	r3, #255	@ 0xff
 8006b38:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	23a5      	movs	r3, #165	@ 0xa5
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	58d3      	ldr	r3, [r2, r3]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d139      	bne.n	8006bba <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b46:	697b      	ldr	r3, [r7, #20]
 8006b48:	68da      	ldr	r2, [r3, #12]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d919      	bls.n	8006b86 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	68da      	ldr	r2, [r3, #12]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	1ad2      	subs	r2, r2, r3
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d203      	bcs.n	8006b74 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	e002      	b.n	8006b7a <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	68f8      	ldr	r0, [r7, #12]
 8006b7e:	001a      	movs	r2, r3
 8006b80:	f001 f874 	bl	8007c6c <USBD_CtlContinueRx>
 8006b84:	e045      	b.n	8006c12 <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	23ad      	movs	r3, #173	@ 0xad
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	58d3      	ldr	r3, [r2, r3]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00d      	beq.n	8006bb0 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	23a7      	movs	r3, #167	@ 0xa7
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b9c:	2b03      	cmp	r3, #3
 8006b9e:	d107      	bne.n	8006bb0 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	23ad      	movs	r3, #173	@ 0xad
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	58d3      	ldr	r3, [r2, r3]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	0010      	movs	r0, r2
 8006bae:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	f001 f86d 	bl	8007c92 <USBD_CtlSendStatus>
 8006bb8:	e02b      	b.n	8006c12 <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006bba:	68fa      	ldr	r2, [r7, #12]
 8006bbc:	23a5      	movs	r3, #165	@ 0xa5
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	58d3      	ldr	r3, [r2, r3]
 8006bc2:	2b05      	cmp	r3, #5
 8006bc4:	d125      	bne.n	8006c12 <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	23a5      	movs	r3, #165	@ 0xa5
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	2100      	movs	r1, #0
 8006bce:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	0018      	movs	r0, r3
 8006bd6:	f001 fb9c 	bl	8008312 <USBD_LL_StallEP>
 8006bda:	e01a      	b.n	8006c12 <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	23ad      	movs	r3, #173	@ 0xad
 8006be0:	009b      	lsls	r3, r3, #2
 8006be2:	58d3      	ldr	r3, [r2, r3]
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d011      	beq.n	8006c0e <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	23a7      	movs	r3, #167	@ 0xa7
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d10b      	bne.n	8006c0e <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006bf6:	68fa      	ldr	r2, [r7, #12]
 8006bf8:	23ad      	movs	r3, #173	@ 0xad
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	58d3      	ldr	r3, [r2, r3]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	220b      	movs	r2, #11
 8006c02:	18ba      	adds	r2, r7, r2
 8006c04:	7811      	ldrb	r1, [r2, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	0010      	movs	r0, r2
 8006c0a:	4798      	blx	r3
 8006c0c:	e001      	b.n	8006c12 <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e000      	b.n	8006c14 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8006c12:	2300      	movs	r3, #0
}
 8006c14:	0018      	movs	r0, r3
 8006c16:	46bd      	mov	sp, r7
 8006c18:	b006      	add	sp, #24
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	200b      	movs	r0, #11
 8006c28:	183b      	adds	r3, r7, r0
 8006c2a:	1c0a      	adds	r2, r1, #0
 8006c2c:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c2e:	183b      	adds	r3, r7, r0
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d000      	beq.n	8006c38 <USBD_LL_DataInStage+0x1c>
 8006c36:	e08e      	b.n	8006d56 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	3314      	adds	r3, #20
 8006c3c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	23a5      	movs	r3, #165	@ 0xa5
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	58d3      	ldr	r3, [r2, r3]
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d164      	bne.n	8006d14 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d915      	bls.n	8006c82 <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	697b      	ldr	r3, [r7, #20]
 8006c5c:	691b      	ldr	r3, [r3, #16]
 8006c5e:	1ad2      	subs	r2, r2, r3
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	b29a      	uxth	r2, r3
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	0018      	movs	r0, r3
 8006c70:	f000 ffe9 	bl	8007c46 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	2300      	movs	r3, #0
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	f001 fc31 	bl	80084e2 <USBD_LL_PrepareReceive>
 8006c80:	e059      	b.n	8006d36 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	689a      	ldr	r2, [r3, #8]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	0019      	movs	r1, r3
 8006c8c:	0010      	movs	r0, r2
 8006c8e:	f7f9 fac1 	bl	8000214 <__aeabi_uidivmod>
 8006c92:	1e0b      	subs	r3, r1, #0
 8006c94:	d11f      	bne.n	8006cd6 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	689a      	ldr	r2, [r3, #8]
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d319      	bcc.n	8006cd6 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	68f9      	ldr	r1, [r7, #12]
 8006ca8:	23a6      	movs	r3, #166	@ 0xa6
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d211      	bcs.n	8006cd6 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	0018      	movs	r0, r3
 8006cba:	f000 ffc4 	bl	8007c46 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	23a6      	movs	r3, #166	@ 0xa6
 8006cc2:	009b      	lsls	r3, r3, #2
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	2300      	movs	r3, #0
 8006ccc:	2200      	movs	r2, #0
 8006cce:	2100      	movs	r1, #0
 8006cd0:	f001 fc07 	bl	80084e2 <USBD_LL_PrepareReceive>
 8006cd4:	e02f      	b.n	8006d36 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	23ad      	movs	r3, #173	@ 0xad
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	58d3      	ldr	r3, [r2, r3]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d00d      	beq.n	8006d00 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006ce4:	68fa      	ldr	r2, [r7, #12]
 8006ce6:	23a7      	movs	r3, #167	@ 0xa7
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006cec:	2b03      	cmp	r3, #3
 8006cee:	d107      	bne.n	8006d00 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	23ad      	movs	r3, #173	@ 0xad
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	58d3      	ldr	r3, [r2, r3]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	0010      	movs	r0, r2
 8006cfe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2180      	movs	r1, #128	@ 0x80
 8006d04:	0018      	movs	r0, r3
 8006d06:	f001 fb04 	bl	8008312 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	0018      	movs	r0, r3
 8006d0e:	f000 ffd4 	bl	8007cba <USBD_CtlReceiveStatus>
 8006d12:	e010      	b.n	8006d36 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	23a5      	movs	r3, #165	@ 0xa5
 8006d18:	009b      	lsls	r3, r3, #2
 8006d1a:	58d3      	ldr	r3, [r2, r3]
 8006d1c:	2b04      	cmp	r3, #4
 8006d1e:	d005      	beq.n	8006d2c <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	23a5      	movs	r3, #165	@ 0xa5
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d104      	bne.n	8006d36 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2180      	movs	r1, #128	@ 0x80
 8006d30:	0018      	movs	r0, r3
 8006d32:	f001 faee 	bl	8008312 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	23a8      	movs	r3, #168	@ 0xa8
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	5cd3      	ldrb	r3, [r2, r3]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d124      	bne.n	8006d8c <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	0018      	movs	r0, r3
 8006d46:	f7ff fe43 	bl	80069d0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d4a:	68fa      	ldr	r2, [r7, #12]
 8006d4c:	23a8      	movs	r3, #168	@ 0xa8
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	2100      	movs	r1, #0
 8006d52:	54d1      	strb	r1, [r2, r3]
 8006d54:	e01a      	b.n	8006d8c <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	23ad      	movs	r3, #173	@ 0xad
 8006d5a:	009b      	lsls	r3, r3, #2
 8006d5c:	58d3      	ldr	r3, [r2, r3]
 8006d5e:	695b      	ldr	r3, [r3, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d011      	beq.n	8006d88 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	23a7      	movs	r3, #167	@ 0xa7
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d10b      	bne.n	8006d88 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	23ad      	movs	r3, #173	@ 0xad
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	58d3      	ldr	r3, [r2, r3]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	220b      	movs	r2, #11
 8006d7c:	18ba      	adds	r2, r7, r2
 8006d7e:	7811      	ldrb	r1, [r2, #0]
 8006d80:	68fa      	ldr	r2, [r7, #12]
 8006d82:	0010      	movs	r0, r2
 8006d84:	4798      	blx	r3
 8006d86:	e001      	b.n	8006d8c <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e000      	b.n	8006d8e <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8006d8c:	2300      	movs	r3, #0
}
 8006d8e:	0018      	movs	r0, r3
 8006d90:	46bd      	mov	sp, r7
 8006d92:	b006      	add	sp, #24
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b082      	sub	sp, #8
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	2340      	movs	r3, #64	@ 0x40
 8006da2:	2200      	movs	r2, #0
 8006da4:	2100      	movs	r1, #0
 8006da6:	f001 fa52 	bl	800824e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006daa:	687a      	ldr	r2, [r7, #4]
 8006dac:	23ac      	movs	r3, #172	@ 0xac
 8006dae:	005b      	lsls	r3, r3, #1
 8006db0:	2101      	movs	r1, #1
 8006db2:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	23b2      	movs	r3, #178	@ 0xb2
 8006db8:	005b      	lsls	r3, r3, #1
 8006dba:	2140      	movs	r1, #64	@ 0x40
 8006dbc:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	2340      	movs	r3, #64	@ 0x40
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	2180      	movs	r1, #128	@ 0x80
 8006dc6:	f001 fa42 	bl	800824e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2240      	movs	r2, #64	@ 0x40
 8006dd4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	23a7      	movs	r3, #167	@ 0xa7
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	2101      	movs	r1, #1
 8006dde:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	23a5      	movs	r3, #165	@ 0xa5
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	2100      	movs	r1, #0
 8006de8:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	23a9      	movs	r3, #169	@ 0xa9
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	2100      	movs	r1, #0
 8006df8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	23ae      	movs	r3, #174	@ 0xae
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	58d3      	ldr	r3, [r2, r3]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00a      	beq.n	8006e1c <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	23ad      	movs	r3, #173	@ 0xad
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	58d3      	ldr	r3, [r2, r3]
 8006e0e:	685a      	ldr	r2, [r3, #4]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	b2d9      	uxtb	r1, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	0018      	movs	r0, r3
 8006e1a:	4790      	blx	r2
  }

  return USBD_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	0018      	movs	r0, r3
 8006e20:	46bd      	mov	sp, r7
 8006e22:	b002      	add	sp, #8
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	000a      	movs	r2, r1
 8006e30:	1cfb      	adds	r3, r7, #3
 8006e32:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	1cfa      	adds	r2, r7, #3
 8006e38:	7812      	ldrb	r2, [r2, #0]
 8006e3a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	0018      	movs	r0, r3
 8006e40:	46bd      	mov	sp, r7
 8006e42:	b002      	add	sp, #8
 8006e44:	bd80      	pop	{r7, pc}
	...

08006e48 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	23a7      	movs	r3, #167	@ 0xa7
 8006e54:	009b      	lsls	r3, r3, #2
 8006e56:	5cd1      	ldrb	r1, [r2, r3]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a06      	ldr	r2, [pc, #24]	@ (8006e74 <USBD_LL_Suspend+0x2c>)
 8006e5c:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	23a7      	movs	r3, #167	@ 0xa7
 8006e62:	009b      	lsls	r3, r3, #2
 8006e64:	2104      	movs	r1, #4
 8006e66:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	0018      	movs	r0, r3
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	b002      	add	sp, #8
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	46c0      	nop			@ (mov r8, r8)
 8006e74:	0000029d 	.word	0x0000029d

08006e78 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b082      	sub	sp, #8
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	23a7      	movs	r3, #167	@ 0xa7
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	5cd3      	ldrb	r3, [r2, r3]
 8006e88:	2b04      	cmp	r3, #4
 8006e8a:	d106      	bne.n	8006e9a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a05      	ldr	r2, [pc, #20]	@ (8006ea4 <USBD_LL_Resume+0x2c>)
 8006e90:	5c99      	ldrb	r1, [r3, r2]
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	23a7      	movs	r3, #167	@ 0xa7
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	0018      	movs	r0, r3
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	0000029d 	.word	0x0000029d

08006ea8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	23a7      	movs	r3, #167	@ 0xa7
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	5cd3      	ldrb	r3, [r2, r3]
 8006eb8:	2b03      	cmp	r3, #3
 8006eba:	d10e      	bne.n	8006eda <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	23ad      	movs	r3, #173	@ 0xad
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	58d3      	ldr	r3, [r2, r3]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8006eca:	687a      	ldr	r2, [r7, #4]
 8006ecc:	23ad      	movs	r3, #173	@ 0xad
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	58d3      	ldr	r3, [r2, r3]
 8006ed2:	69db      	ldr	r3, [r3, #28]
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	0010      	movs	r0, r2
 8006ed8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	0018      	movs	r0, r3
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	b002      	add	sp, #8
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eee:	230f      	movs	r3, #15
 8006ef0:	18fb      	adds	r3, r7, r3
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	001a      	movs	r2, r3
 8006efc:	2360      	movs	r3, #96	@ 0x60
 8006efe:	4013      	ands	r3, r2
 8006f00:	2b40      	cmp	r3, #64	@ 0x40
 8006f02:	d004      	beq.n	8006f0e <USBD_StdDevReq+0x2a>
 8006f04:	d84f      	bhi.n	8006fa6 <USBD_StdDevReq+0xc2>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <USBD_StdDevReq+0x3e>
 8006f0a:	2b20      	cmp	r3, #32
 8006f0c:	d14b      	bne.n	8006fa6 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	23ad      	movs	r3, #173	@ 0xad
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	58d3      	ldr	r3, [r2, r3]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	6839      	ldr	r1, [r7, #0]
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	0010      	movs	r0, r2
 8006f1e:	4798      	blx	r3
      break;
 8006f20:	e048      	b.n	8006fb4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	785b      	ldrb	r3, [r3, #1]
 8006f26:	2b09      	cmp	r3, #9
 8006f28:	d835      	bhi.n	8006f96 <USBD_StdDevReq+0xb2>
 8006f2a:	009a      	lsls	r2, r3, #2
 8006f2c:	4b25      	ldr	r3, [pc, #148]	@ (8006fc4 <USBD_StdDevReq+0xe0>)
 8006f2e:	18d3      	adds	r3, r2, r3
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006f34:	683a      	ldr	r2, [r7, #0]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	0011      	movs	r1, r2
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f000 fa52 	bl	80073e4 <USBD_GetDescriptor>
          break;
 8006f40:	e030      	b.n	8006fa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	0011      	movs	r1, r2
 8006f48:	0018      	movs	r0, r3
 8006f4a:	f000 fbfd 	bl	8007748 <USBD_SetAddress>
          break;
 8006f4e:	e029      	b.n	8006fa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	0011      	movs	r1, r2
 8006f56:	0018      	movs	r0, r3
 8006f58:	f000 fc4a 	bl	80077f0 <USBD_SetConfig>
          break;
 8006f5c:	e022      	b.n	8006fa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	0011      	movs	r1, r2
 8006f64:	0018      	movs	r0, r3
 8006f66:	f000 fce7 	bl	8007938 <USBD_GetConfig>
          break;
 8006f6a:	e01b      	b.n	8006fa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	0011      	movs	r1, r2
 8006f72:	0018      	movs	r0, r3
 8006f74:	f000 fd1b 	bl	80079ae <USBD_GetStatus>
          break;
 8006f78:	e014      	b.n	8006fa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	0011      	movs	r1, r2
 8006f80:	0018      	movs	r0, r3
 8006f82:	f000 fd4e 	bl	8007a22 <USBD_SetFeature>
          break;
 8006f86:	e00d      	b.n	8006fa4 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	0011      	movs	r1, r2
 8006f8e:	0018      	movs	r0, r3
 8006f90:	f000 fd5d 	bl	8007a4e <USBD_ClrFeature>
          break;
 8006f94:	e006      	b.n	8006fa4 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	0011      	movs	r1, r2
 8006f9c:	0018      	movs	r0, r3
 8006f9e:	f000 fdb4 	bl	8007b0a <USBD_CtlError>
          break;
 8006fa2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8006fa4:	e006      	b.n	8006fb4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8006fa6:	683a      	ldr	r2, [r7, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	0011      	movs	r1, r2
 8006fac:	0018      	movs	r0, r3
 8006fae:	f000 fdac 	bl	8007b0a <USBD_CtlError>
      break;
 8006fb2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8006fb4:	230f      	movs	r3, #15
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	781b      	ldrb	r3, [r3, #0]
}
 8006fba:	0018      	movs	r0, r3
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	b004      	add	sp, #16
 8006fc0:	bd80      	pop	{r7, pc}
 8006fc2:	46c0      	nop			@ (mov r8, r8)
 8006fc4:	0800874c 	.word	0x0800874c

08006fc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006fc8:	b5b0      	push	{r4, r5, r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fd2:	230f      	movs	r3, #15
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	001a      	movs	r2, r3
 8006fe0:	2360      	movs	r3, #96	@ 0x60
 8006fe2:	4013      	ands	r3, r2
 8006fe4:	2b40      	cmp	r3, #64	@ 0x40
 8006fe6:	d004      	beq.n	8006ff2 <USBD_StdItfReq+0x2a>
 8006fe8:	d839      	bhi.n	800705e <USBD_StdItfReq+0x96>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d001      	beq.n	8006ff2 <USBD_StdItfReq+0x2a>
 8006fee:	2b20      	cmp	r3, #32
 8006ff0:	d135      	bne.n	800705e <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006ff2:	687a      	ldr	r2, [r7, #4]
 8006ff4:	23a7      	movs	r3, #167	@ 0xa7
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	5cd3      	ldrb	r3, [r2, r3]
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	2b02      	cmp	r3, #2
 8006ffe:	d825      	bhi.n	800704c <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	889b      	ldrh	r3, [r3, #4]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b01      	cmp	r3, #1
 8007008:	d819      	bhi.n	800703e <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	23ad      	movs	r3, #173	@ 0xad
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	58d3      	ldr	r3, [r2, r3]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	250f      	movs	r5, #15
 8007016:	197c      	adds	r4, r7, r5
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	0010      	movs	r0, r2
 800701e:	4798      	blx	r3
 8007020:	0003      	movs	r3, r0
 8007022:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	88db      	ldrh	r3, [r3, #6]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d116      	bne.n	800705a <USBD_StdItfReq+0x92>
 800702c:	197b      	adds	r3, r7, r5
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d112      	bne.n	800705a <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	0018      	movs	r0, r3
 8007038:	f000 fe2b 	bl	8007c92 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800703c:	e00d      	b.n	800705a <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	0011      	movs	r1, r2
 8007044:	0018      	movs	r0, r3
 8007046:	f000 fd60 	bl	8007b0a <USBD_CtlError>
          break;
 800704a:	e006      	b.n	800705a <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	0011      	movs	r1, r2
 8007052:	0018      	movs	r0, r3
 8007054:	f000 fd59 	bl	8007b0a <USBD_CtlError>
          break;
 8007058:	e000      	b.n	800705c <USBD_StdItfReq+0x94>
          break;
 800705a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800705c:	e006      	b.n	800706c <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	0011      	movs	r1, r2
 8007064:	0018      	movs	r0, r3
 8007066:	f000 fd50 	bl	8007b0a <USBD_CtlError>
      break;
 800706a:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	0018      	movs	r0, r3
 8007070:	46bd      	mov	sp, r7
 8007072:	b004      	add	sp, #16
 8007074:	bdb0      	pop	{r4, r5, r7, pc}

08007076 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007076:	b5b0      	push	{r4, r5, r7, lr}
 8007078:	b084      	sub	sp, #16
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
 800707e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007080:	230f      	movs	r3, #15
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	2200      	movs	r2, #0
 8007086:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	889a      	ldrh	r2, [r3, #4]
 800708c:	230e      	movs	r3, #14
 800708e:	18fb      	adds	r3, r7, r3
 8007090:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	001a      	movs	r2, r3
 8007098:	2360      	movs	r3, #96	@ 0x60
 800709a:	4013      	ands	r3, r2
 800709c:	2b40      	cmp	r3, #64	@ 0x40
 800709e:	d006      	beq.n	80070ae <USBD_StdEPReq+0x38>
 80070a0:	d900      	bls.n	80070a4 <USBD_StdEPReq+0x2e>
 80070a2:	e190      	b.n	80073c6 <USBD_StdEPReq+0x350>
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00c      	beq.n	80070c2 <USBD_StdEPReq+0x4c>
 80070a8:	2b20      	cmp	r3, #32
 80070aa:	d000      	beq.n	80070ae <USBD_StdEPReq+0x38>
 80070ac:	e18b      	b.n	80073c6 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80070ae:	687a      	ldr	r2, [r7, #4]
 80070b0:	23ad      	movs	r3, #173	@ 0xad
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	58d3      	ldr	r3, [r2, r3]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	0010      	movs	r0, r2
 80070be:	4798      	blx	r3
      break;
 80070c0:	e188      	b.n	80073d4 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	781b      	ldrb	r3, [r3, #0]
 80070c6:	001a      	movs	r2, r3
 80070c8:	2360      	movs	r3, #96	@ 0x60
 80070ca:	4013      	ands	r3, r2
 80070cc:	2b20      	cmp	r3, #32
 80070ce:	d10f      	bne.n	80070f0 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	23ad      	movs	r3, #173	@ 0xad
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	58d3      	ldr	r3, [r2, r3]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	250f      	movs	r5, #15
 80070dc:	197c      	adds	r4, r7, r5
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	0010      	movs	r0, r2
 80070e4:	4798      	blx	r3
 80070e6:	0003      	movs	r3, r0
 80070e8:	7023      	strb	r3, [r4, #0]

        return ret;
 80070ea:	197b      	adds	r3, r7, r5
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	e174      	b.n	80073da <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b03      	cmp	r3, #3
 80070f6:	d007      	beq.n	8007108 <USBD_StdEPReq+0x92>
 80070f8:	dd00      	ble.n	80070fc <USBD_StdEPReq+0x86>
 80070fa:	e15c      	b.n	80073b6 <USBD_StdEPReq+0x340>
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d100      	bne.n	8007102 <USBD_StdEPReq+0x8c>
 8007100:	e092      	b.n	8007228 <USBD_StdEPReq+0x1b2>
 8007102:	2b01      	cmp	r3, #1
 8007104:	d04b      	beq.n	800719e <USBD_StdEPReq+0x128>
 8007106:	e156      	b.n	80073b6 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007108:	687a      	ldr	r2, [r7, #4]
 800710a:	23a7      	movs	r3, #167	@ 0xa7
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	5cd3      	ldrb	r3, [r2, r3]
 8007110:	2b02      	cmp	r3, #2
 8007112:	d002      	beq.n	800711a <USBD_StdEPReq+0xa4>
 8007114:	2b03      	cmp	r3, #3
 8007116:	d01d      	beq.n	8007154 <USBD_StdEPReq+0xde>
 8007118:	e039      	b.n	800718e <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800711a:	220e      	movs	r2, #14
 800711c:	18bb      	adds	r3, r7, r2
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d010      	beq.n	8007146 <USBD_StdEPReq+0xd0>
 8007124:	18bb      	adds	r3, r7, r2
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b80      	cmp	r3, #128	@ 0x80
 800712a:	d00c      	beq.n	8007146 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800712c:	18bb      	adds	r3, r7, r2
 800712e:	781a      	ldrb	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	0011      	movs	r1, r2
 8007134:	0018      	movs	r0, r3
 8007136:	f001 f8ec 	bl	8008312 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2180      	movs	r1, #128	@ 0x80
 800713e:	0018      	movs	r0, r3
 8007140:	f001 f8e7 	bl	8008312 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007144:	e02a      	b.n	800719c <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	0011      	movs	r1, r2
 800714c:	0018      	movs	r0, r3
 800714e:	f000 fcdc 	bl	8007b0a <USBD_CtlError>
              break;
 8007152:	e023      	b.n	800719c <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	885b      	ldrh	r3, [r3, #2]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d113      	bne.n	8007184 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800715c:	220e      	movs	r2, #14
 800715e:	18bb      	adds	r3, r7, r2
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00e      	beq.n	8007184 <USBD_StdEPReq+0x10e>
 8007166:	18bb      	adds	r3, r7, r2
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b80      	cmp	r3, #128	@ 0x80
 800716c:	d00a      	beq.n	8007184 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	88db      	ldrh	r3, [r3, #6]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d106      	bne.n	8007184 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007176:	18bb      	adds	r3, r7, r2
 8007178:	781a      	ldrb	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	0011      	movs	r1, r2
 800717e:	0018      	movs	r0, r3
 8007180:	f001 f8c7 	bl	8008312 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	0018      	movs	r0, r3
 8007188:	f000 fd83 	bl	8007c92 <USBD_CtlSendStatus>

              break;
 800718c:	e006      	b.n	800719c <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	0011      	movs	r1, r2
 8007194:	0018      	movs	r0, r3
 8007196:	f000 fcb8 	bl	8007b0a <USBD_CtlError>
              break;
 800719a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800719c:	e112      	b.n	80073c4 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	23a7      	movs	r3, #167	@ 0xa7
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	5cd3      	ldrb	r3, [r2, r3]
 80071a6:	2b02      	cmp	r3, #2
 80071a8:	d002      	beq.n	80071b0 <USBD_StdEPReq+0x13a>
 80071aa:	2b03      	cmp	r3, #3
 80071ac:	d01d      	beq.n	80071ea <USBD_StdEPReq+0x174>
 80071ae:	e032      	b.n	8007216 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071b0:	220e      	movs	r2, #14
 80071b2:	18bb      	adds	r3, r7, r2
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d010      	beq.n	80071dc <USBD_StdEPReq+0x166>
 80071ba:	18bb      	adds	r3, r7, r2
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	2b80      	cmp	r3, #128	@ 0x80
 80071c0:	d00c      	beq.n	80071dc <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071c2:	18bb      	adds	r3, r7, r2
 80071c4:	781a      	ldrb	r2, [r3, #0]
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	0011      	movs	r1, r2
 80071ca:	0018      	movs	r0, r3
 80071cc:	f001 f8a1 	bl	8008312 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2180      	movs	r1, #128	@ 0x80
 80071d4:	0018      	movs	r0, r3
 80071d6:	f001 f89c 	bl	8008312 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071da:	e024      	b.n	8007226 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80071dc:	683a      	ldr	r2, [r7, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	0011      	movs	r1, r2
 80071e2:	0018      	movs	r0, r3
 80071e4:	f000 fc91 	bl	8007b0a <USBD_CtlError>
              break;
 80071e8:	e01d      	b.n	8007226 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	885b      	ldrh	r3, [r3, #2]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d118      	bne.n	8007224 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80071f2:	210e      	movs	r1, #14
 80071f4:	187b      	adds	r3, r7, r1
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	227f      	movs	r2, #127	@ 0x7f
 80071fa:	4013      	ands	r3, r2
 80071fc:	d006      	beq.n	800720c <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80071fe:	187b      	adds	r3, r7, r1
 8007200:	781a      	ldrb	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	0011      	movs	r1, r2
 8007206:	0018      	movs	r0, r3
 8007208:	f001 f8ae 	bl	8008368 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	0018      	movs	r0, r3
 8007210:	f000 fd3f 	bl	8007c92 <USBD_CtlSendStatus>
              }
              break;
 8007214:	e006      	b.n	8007224 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	0011      	movs	r1, r2
 800721c:	0018      	movs	r0, r3
 800721e:	f000 fc74 	bl	8007b0a <USBD_CtlError>
              break;
 8007222:	e000      	b.n	8007226 <USBD_StdEPReq+0x1b0>
              break;
 8007224:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8007226:	e0cd      	b.n	80073c4 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	23a7      	movs	r3, #167	@ 0xa7
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	5cd3      	ldrb	r3, [r2, r3]
 8007230:	2b02      	cmp	r3, #2
 8007232:	d002      	beq.n	800723a <USBD_StdEPReq+0x1c4>
 8007234:	2b03      	cmp	r3, #3
 8007236:	d03c      	beq.n	80072b2 <USBD_StdEPReq+0x23c>
 8007238:	e0b5      	b.n	80073a6 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800723a:	220e      	movs	r2, #14
 800723c:	18bb      	adds	r3, r7, r2
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <USBD_StdEPReq+0x1e4>
 8007244:	18bb      	adds	r3, r7, r2
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b80      	cmp	r3, #128	@ 0x80
 800724a:	d006      	beq.n	800725a <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	0011      	movs	r1, r2
 8007252:	0018      	movs	r0, r3
 8007254:	f000 fc59 	bl	8007b0a <USBD_CtlError>
                break;
 8007258:	e0ac      	b.n	80073b4 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800725a:	220e      	movs	r2, #14
 800725c:	18bb      	adds	r3, r7, r2
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	b25b      	sxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	da0c      	bge.n	8007280 <USBD_StdEPReq+0x20a>
 8007266:	18bb      	adds	r3, r7, r2
 8007268:	781b      	ldrb	r3, [r3, #0]
 800726a:	227f      	movs	r2, #127	@ 0x7f
 800726c:	401a      	ands	r2, r3
 800726e:	0013      	movs	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	189b      	adds	r3, r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	3310      	adds	r3, #16
 8007278:	687a      	ldr	r2, [r7, #4]
 800727a:	18d3      	adds	r3, r2, r3
 800727c:	3304      	adds	r3, #4
 800727e:	e00d      	b.n	800729c <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007280:	230e      	movs	r3, #14
 8007282:	18fb      	adds	r3, r7, r3
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	227f      	movs	r2, #127	@ 0x7f
 8007288:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800728a:	0013      	movs	r3, r2
 800728c:	009b      	lsls	r3, r3, #2
 800728e:	189b      	adds	r3, r3, r2
 8007290:	009b      	lsls	r3, r3, #2
 8007292:	3351      	adds	r3, #81	@ 0x51
 8007294:	33ff      	adds	r3, #255	@ 0xff
 8007296:	687a      	ldr	r2, [r7, #4]
 8007298:	18d3      	adds	r3, r2, r3
 800729a:	3304      	adds	r3, #4
 800729c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072a4:	68b9      	ldr	r1, [r7, #8]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2202      	movs	r2, #2
 80072aa:	0018      	movs	r0, r3
 80072ac:	f000 fcab 	bl	8007c06 <USBD_CtlSendData>
              break;
 80072b0:	e080      	b.n	80073b4 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072b2:	220e      	movs	r2, #14
 80072b4:	18bb      	adds	r3, r7, r2
 80072b6:	781b      	ldrb	r3, [r3, #0]
 80072b8:	b25b      	sxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	da14      	bge.n	80072e8 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072be:	18bb      	adds	r3, r7, r2
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	220f      	movs	r2, #15
 80072c4:	401a      	ands	r2, r3
 80072c6:	6879      	ldr	r1, [r7, #4]
 80072c8:	0013      	movs	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	189b      	adds	r3, r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	18cb      	adds	r3, r1, r3
 80072d2:	3318      	adds	r3, #24
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d11e      	bne.n	8007318 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	0011      	movs	r1, r2
 80072e0:	0018      	movs	r0, r3
 80072e2:	f000 fc12 	bl	8007b0a <USBD_CtlError>
                  break;
 80072e6:	e065      	b.n	80073b4 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80072e8:	230e      	movs	r3, #14
 80072ea:	18fb      	adds	r3, r7, r3
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	220f      	movs	r2, #15
 80072f0:	401a      	ands	r2, r3
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	23ac      	movs	r3, #172	@ 0xac
 80072f6:	0059      	lsls	r1, r3, #1
 80072f8:	0013      	movs	r3, r2
 80072fa:	009b      	lsls	r3, r3, #2
 80072fc:	189b      	adds	r3, r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	18c3      	adds	r3, r0, r3
 8007302:	185b      	adds	r3, r3, r1
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d106      	bne.n	8007318 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	0011      	movs	r1, r2
 8007310:	0018      	movs	r0, r3
 8007312:	f000 fbfa 	bl	8007b0a <USBD_CtlError>
                  break;
 8007316:	e04d      	b.n	80073b4 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007318:	220e      	movs	r2, #14
 800731a:	18bb      	adds	r3, r7, r2
 800731c:	781b      	ldrb	r3, [r3, #0]
 800731e:	b25b      	sxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	da0c      	bge.n	800733e <USBD_StdEPReq+0x2c8>
 8007324:	18bb      	adds	r3, r7, r2
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	227f      	movs	r2, #127	@ 0x7f
 800732a:	401a      	ands	r2, r3
 800732c:	0013      	movs	r3, r2
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	189b      	adds	r3, r3, r2
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	3310      	adds	r3, #16
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	18d3      	adds	r3, r2, r3
 800733a:	3304      	adds	r3, #4
 800733c:	e00d      	b.n	800735a <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800733e:	230e      	movs	r3, #14
 8007340:	18fb      	adds	r3, r7, r3
 8007342:	781b      	ldrb	r3, [r3, #0]
 8007344:	227f      	movs	r2, #127	@ 0x7f
 8007346:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007348:	0013      	movs	r3, r2
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	189b      	adds	r3, r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	3351      	adds	r3, #81	@ 0x51
 8007352:	33ff      	adds	r3, #255	@ 0xff
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	18d3      	adds	r3, r2, r3
 8007358:	3304      	adds	r3, #4
 800735a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800735c:	220e      	movs	r2, #14
 800735e:	18bb      	adds	r3, r7, r2
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d003      	beq.n	800736e <USBD_StdEPReq+0x2f8>
 8007366:	18bb      	adds	r3, r7, r2
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b80      	cmp	r3, #128	@ 0x80
 800736c:	d103      	bne.n	8007376 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	2200      	movs	r2, #0
 8007372:	601a      	str	r2, [r3, #0]
 8007374:	e010      	b.n	8007398 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007376:	230e      	movs	r3, #14
 8007378:	18fb      	adds	r3, r7, r3
 800737a:	781a      	ldrb	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	0011      	movs	r1, r2
 8007380:	0018      	movs	r0, r3
 8007382:	f001 f81c 	bl	80083be <USBD_LL_IsStallEP>
 8007386:	1e03      	subs	r3, r0, #0
 8007388:	d003      	beq.n	8007392 <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2201      	movs	r2, #1
 800738e:	601a      	str	r2, [r3, #0]
 8007390:	e002      	b.n	8007398 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2202      	movs	r2, #2
 800739e:	0018      	movs	r0, r3
 80073a0:	f000 fc31 	bl	8007c06 <USBD_CtlSendData>
              break;
 80073a4:	e006      	b.n	80073b4 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	0011      	movs	r1, r2
 80073ac:	0018      	movs	r0, r3
 80073ae:	f000 fbac 	bl	8007b0a <USBD_CtlError>
              break;
 80073b2:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80073b4:	e006      	b.n	80073c4 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	0011      	movs	r1, r2
 80073bc:	0018      	movs	r0, r3
 80073be:	f000 fba4 	bl	8007b0a <USBD_CtlError>
          break;
 80073c2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 80073c4:	e006      	b.n	80073d4 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 80073c6:	683a      	ldr	r2, [r7, #0]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	0011      	movs	r1, r2
 80073cc:	0018      	movs	r0, r3
 80073ce:	f000 fb9c 	bl	8007b0a <USBD_CtlError>
      break;
 80073d2:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80073d4:	230f      	movs	r3, #15
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	781b      	ldrb	r3, [r3, #0]
}
 80073da:	0018      	movs	r0, r3
 80073dc:	46bd      	mov	sp, r7
 80073de:	b004      	add	sp, #16
 80073e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080073e4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b084      	sub	sp, #16
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073ee:	2308      	movs	r3, #8
 80073f0:	18fb      	adds	r3, r7, r3
 80073f2:	2200      	movs	r2, #0
 80073f4:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073fa:	230b      	movs	r3, #11
 80073fc:	18fb      	adds	r3, r7, r3
 80073fe:	2200      	movs	r2, #0
 8007400:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	885b      	ldrh	r3, [r3, #2]
 8007406:	0a1b      	lsrs	r3, r3, #8
 8007408:	b29b      	uxth	r3, r3
 800740a:	2b07      	cmp	r3, #7
 800740c:	d900      	bls.n	8007410 <USBD_GetDescriptor+0x2c>
 800740e:	e159      	b.n	80076c4 <USBD_GetDescriptor+0x2e0>
 8007410:	009a      	lsls	r2, r3, #2
 8007412:	4bcb      	ldr	r3, [pc, #812]	@ (8007740 <USBD_GetDescriptor+0x35c>)
 8007414:	18d3      	adds	r3, r2, r3
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	23ac      	movs	r3, #172	@ 0xac
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	58d3      	ldr	r3, [r2, r3]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	7c12      	ldrb	r2, [r2, #16]
 8007428:	2108      	movs	r1, #8
 800742a:	1879      	adds	r1, r7, r1
 800742c:	0010      	movs	r0, r2
 800742e:	4798      	blx	r3
 8007430:	0003      	movs	r3, r0
 8007432:	60fb      	str	r3, [r7, #12]
      break;
 8007434:	e153      	b.n	80076de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	7c1b      	ldrb	r3, [r3, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10f      	bne.n	800745e <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	23ad      	movs	r3, #173	@ 0xad
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	58d3      	ldr	r3, [r2, r3]
 8007446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007448:	2208      	movs	r2, #8
 800744a:	18ba      	adds	r2, r7, r2
 800744c:	0010      	movs	r0, r2
 800744e:	4798      	blx	r3
 8007450:	0003      	movs	r3, r0
 8007452:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	3301      	adds	r3, #1
 8007458:	2202      	movs	r2, #2
 800745a:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800745c:	e13f      	b.n	80076de <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	23ad      	movs	r3, #173	@ 0xad
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	58d3      	ldr	r3, [r2, r3]
 8007466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007468:	2208      	movs	r2, #8
 800746a:	18ba      	adds	r2, r7, r2
 800746c:	0010      	movs	r0, r2
 800746e:	4798      	blx	r3
 8007470:	0003      	movs	r3, r0
 8007472:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	3301      	adds	r3, #1
 8007478:	2202      	movs	r2, #2
 800747a:	701a      	strb	r2, [r3, #0]
      break;
 800747c:	e12f      	b.n	80076de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	885b      	ldrh	r3, [r3, #2]
 8007482:	b2db      	uxtb	r3, r3
 8007484:	2b05      	cmp	r3, #5
 8007486:	d900      	bls.n	800748a <USBD_GetDescriptor+0xa6>
 8007488:	e0d0      	b.n	800762c <USBD_GetDescriptor+0x248>
 800748a:	009a      	lsls	r2, r3, #2
 800748c:	4bad      	ldr	r3, [pc, #692]	@ (8007744 <USBD_GetDescriptor+0x360>)
 800748e:	18d3      	adds	r3, r2, r3
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	23ac      	movs	r3, #172	@ 0xac
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	58d3      	ldr	r3, [r2, r3]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00d      	beq.n	80074be <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	23ac      	movs	r3, #172	@ 0xac
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	58d3      	ldr	r3, [r2, r3]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	7c12      	ldrb	r2, [r2, #16]
 80074b0:	2108      	movs	r1, #8
 80074b2:	1879      	adds	r1, r7, r1
 80074b4:	0010      	movs	r0, r2
 80074b6:	4798      	blx	r3
 80074b8:	0003      	movs	r3, r0
 80074ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074bc:	e0c3      	b.n	8007646 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	0011      	movs	r1, r2
 80074c4:	0018      	movs	r0, r3
 80074c6:	f000 fb20 	bl	8007b0a <USBD_CtlError>
            err++;
 80074ca:	210b      	movs	r1, #11
 80074cc:	187b      	adds	r3, r7, r1
 80074ce:	781a      	ldrb	r2, [r3, #0]
 80074d0:	187b      	adds	r3, r7, r1
 80074d2:	3201      	adds	r2, #1
 80074d4:	701a      	strb	r2, [r3, #0]
          break;
 80074d6:	e0b6      	b.n	8007646 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	23ac      	movs	r3, #172	@ 0xac
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	58d3      	ldr	r3, [r2, r3]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00d      	beq.n	8007502 <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	23ac      	movs	r3, #172	@ 0xac
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	58d3      	ldr	r3, [r2, r3]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	7c12      	ldrb	r2, [r2, #16]
 80074f4:	2108      	movs	r1, #8
 80074f6:	1879      	adds	r1, r7, r1
 80074f8:	0010      	movs	r0, r2
 80074fa:	4798      	blx	r3
 80074fc:	0003      	movs	r3, r0
 80074fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007500:	e0a1      	b.n	8007646 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007502:	683a      	ldr	r2, [r7, #0]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	0011      	movs	r1, r2
 8007508:	0018      	movs	r0, r3
 800750a:	f000 fafe 	bl	8007b0a <USBD_CtlError>
            err++;
 800750e:	210b      	movs	r1, #11
 8007510:	187b      	adds	r3, r7, r1
 8007512:	781a      	ldrb	r2, [r3, #0]
 8007514:	187b      	adds	r3, r7, r1
 8007516:	3201      	adds	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
          break;
 800751a:	e094      	b.n	8007646 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	23ac      	movs	r3, #172	@ 0xac
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	58d3      	ldr	r3, [r2, r3]
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00d      	beq.n	8007546 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	23ac      	movs	r3, #172	@ 0xac
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	58d3      	ldr	r3, [r2, r3]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	7c12      	ldrb	r2, [r2, #16]
 8007538:	2108      	movs	r1, #8
 800753a:	1879      	adds	r1, r7, r1
 800753c:	0010      	movs	r0, r2
 800753e:	4798      	blx	r3
 8007540:	0003      	movs	r3, r0
 8007542:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007544:	e07f      	b.n	8007646 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007546:	683a      	ldr	r2, [r7, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	0011      	movs	r1, r2
 800754c:	0018      	movs	r0, r3
 800754e:	f000 fadc 	bl	8007b0a <USBD_CtlError>
            err++;
 8007552:	210b      	movs	r1, #11
 8007554:	187b      	adds	r3, r7, r1
 8007556:	781a      	ldrb	r2, [r3, #0]
 8007558:	187b      	adds	r3, r7, r1
 800755a:	3201      	adds	r2, #1
 800755c:	701a      	strb	r2, [r3, #0]
          break;
 800755e:	e072      	b.n	8007646 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	23ac      	movs	r3, #172	@ 0xac
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	58d3      	ldr	r3, [r2, r3]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00d      	beq.n	800758a <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	23ac      	movs	r3, #172	@ 0xac
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	58d3      	ldr	r3, [r2, r3]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	7c12      	ldrb	r2, [r2, #16]
 800757c:	2108      	movs	r1, #8
 800757e:	1879      	adds	r1, r7, r1
 8007580:	0010      	movs	r0, r2
 8007582:	4798      	blx	r3
 8007584:	0003      	movs	r3, r0
 8007586:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007588:	e05d      	b.n	8007646 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	0011      	movs	r1, r2
 8007590:	0018      	movs	r0, r3
 8007592:	f000 faba 	bl	8007b0a <USBD_CtlError>
            err++;
 8007596:	210b      	movs	r1, #11
 8007598:	187b      	adds	r3, r7, r1
 800759a:	781a      	ldrb	r2, [r3, #0]
 800759c:	187b      	adds	r3, r7, r1
 800759e:	3201      	adds	r2, #1
 80075a0:	701a      	strb	r2, [r3, #0]
          break;
 80075a2:	e050      	b.n	8007646 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80075a4:	687a      	ldr	r2, [r7, #4]
 80075a6:	23ac      	movs	r3, #172	@ 0xac
 80075a8:	009b      	lsls	r3, r3, #2
 80075aa:	58d3      	ldr	r3, [r2, r3]
 80075ac:	695b      	ldr	r3, [r3, #20]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00d      	beq.n	80075ce <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	23ac      	movs	r3, #172	@ 0xac
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	58d3      	ldr	r3, [r2, r3]
 80075ba:	695b      	ldr	r3, [r3, #20]
 80075bc:	687a      	ldr	r2, [r7, #4]
 80075be:	7c12      	ldrb	r2, [r2, #16]
 80075c0:	2108      	movs	r1, #8
 80075c2:	1879      	adds	r1, r7, r1
 80075c4:	0010      	movs	r0, r2
 80075c6:	4798      	blx	r3
 80075c8:	0003      	movs	r3, r0
 80075ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075cc:	e03b      	b.n	8007646 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80075ce:	683a      	ldr	r2, [r7, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	0011      	movs	r1, r2
 80075d4:	0018      	movs	r0, r3
 80075d6:	f000 fa98 	bl	8007b0a <USBD_CtlError>
            err++;
 80075da:	210b      	movs	r1, #11
 80075dc:	187b      	adds	r3, r7, r1
 80075de:	781a      	ldrb	r2, [r3, #0]
 80075e0:	187b      	adds	r3, r7, r1
 80075e2:	3201      	adds	r2, #1
 80075e4:	701a      	strb	r2, [r3, #0]
          break;
 80075e6:	e02e      	b.n	8007646 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	23ac      	movs	r3, #172	@ 0xac
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	58d3      	ldr	r3, [r2, r3]
 80075f0:	699b      	ldr	r3, [r3, #24]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00d      	beq.n	8007612 <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	23ac      	movs	r3, #172	@ 0xac
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	58d3      	ldr	r3, [r2, r3]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	7c12      	ldrb	r2, [r2, #16]
 8007604:	2108      	movs	r1, #8
 8007606:	1879      	adds	r1, r7, r1
 8007608:	0010      	movs	r0, r2
 800760a:	4798      	blx	r3
 800760c:	0003      	movs	r3, r0
 800760e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007610:	e019      	b.n	8007646 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8007612:	683a      	ldr	r2, [r7, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	0011      	movs	r1, r2
 8007618:	0018      	movs	r0, r3
 800761a:	f000 fa76 	bl	8007b0a <USBD_CtlError>
            err++;
 800761e:	210b      	movs	r1, #11
 8007620:	187b      	adds	r3, r7, r1
 8007622:	781a      	ldrb	r2, [r3, #0]
 8007624:	187b      	adds	r3, r7, r1
 8007626:	3201      	adds	r2, #1
 8007628:	701a      	strb	r2, [r3, #0]
          break;
 800762a:	e00c      	b.n	8007646 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800762c:	683a      	ldr	r2, [r7, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	0011      	movs	r1, r2
 8007632:	0018      	movs	r0, r3
 8007634:	f000 fa69 	bl	8007b0a <USBD_CtlError>
          err++;
 8007638:	210b      	movs	r1, #11
 800763a:	187b      	adds	r3, r7, r1
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	187b      	adds	r3, r7, r1
 8007640:	3201      	adds	r2, #1
 8007642:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8007644:	e04b      	b.n	80076de <USBD_GetDescriptor+0x2fa>
 8007646:	e04a      	b.n	80076de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	7c1b      	ldrb	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d10b      	bne.n	8007668 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007650:	687a      	ldr	r2, [r7, #4]
 8007652:	23ad      	movs	r3, #173	@ 0xad
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	58d3      	ldr	r3, [r2, r3]
 8007658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800765a:	2208      	movs	r2, #8
 800765c:	18ba      	adds	r2, r7, r2
 800765e:	0010      	movs	r0, r2
 8007660:	4798      	blx	r3
 8007662:	0003      	movs	r3, r0
 8007664:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007666:	e03a      	b.n	80076de <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8007668:	683a      	ldr	r2, [r7, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	0011      	movs	r1, r2
 800766e:	0018      	movs	r0, r3
 8007670:	f000 fa4b 	bl	8007b0a <USBD_CtlError>
        err++;
 8007674:	210b      	movs	r1, #11
 8007676:	187b      	adds	r3, r7, r1
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	187b      	adds	r3, r7, r1
 800767c:	3201      	adds	r2, #1
 800767e:	701a      	strb	r2, [r3, #0]
      break;
 8007680:	e02d      	b.n	80076de <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	7c1b      	ldrb	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d10f      	bne.n	80076aa <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	23ad      	movs	r3, #173	@ 0xad
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	58d3      	ldr	r3, [r2, r3]
 8007692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007694:	2208      	movs	r2, #8
 8007696:	18ba      	adds	r2, r7, r2
 8007698:	0010      	movs	r0, r2
 800769a:	4798      	blx	r3
 800769c:	0003      	movs	r3, r0
 800769e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	2207      	movs	r2, #7
 80076a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80076a8:	e019      	b.n	80076de <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 80076aa:	683a      	ldr	r2, [r7, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	0011      	movs	r1, r2
 80076b0:	0018      	movs	r0, r3
 80076b2:	f000 fa2a 	bl	8007b0a <USBD_CtlError>
        err++;
 80076b6:	210b      	movs	r1, #11
 80076b8:	187b      	adds	r3, r7, r1
 80076ba:	781a      	ldrb	r2, [r3, #0]
 80076bc:	187b      	adds	r3, r7, r1
 80076be:	3201      	adds	r2, #1
 80076c0:	701a      	strb	r2, [r3, #0]
      break;
 80076c2:	e00c      	b.n	80076de <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	0011      	movs	r1, r2
 80076ca:	0018      	movs	r0, r3
 80076cc:	f000 fa1d 	bl	8007b0a <USBD_CtlError>
      err++;
 80076d0:	210b      	movs	r1, #11
 80076d2:	187b      	adds	r3, r7, r1
 80076d4:	781a      	ldrb	r2, [r3, #0]
 80076d6:	187b      	adds	r3, r7, r1
 80076d8:	3201      	adds	r2, #1
 80076da:	701a      	strb	r2, [r3, #0]
      break;
 80076dc:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 80076de:	230b      	movs	r3, #11
 80076e0:	18fb      	adds	r3, r7, r3
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d127      	bne.n	8007738 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80076e8:	2108      	movs	r1, #8
 80076ea:	187b      	adds	r3, r7, r1
 80076ec:	881b      	ldrh	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d019      	beq.n	8007726 <USBD_GetDescriptor+0x342>
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	88db      	ldrh	r3, [r3, #6]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d015      	beq.n	8007726 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	88da      	ldrh	r2, [r3, #6]
 80076fe:	187b      	adds	r3, r7, r1
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	1c18      	adds	r0, r3, #0
 8007704:	1c11      	adds	r1, r2, #0
 8007706:	b28a      	uxth	r2, r1
 8007708:	b283      	uxth	r3, r0
 800770a:	429a      	cmp	r2, r3
 800770c:	d900      	bls.n	8007710 <USBD_GetDescriptor+0x32c>
 800770e:	1c01      	adds	r1, r0, #0
 8007710:	b28a      	uxth	r2, r1
 8007712:	2108      	movs	r1, #8
 8007714:	187b      	adds	r3, r7, r1
 8007716:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007718:	187b      	adds	r3, r7, r1
 800771a:	881a      	ldrh	r2, [r3, #0]
 800771c:	68f9      	ldr	r1, [r7, #12]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	0018      	movs	r0, r3
 8007722:	f000 fa70 	bl	8007c06 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	88db      	ldrh	r3, [r3, #6]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d105      	bne.n	800773a <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	0018      	movs	r0, r3
 8007732:	f000 faae 	bl	8007c92 <USBD_CtlSendStatus>
 8007736:	e000      	b.n	800773a <USBD_GetDescriptor+0x356>
    return;
 8007738:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800773a:	46bd      	mov	sp, r7
 800773c:	b004      	add	sp, #16
 800773e:	bd80      	pop	{r7, pc}
 8007740:	08008774 	.word	0x08008774
 8007744:	08008794 	.word	0x08008794

08007748 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007748:	b590      	push	{r4, r7, lr}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	889b      	ldrh	r3, [r3, #4]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d13d      	bne.n	80077d6 <USBD_SetAddress+0x8e>
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	88db      	ldrh	r3, [r3, #6]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d139      	bne.n	80077d6 <USBD_SetAddress+0x8e>
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	885b      	ldrh	r3, [r3, #2]
 8007766:	2b7f      	cmp	r3, #127	@ 0x7f
 8007768:	d835      	bhi.n	80077d6 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	885b      	ldrh	r3, [r3, #2]
 800776e:	b2da      	uxtb	r2, r3
 8007770:	230f      	movs	r3, #15
 8007772:	18fb      	adds	r3, r7, r3
 8007774:	217f      	movs	r1, #127	@ 0x7f
 8007776:	400a      	ands	r2, r1
 8007778:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	23a7      	movs	r3, #167	@ 0xa7
 800777e:	009b      	lsls	r3, r3, #2
 8007780:	5cd3      	ldrb	r3, [r2, r3]
 8007782:	2b03      	cmp	r3, #3
 8007784:	d106      	bne.n	8007794 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	0011      	movs	r1, r2
 800778c:	0018      	movs	r0, r3
 800778e:	f000 f9bc 	bl	8007b0a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007792:	e027      	b.n	80077e4 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	240f      	movs	r4, #15
 8007798:	193a      	adds	r2, r7, r4
 800779a:	4914      	ldr	r1, [pc, #80]	@ (80077ec <USBD_SetAddress+0xa4>)
 800779c:	7812      	ldrb	r2, [r2, #0]
 800779e:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80077a0:	193b      	adds	r3, r7, r4
 80077a2:	781a      	ldrb	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	0011      	movs	r1, r2
 80077a8:	0018      	movs	r0, r3
 80077aa:	f000 fe38 	bl	800841e <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	0018      	movs	r0, r3
 80077b2:	f000 fa6e 	bl	8007c92 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80077b6:	193b      	adds	r3, r7, r4
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d005      	beq.n	80077ca <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	23a7      	movs	r3, #167	@ 0xa7
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	2102      	movs	r1, #2
 80077c6:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077c8:	e00c      	b.n	80077e4 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	23a7      	movs	r3, #167	@ 0xa7
 80077ce:	009b      	lsls	r3, r3, #2
 80077d0:	2101      	movs	r1, #1
 80077d2:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077d4:	e006      	b.n	80077e4 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80077d6:	683a      	ldr	r2, [r7, #0]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	0011      	movs	r1, r2
 80077dc:	0018      	movs	r0, r3
 80077de:	f000 f994 	bl	8007b0a <USBD_CtlError>
  }
}
 80077e2:	46c0      	nop			@ (mov r8, r8)
 80077e4:	46c0      	nop			@ (mov r8, r8)
 80077e6:	46bd      	mov	sp, r7
 80077e8:	b005      	add	sp, #20
 80077ea:	bd90      	pop	{r4, r7, pc}
 80077ec:	0000029e 	.word	0x0000029e

080077f0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	885b      	ldrh	r3, [r3, #2]
 80077fe:	b2da      	uxtb	r2, r3
 8007800:	4b4c      	ldr	r3, [pc, #304]	@ (8007934 <USBD_SetConfig+0x144>)
 8007802:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007804:	4b4b      	ldr	r3, [pc, #300]	@ (8007934 <USBD_SetConfig+0x144>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b01      	cmp	r3, #1
 800780a:	d906      	bls.n	800781a <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	0011      	movs	r1, r2
 8007812:	0018      	movs	r0, r3
 8007814:	f000 f979 	bl	8007b0a <USBD_CtlError>
 8007818:	e088      	b.n	800792c <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	23a7      	movs	r3, #167	@ 0xa7
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	5cd3      	ldrb	r3, [r2, r3]
 8007822:	2b02      	cmp	r3, #2
 8007824:	d002      	beq.n	800782c <USBD_SetConfig+0x3c>
 8007826:	2b03      	cmp	r3, #3
 8007828:	d029      	beq.n	800787e <USBD_SetConfig+0x8e>
 800782a:	e071      	b.n	8007910 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800782c:	4b41      	ldr	r3, [pc, #260]	@ (8007934 <USBD_SetConfig+0x144>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d01f      	beq.n	8007874 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8007834:	4b3f      	ldr	r3, [pc, #252]	@ (8007934 <USBD_SetConfig+0x144>)
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	001a      	movs	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800783e:	687a      	ldr	r2, [r7, #4]
 8007840:	23a7      	movs	r3, #167	@ 0xa7
 8007842:	009b      	lsls	r3, r3, #2
 8007844:	2103      	movs	r1, #3
 8007846:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007848:	4b3a      	ldr	r3, [pc, #232]	@ (8007934 <USBD_SetConfig+0x144>)
 800784a:	781a      	ldrb	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	0011      	movs	r1, r2
 8007850:	0018      	movs	r0, r3
 8007852:	f7ff f8c6 	bl	80069e2 <USBD_SetClassConfig>
 8007856:	0003      	movs	r3, r0
 8007858:	2b02      	cmp	r3, #2
 800785a:	d106      	bne.n	800786a <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	0011      	movs	r1, r2
 8007862:	0018      	movs	r0, r3
 8007864:	f000 f951 	bl	8007b0a <USBD_CtlError>
            return;
 8007868:	e060      	b.n	800792c <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	0018      	movs	r0, r3
 800786e:	f000 fa10 	bl	8007c92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007872:	e05b      	b.n	800792c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	0018      	movs	r0, r3
 8007878:	f000 fa0b 	bl	8007c92 <USBD_CtlSendStatus>
        break;
 800787c:	e056      	b.n	800792c <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800787e:	4b2d      	ldr	r3, [pc, #180]	@ (8007934 <USBD_SetConfig+0x144>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d115      	bne.n	80078b2 <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007886:	687a      	ldr	r2, [r7, #4]
 8007888:	23a7      	movs	r3, #167	@ 0xa7
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	2102      	movs	r1, #2
 800788e:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8007890:	4b28      	ldr	r3, [pc, #160]	@ (8007934 <USBD_SetConfig+0x144>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	001a      	movs	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800789a:	4b26      	ldr	r3, [pc, #152]	@ (8007934 <USBD_SetConfig+0x144>)
 800789c:	781a      	ldrb	r2, [r3, #0]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	0011      	movs	r1, r2
 80078a2:	0018      	movs	r0, r3
 80078a4:	f7ff f8c4 	bl	8006a30 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	0018      	movs	r0, r3
 80078ac:	f000 f9f1 	bl	8007c92 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80078b0:	e03c      	b.n	800792c <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 80078b2:	4b20      	ldr	r3, [pc, #128]	@ (8007934 <USBD_SetConfig+0x144>)
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	001a      	movs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d022      	beq.n	8007906 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	b2da      	uxtb	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	0011      	movs	r1, r2
 80078ca:	0018      	movs	r0, r3
 80078cc:	f7ff f8b0 	bl	8006a30 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80078d0:	4b18      	ldr	r3, [pc, #96]	@ (8007934 <USBD_SetConfig+0x144>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	001a      	movs	r2, r3
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80078da:	4b16      	ldr	r3, [pc, #88]	@ (8007934 <USBD_SetConfig+0x144>)
 80078dc:	781a      	ldrb	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	0011      	movs	r1, r2
 80078e2:	0018      	movs	r0, r3
 80078e4:	f7ff f87d 	bl	80069e2 <USBD_SetClassConfig>
 80078e8:	0003      	movs	r3, r0
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d106      	bne.n	80078fc <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 80078ee:	683a      	ldr	r2, [r7, #0]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	0011      	movs	r1, r2
 80078f4:	0018      	movs	r0, r3
 80078f6:	f000 f908 	bl	8007b0a <USBD_CtlError>
            return;
 80078fa:	e017      	b.n	800792c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	0018      	movs	r0, r3
 8007900:	f000 f9c7 	bl	8007c92 <USBD_CtlSendStatus>
        break;
 8007904:	e012      	b.n	800792c <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	0018      	movs	r0, r3
 800790a:	f000 f9c2 	bl	8007c92 <USBD_CtlSendStatus>
        break;
 800790e:	e00d      	b.n	800792c <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8007910:	683a      	ldr	r2, [r7, #0]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	0011      	movs	r1, r2
 8007916:	0018      	movs	r0, r3
 8007918:	f000 f8f7 	bl	8007b0a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800791c:	4b05      	ldr	r3, [pc, #20]	@ (8007934 <USBD_SetConfig+0x144>)
 800791e:	781a      	ldrb	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	0011      	movs	r1, r2
 8007924:	0018      	movs	r0, r3
 8007926:	f7ff f883 	bl	8006a30 <USBD_ClrClassConfig>
        break;
 800792a:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800792c:	46bd      	mov	sp, r7
 800792e:	b002      	add	sp, #8
 8007930:	bd80      	pop	{r7, pc}
 8007932:	46c0      	nop			@ (mov r8, r8)
 8007934:	200002c8 	.word	0x200002c8

08007938 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b082      	sub	sp, #8
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	88db      	ldrh	r3, [r3, #6]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d006      	beq.n	8007958 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800794a:	683a      	ldr	r2, [r7, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	0011      	movs	r1, r2
 8007950:	0018      	movs	r0, r3
 8007952:	f000 f8da 	bl	8007b0a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007956:	e026      	b.n	80079a6 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8007958:	687a      	ldr	r2, [r7, #4]
 800795a:	23a7      	movs	r3, #167	@ 0xa7
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	5cd3      	ldrb	r3, [r2, r3]
 8007960:	2b02      	cmp	r3, #2
 8007962:	dc02      	bgt.n	800796a <USBD_GetConfig+0x32>
 8007964:	2b00      	cmp	r3, #0
 8007966:	dc03      	bgt.n	8007970 <USBD_GetConfig+0x38>
 8007968:	e016      	b.n	8007998 <USBD_GetConfig+0x60>
 800796a:	2b03      	cmp	r3, #3
 800796c:	d00c      	beq.n	8007988 <USBD_GetConfig+0x50>
 800796e:	e013      	b.n	8007998 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	3308      	adds	r3, #8
 800797a:	0019      	movs	r1, r3
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	0018      	movs	r0, r3
 8007982:	f000 f940 	bl	8007c06 <USBD_CtlSendData>
        break;
 8007986:	e00e      	b.n	80079a6 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	1d19      	adds	r1, r3, #4
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2201      	movs	r2, #1
 8007990:	0018      	movs	r0, r3
 8007992:	f000 f938 	bl	8007c06 <USBD_CtlSendData>
        break;
 8007996:	e006      	b.n	80079a6 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	0011      	movs	r1, r2
 800799e:	0018      	movs	r0, r3
 80079a0:	f000 f8b3 	bl	8007b0a <USBD_CtlError>
        break;
 80079a4:	46c0      	nop			@ (mov r8, r8)
}
 80079a6:	46c0      	nop			@ (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b002      	add	sp, #8
 80079ac:	bd80      	pop	{r7, pc}

080079ae <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	6078      	str	r0, [r7, #4]
 80079b6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	23a7      	movs	r3, #167	@ 0xa7
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	5cd3      	ldrb	r3, [r2, r3]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d822      	bhi.n	8007a0c <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	88db      	ldrh	r3, [r3, #6]
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d006      	beq.n	80079dc <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 80079ce:	683a      	ldr	r2, [r7, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	0011      	movs	r1, r2
 80079d4:	0018      	movs	r0, r3
 80079d6:	f000 f898 	bl	8007b0a <USBD_CtlError>
        break;
 80079da:	e01e      	b.n	8007a1a <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80079e2:	687a      	ldr	r2, [r7, #4]
 80079e4:	23a9      	movs	r3, #169	@ 0xa9
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	58d3      	ldr	r3, [r2, r3]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d005      	beq.n	80079fa <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	2202      	movs	r2, #2
 80079f4:	431a      	orrs	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	330c      	adds	r3, #12
 80079fe:	0019      	movs	r1, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	0018      	movs	r0, r3
 8007a06:	f000 f8fe 	bl	8007c06 <USBD_CtlSendData>
      break;
 8007a0a:	e006      	b.n	8007a1a <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	0011      	movs	r1, r2
 8007a12:	0018      	movs	r0, r3
 8007a14:	f000 f879 	bl	8007b0a <USBD_CtlError>
      break;
 8007a18:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007a1a:	46c0      	nop			@ (mov r8, r8)
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	b002      	add	sp, #8
 8007a20:	bd80      	pop	{r7, pc}

08007a22 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a22:	b580      	push	{r7, lr}
 8007a24:	b082      	sub	sp, #8
 8007a26:	af00      	add	r7, sp, #0
 8007a28:	6078      	str	r0, [r7, #4]
 8007a2a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	885b      	ldrh	r3, [r3, #2]
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d108      	bne.n	8007a46 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	23a9      	movs	r3, #169	@ 0xa9
 8007a38:	009b      	lsls	r3, r3, #2
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	0018      	movs	r0, r3
 8007a42:	f000 f926 	bl	8007c92 <USBD_CtlSendStatus>
  }
}
 8007a46:	46c0      	nop			@ (mov r8, r8)
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b002      	add	sp, #8
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b082      	sub	sp, #8
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
 8007a56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	23a7      	movs	r3, #167	@ 0xa7
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	5cd3      	ldrb	r3, [r2, r3]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d80d      	bhi.n	8007a82 <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	885b      	ldrh	r3, [r3, #2]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d110      	bne.n	8007a90 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8007a6e:	687a      	ldr	r2, [r7, #4]
 8007a70:	23a9      	movs	r3, #169	@ 0xa9
 8007a72:	009b      	lsls	r3, r3, #2
 8007a74:	2100      	movs	r1, #0
 8007a76:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f000 f909 	bl	8007c92 <USBD_CtlSendStatus>
      }
      break;
 8007a80:	e006      	b.n	8007a90 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	0011      	movs	r1, r2
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f000 f83e 	bl	8007b0a <USBD_CtlError>
      break;
 8007a8e:	e000      	b.n	8007a92 <USBD_ClrFeature+0x44>
      break;
 8007a90:	46c0      	nop			@ (mov r8, r8)
  }
}
 8007a92:	46c0      	nop			@ (mov r8, r8)
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b002      	add	sp, #8
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
 8007aa2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	781a      	ldrb	r2, [r3, #0]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	785a      	ldrb	r2, [r3, #1]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	3302      	adds	r3, #2
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	001a      	movs	r2, r3
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	3303      	adds	r3, #3
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	021b      	lsls	r3, r3, #8
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	18d3      	adds	r3, r2, r3
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	3304      	adds	r3, #4
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	001a      	movs	r2, r3
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	3305      	adds	r3, #5
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	021b      	lsls	r3, r3, #8
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	18d3      	adds	r3, r2, r3
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	3306      	adds	r3, #6
 8007aec:	781b      	ldrb	r3, [r3, #0]
 8007aee:	001a      	movs	r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	3307      	adds	r3, #7
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	021b      	lsls	r3, r3, #8
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	18d3      	adds	r3, r2, r3
 8007afc:	b29a      	uxth	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	80da      	strh	r2, [r3, #6]

}
 8007b02:	46c0      	nop			@ (mov r8, r8)
 8007b04:	46bd      	mov	sp, r7
 8007b06:	b002      	add	sp, #8
 8007b08:	bd80      	pop	{r7, pc}

08007b0a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007b0a:	b580      	push	{r7, lr}
 8007b0c:	b082      	sub	sp, #8
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
 8007b12:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2180      	movs	r1, #128	@ 0x80
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f000 fbfa 	bl	8008312 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2100      	movs	r1, #0
 8007b22:	0018      	movs	r0, r3
 8007b24:	f000 fbf5 	bl	8008312 <USBD_LL_StallEP>
}
 8007b28:	46c0      	nop			@ (mov r8, r8)
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b002      	add	sp, #8
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b30:	b590      	push	{r4, r7, lr}
 8007b32:	b087      	sub	sp, #28
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	60f8      	str	r0, [r7, #12]
 8007b38:	60b9      	str	r1, [r7, #8]
 8007b3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007b3c:	2417      	movs	r4, #23
 8007b3e:	193b      	adds	r3, r7, r4
 8007b40:	2200      	movs	r2, #0
 8007b42:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d03c      	beq.n	8007bc4 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f000 f83d 	bl	8007bcc <USBD_GetLen>
 8007b52:	0003      	movs	r3, r0
 8007b54:	3301      	adds	r3, #1
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	18db      	adds	r3, r3, r3
 8007b5a:	b29a      	uxth	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007b60:	193b      	adds	r3, r7, r4
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	193a      	adds	r2, r7, r4
 8007b66:	1c59      	adds	r1, r3, #1
 8007b68:	7011      	strb	r1, [r2, #0]
 8007b6a:	001a      	movs	r2, r3
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	189b      	adds	r3, r3, r2
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	7812      	ldrb	r2, [r2, #0]
 8007b74:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007b76:	193b      	adds	r3, r7, r4
 8007b78:	781b      	ldrb	r3, [r3, #0]
 8007b7a:	193a      	adds	r2, r7, r4
 8007b7c:	1c59      	adds	r1, r3, #1
 8007b7e:	7011      	strb	r1, [r2, #0]
 8007b80:	001a      	movs	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	189b      	adds	r3, r3, r2
 8007b86:	2203      	movs	r2, #3
 8007b88:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007b8a:	e017      	b.n	8007bbc <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	1c5a      	adds	r2, r3, #1
 8007b90:	60fa      	str	r2, [r7, #12]
 8007b92:	2417      	movs	r4, #23
 8007b94:	193a      	adds	r2, r7, r4
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	1939      	adds	r1, r7, r4
 8007b9a:	1c50      	adds	r0, r2, #1
 8007b9c:	7008      	strb	r0, [r1, #0]
 8007b9e:	0011      	movs	r1, r2
 8007ba0:	68ba      	ldr	r2, [r7, #8]
 8007ba2:	1852      	adds	r2, r2, r1
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007ba8:	193b      	adds	r3, r7, r4
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	193a      	adds	r2, r7, r4
 8007bae:	1c59      	adds	r1, r3, #1
 8007bb0:	7011      	strb	r1, [r2, #0]
 8007bb2:	001a      	movs	r2, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	189b      	adds	r3, r3, r2
 8007bb8:	2200      	movs	r2, #0
 8007bba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	781b      	ldrb	r3, [r3, #0]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e3      	bne.n	8007b8c <USBD_GetString+0x5c>
    }
  }
}
 8007bc4:	46c0      	nop			@ (mov r8, r8)
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	b007      	add	sp, #28
 8007bca:	bd90      	pop	{r4, r7, pc}

08007bcc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007bd4:	230f      	movs	r3, #15
 8007bd6:	18fb      	adds	r3, r7, r3
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8007bdc:	e008      	b.n	8007bf0 <USBD_GetLen+0x24>
  {
    len++;
 8007bde:	210f      	movs	r1, #15
 8007be0:	187b      	adds	r3, r7, r1
 8007be2:	781a      	ldrb	r2, [r3, #0]
 8007be4:	187b      	adds	r3, r7, r1
 8007be6:	3201      	adds	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]
    buf++;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3301      	adds	r3, #1
 8007bee:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1f2      	bne.n	8007bde <USBD_GetLen+0x12>
  }

  return len;
 8007bf8:	230f      	movs	r3, #15
 8007bfa:	18fb      	adds	r3, r7, r3
 8007bfc:	781b      	ldrb	r3, [r3, #0]
}
 8007bfe:	0018      	movs	r0, r3
 8007c00:	46bd      	mov	sp, r7
 8007c02:	b004      	add	sp, #16
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	60f8      	str	r0, [r7, #12]
 8007c0e:	60b9      	str	r1, [r7, #8]
 8007c10:	1dbb      	adds	r3, r7, #6
 8007c12:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c14:	68fa      	ldr	r2, [r7, #12]
 8007c16:	23a5      	movs	r3, #165	@ 0xa5
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	2102      	movs	r1, #2
 8007c1c:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8007c1e:	1dbb      	adds	r3, r7, #6
 8007c20:	881a      	ldrh	r2, [r3, #0]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007c26:	1dbb      	adds	r3, r7, #6
 8007c28:	881a      	ldrh	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c2e:	1dbb      	adds	r3, r7, #6
 8007c30:	881b      	ldrh	r3, [r3, #0]
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	68f8      	ldr	r0, [r7, #12]
 8007c36:	2100      	movs	r1, #0
 8007c38:	f000 fc1c 	bl	8008474 <USBD_LL_Transmit>

  return USBD_OK;
 8007c3c:	2300      	movs	r3, #0
}
 8007c3e:	0018      	movs	r0, r3
 8007c40:	46bd      	mov	sp, r7
 8007c42:	b004      	add	sp, #16
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b084      	sub	sp, #16
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	1dbb      	adds	r3, r7, #6
 8007c52:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c54:	1dbb      	adds	r3, r7, #6
 8007c56:	881b      	ldrh	r3, [r3, #0]
 8007c58:	68ba      	ldr	r2, [r7, #8]
 8007c5a:	68f8      	ldr	r0, [r7, #12]
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	f000 fc09 	bl	8008474 <USBD_LL_Transmit>

  return USBD_OK;
 8007c62:	2300      	movs	r3, #0
}
 8007c64:	0018      	movs	r0, r3
 8007c66:	46bd      	mov	sp, r7
 8007c68:	b004      	add	sp, #16
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	1dbb      	adds	r3, r7, #6
 8007c78:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007c7a:	1dbb      	adds	r3, r7, #6
 8007c7c:	881b      	ldrh	r3, [r3, #0]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	2100      	movs	r1, #0
 8007c84:	f000 fc2d 	bl	80084e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007c88:	2300      	movs	r3, #0
}
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	b004      	add	sp, #16
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007c9a:	687a      	ldr	r2, [r7, #4]
 8007c9c:	23a5      	movs	r3, #165	@ 0xa5
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	2104      	movs	r1, #4
 8007ca2:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	2200      	movs	r2, #0
 8007caa:	2100      	movs	r1, #0
 8007cac:	f000 fbe2 	bl	8008474 <USBD_LL_Transmit>

  return USBD_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	0018      	movs	r0, r3
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	b002      	add	sp, #8
 8007cb8:	bd80      	pop	{r7, pc}

08007cba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007cba:	b580      	push	{r7, lr}
 8007cbc:	b082      	sub	sp, #8
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	23a5      	movs	r3, #165	@ 0xa5
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	2105      	movs	r1, #5
 8007cca:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	2100      	movs	r1, #0
 8007cd4:	f000 fc05 	bl	80084e2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	0018      	movs	r0, r3
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	b002      	add	sp, #8
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ce8:	490f      	ldr	r1, [pc, #60]	@ (8007d28 <MX_USB_DEVICE_Init+0x44>)
 8007cea:	4b10      	ldr	r3, [pc, #64]	@ (8007d2c <MX_USB_DEVICE_Init+0x48>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f7fe fe10 	bl	8006914 <USBD_Init>
 8007cf4:	1e03      	subs	r3, r0, #0
 8007cf6:	d001      	beq.n	8007cfc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007cf8:	f7f9 f80c 	bl	8000d14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007cfc:	4a0c      	ldr	r2, [pc, #48]	@ (8007d30 <MX_USB_DEVICE_Init+0x4c>)
 8007cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8007d2c <MX_USB_DEVICE_Init+0x48>)
 8007d00:	0011      	movs	r1, r2
 8007d02:	0018      	movs	r0, r3
 8007d04:	f7fe fe37 	bl	8006976 <USBD_RegisterClass>
 8007d08:	1e03      	subs	r3, r0, #0
 8007d0a:	d001      	beq.n	8007d10 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8007d0c:	f7f9 f802 	bl	8000d14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007d10:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <MX_USB_DEVICE_Init+0x48>)
 8007d12:	0018      	movs	r0, r3
 8007d14:	f7fe fe4f 	bl	80069b6 <USBD_Start>
 8007d18:	1e03      	subs	r3, r0, #0
 8007d1a:	d001      	beq.n	8007d20 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007d1c:	f7f8 fffa 	bl	8000d14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007d20:	46c0      	nop			@ (mov r8, r8)
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	46c0      	nop			@ (mov r8, r8)
 8007d28:	200001c8 	.word	0x200001c8
 8007d2c:	200002cc 	.word	0x200002cc
 8007d30:	200000cc 	.word	0x200000cc

08007d34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	0002      	movs	r2, r0
 8007d3c:	6039      	str	r1, [r7, #0]
 8007d3e:	1dfb      	adds	r3, r7, #7
 8007d40:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2212      	movs	r2, #18
 8007d46:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d48:	4b02      	ldr	r3, [pc, #8]	@ (8007d54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d4a:	0018      	movs	r0, r3
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	b002      	add	sp, #8
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	46c0      	nop			@ (mov r8, r8)
 8007d54:	200001e4 	.word	0x200001e4

08007d58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	0002      	movs	r2, r0
 8007d60:	6039      	str	r1, [r7, #0]
 8007d62:	1dfb      	adds	r3, r7, #7
 8007d64:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	2204      	movs	r2, #4
 8007d6a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d6c:	4b02      	ldr	r3, [pc, #8]	@ (8007d78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d6e:	0018      	movs	r0, r3
 8007d70:	46bd      	mov	sp, r7
 8007d72:	b002      	add	sp, #8
 8007d74:	bd80      	pop	{r7, pc}
 8007d76:	46c0      	nop			@ (mov r8, r8)
 8007d78:	200001f8 	.word	0x200001f8

08007d7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	0002      	movs	r2, r0
 8007d84:	6039      	str	r1, [r7, #0]
 8007d86:	1dfb      	adds	r3, r7, #7
 8007d88:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007d8a:	1dfb      	adds	r3, r7, #7
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d106      	bne.n	8007da0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d92:	683a      	ldr	r2, [r7, #0]
 8007d94:	4908      	ldr	r1, [pc, #32]	@ (8007db8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007d96:	4b09      	ldr	r3, [pc, #36]	@ (8007dbc <USBD_FS_ProductStrDescriptor+0x40>)
 8007d98:	0018      	movs	r0, r3
 8007d9a:	f7ff fec9 	bl	8007b30 <USBD_GetString>
 8007d9e:	e005      	b.n	8007dac <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	4905      	ldr	r1, [pc, #20]	@ (8007db8 <USBD_FS_ProductStrDescriptor+0x3c>)
 8007da4:	4b05      	ldr	r3, [pc, #20]	@ (8007dbc <USBD_FS_ProductStrDescriptor+0x40>)
 8007da6:	0018      	movs	r0, r3
 8007da8:	f7ff fec2 	bl	8007b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dac:	4b02      	ldr	r3, [pc, #8]	@ (8007db8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8007dae:	0018      	movs	r0, r3
 8007db0:	46bd      	mov	sp, r7
 8007db2:	b002      	add	sp, #8
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	46c0      	nop			@ (mov r8, r8)
 8007db8:	20000590 	.word	0x20000590
 8007dbc:	08008664 	.word	0x08008664

08007dc0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	0002      	movs	r2, r0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	1dfb      	adds	r3, r7, #7
 8007dcc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007dce:	683a      	ldr	r2, [r7, #0]
 8007dd0:	4904      	ldr	r1, [pc, #16]	@ (8007de4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007dd2:	4b05      	ldr	r3, [pc, #20]	@ (8007de8 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 8007dd4:	0018      	movs	r0, r3
 8007dd6:	f7ff feab 	bl	8007b30 <USBD_GetString>
  return USBD_StrDesc;
 8007dda:	4b02      	ldr	r3, [pc, #8]	@ (8007de4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 8007ddc:	0018      	movs	r0, r3
 8007dde:	46bd      	mov	sp, r7
 8007de0:	b002      	add	sp, #8
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000590 	.word	0x20000590
 8007de8:	0800866c 	.word	0x0800866c

08007dec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	0002      	movs	r2, r0
 8007df4:	6039      	str	r1, [r7, #0]
 8007df6:	1dfb      	adds	r3, r7, #7
 8007df8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	221a      	movs	r2, #26
 8007dfe:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007e00:	f000 f84c 	bl	8007e9c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007e04:	4b02      	ldr	r3, [pc, #8]	@ (8007e10 <USBD_FS_SerialStrDescriptor+0x24>)
}
 8007e06:	0018      	movs	r0, r3
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	b002      	add	sp, #8
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	46c0      	nop			@ (mov r8, r8)
 8007e10:	200001fc 	.word	0x200001fc

08007e14 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	0002      	movs	r2, r0
 8007e1c:	6039      	str	r1, [r7, #0]
 8007e1e:	1dfb      	adds	r3, r7, #7
 8007e20:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 8007e22:	1dfb      	adds	r3, r7, #7
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d106      	bne.n	8007e38 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e2a:	683a      	ldr	r2, [r7, #0]
 8007e2c:	4908      	ldr	r1, [pc, #32]	@ (8007e50 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007e2e:	4b09      	ldr	r3, [pc, #36]	@ (8007e54 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007e30:	0018      	movs	r0, r3
 8007e32:	f7ff fe7d 	bl	8007b30 <USBD_GetString>
 8007e36:	e005      	b.n	8007e44 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007e38:	683a      	ldr	r2, [r7, #0]
 8007e3a:	4905      	ldr	r1, [pc, #20]	@ (8007e50 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8007e3c:	4b05      	ldr	r3, [pc, #20]	@ (8007e54 <USBD_FS_ConfigStrDescriptor+0x40>)
 8007e3e:	0018      	movs	r0, r3
 8007e40:	f7ff fe76 	bl	8007b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e44:	4b02      	ldr	r3, [pc, #8]	@ (8007e50 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8007e46:	0018      	movs	r0, r3
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	b002      	add	sp, #8
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	46c0      	nop			@ (mov r8, r8)
 8007e50:	20000590 	.word	0x20000590
 8007e54:	08008680 	.word	0x08008680

08007e58 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b082      	sub	sp, #8
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	0002      	movs	r2, r0
 8007e60:	6039      	str	r1, [r7, #0]
 8007e62:	1dfb      	adds	r3, r7, #7
 8007e64:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8007e66:	1dfb      	adds	r3, r7, #7
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d106      	bne.n	8007e7c <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e6e:	683a      	ldr	r2, [r7, #0]
 8007e70:	4908      	ldr	r1, [pc, #32]	@ (8007e94 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007e72:	4b09      	ldr	r3, [pc, #36]	@ (8007e98 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007e74:	0018      	movs	r0, r3
 8007e76:	f7ff fe5b 	bl	8007b30 <USBD_GetString>
 8007e7a:	e005      	b.n	8007e88 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	4905      	ldr	r1, [pc, #20]	@ (8007e94 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8007e80:	4b05      	ldr	r3, [pc, #20]	@ (8007e98 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8007e82:	0018      	movs	r0, r3
 8007e84:	f7ff fe54 	bl	8007b30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e88:	4b02      	ldr	r3, [pc, #8]	@ (8007e94 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	b002      	add	sp, #8
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	46c0      	nop			@ (mov r8, r8)
 8007e94:	20000590 	.word	0x20000590
 8007e98:	0800868c 	.word	0x0800868c

08007e9c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007ea2:	4b10      	ldr	r3, [pc, #64]	@ (8007ee4 <Get_SerialNum+0x48>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8007ee8 <Get_SerialNum+0x4c>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007eae:	4b0f      	ldr	r3, [pc, #60]	@ (8007eec <Get_SerialNum+0x50>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	18d3      	adds	r3, r2, r3
 8007eba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00b      	beq.n	8007eda <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007ec2:	490b      	ldr	r1, [pc, #44]	@ (8007ef0 <Get_SerialNum+0x54>)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2208      	movs	r2, #8
 8007ec8:	0018      	movs	r0, r3
 8007eca:	f000 f815 	bl	8007ef8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007ece:	4909      	ldr	r1, [pc, #36]	@ (8007ef4 <Get_SerialNum+0x58>)
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2204      	movs	r2, #4
 8007ed4:	0018      	movs	r0, r3
 8007ed6:	f000 f80f 	bl	8007ef8 <IntToUnicode>
  }
}
 8007eda:	46c0      	nop			@ (mov r8, r8)
 8007edc:	46bd      	mov	sp, r7
 8007ede:	b004      	add	sp, #16
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	46c0      	nop			@ (mov r8, r8)
 8007ee4:	1ffff7ac 	.word	0x1ffff7ac
 8007ee8:	1ffff7b0 	.word	0x1ffff7b0
 8007eec:	1ffff7b4 	.word	0x1ffff7b4
 8007ef0:	200001fe 	.word	0x200001fe
 8007ef4:	2000020e 	.word	0x2000020e

08007ef8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	1dfb      	adds	r3, r7, #7
 8007f04:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 8007f06:	2117      	movs	r1, #23
 8007f08:	187b      	adds	r3, r7, r1
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 8007f0e:	187b      	adds	r3, r7, r1
 8007f10:	2200      	movs	r2, #0
 8007f12:	701a      	strb	r2, [r3, #0]
 8007f14:	e02f      	b.n	8007f76 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	0f1b      	lsrs	r3, r3, #28
 8007f1a:	2b09      	cmp	r3, #9
 8007f1c:	d80d      	bhi.n	8007f3a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	0f1b      	lsrs	r3, r3, #28
 8007f22:	b2da      	uxtb	r2, r3
 8007f24:	2317      	movs	r3, #23
 8007f26:	18fb      	adds	r3, r7, r3
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	005b      	lsls	r3, r3, #1
 8007f2c:	0019      	movs	r1, r3
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	185b      	adds	r3, r3, r1
 8007f32:	3230      	adds	r2, #48	@ 0x30
 8007f34:	b2d2      	uxtb	r2, r2
 8007f36:	701a      	strb	r2, [r3, #0]
 8007f38:	e00c      	b.n	8007f54 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	0f1b      	lsrs	r3, r3, #28
 8007f3e:	b2da      	uxtb	r2, r3
 8007f40:	2317      	movs	r3, #23
 8007f42:	18fb      	adds	r3, r7, r3
 8007f44:	781b      	ldrb	r3, [r3, #0]
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	0019      	movs	r1, r3
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	185b      	adds	r3, r3, r1
 8007f4e:	3237      	adds	r2, #55	@ 0x37
 8007f50:	b2d2      	uxtb	r2, r2
 8007f52:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	011b      	lsls	r3, r3, #4
 8007f58:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007f5a:	2117      	movs	r1, #23
 8007f5c:	187b      	adds	r3, r7, r1
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	3301      	adds	r3, #1
 8007f64:	68ba      	ldr	r2, [r7, #8]
 8007f66:	18d3      	adds	r3, r2, r3
 8007f68:	2200      	movs	r2, #0
 8007f6a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f6c:	187b      	adds	r3, r7, r1
 8007f6e:	781a      	ldrb	r2, [r3, #0]
 8007f70:	187b      	adds	r3, r7, r1
 8007f72:	3201      	adds	r2, #1
 8007f74:	701a      	strb	r2, [r3, #0]
 8007f76:	2317      	movs	r3, #23
 8007f78:	18fa      	adds	r2, r7, r3
 8007f7a:	1dfb      	adds	r3, r7, #7
 8007f7c:	7812      	ldrb	r2, [r2, #0]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d3c8      	bcc.n	8007f16 <IntToUnicode+0x1e>
  }
}
 8007f84:	46c0      	nop			@ (mov r8, r8)
 8007f86:	46c0      	nop			@ (mov r8, r8)
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	b006      	add	sp, #24
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8007fd8 <HAL_PCD_MspInit+0x48>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d115      	bne.n	8007fce <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007fa2:	4b0e      	ldr	r3, [pc, #56]	@ (8007fdc <HAL_PCD_MspInit+0x4c>)
 8007fa4:	69da      	ldr	r2, [r3, #28]
 8007fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fdc <HAL_PCD_MspInit+0x4c>)
 8007fa8:	2180      	movs	r1, #128	@ 0x80
 8007faa:	0409      	lsls	r1, r1, #16
 8007fac:	430a      	orrs	r2, r1
 8007fae:	61da      	str	r2, [r3, #28]
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fdc <HAL_PCD_MspInit+0x4c>)
 8007fb2:	69da      	ldr	r2, [r3, #28]
 8007fb4:	2380      	movs	r3, #128	@ 0x80
 8007fb6:	041b      	lsls	r3, r3, #16
 8007fb8:	4013      	ands	r3, r2
 8007fba:	60fb      	str	r3, [r7, #12]
 8007fbc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2100      	movs	r1, #0
 8007fc2:	201f      	movs	r0, #31
 8007fc4:	f7f9 f8a2 	bl	800110c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8007fc8:	201f      	movs	r0, #31
 8007fca:	f7f9 f8b4 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007fce:	46c0      	nop			@ (mov r8, r8)
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	b004      	add	sp, #16
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	46c0      	nop			@ (mov r8, r8)
 8007fd8:	40005c00 	.word	0x40005c00
 8007fdc:	40021000 	.word	0x40021000

08007fe0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b082      	sub	sp, #8
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	23b6      	movs	r3, #182	@ 0xb6
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	58d2      	ldr	r2, [r2, r3]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	21a6      	movs	r1, #166	@ 0xa6
 8007ff4:	0089      	lsls	r1, r1, #2
 8007ff6:	468c      	mov	ip, r1
 8007ff8:	4463      	add	r3, ip
 8007ffa:	0019      	movs	r1, r3
 8007ffc:	0010      	movs	r0, r2
 8007ffe:	f7fe fd2d 	bl	8006a5c <USBD_LL_SetupStage>
}
 8008002:	46c0      	nop			@ (mov r8, r8)
 8008004:	46bd      	mov	sp, r7
 8008006:	b002      	add	sp, #8
 8008008:	bd80      	pop	{r7, pc}

0800800a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800800a:	b590      	push	{r4, r7, lr}
 800800c:	b083      	sub	sp, #12
 800800e:	af00      	add	r7, sp, #0
 8008010:	6078      	str	r0, [r7, #4]
 8008012:	000a      	movs	r2, r1
 8008014:	1cfb      	adds	r3, r7, #3
 8008016:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	23b6      	movs	r3, #182	@ 0xb6
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	58d4      	ldr	r4, [r2, r3]
 8008020:	1cfb      	adds	r3, r7, #3
 8008022:	781a      	ldrb	r2, [r3, #0]
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	23b2      	movs	r3, #178	@ 0xb2
 8008028:	0059      	lsls	r1, r3, #1
 800802a:	0013      	movs	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	189b      	adds	r3, r3, r2
 8008030:	00db      	lsls	r3, r3, #3
 8008032:	18c3      	adds	r3, r0, r3
 8008034:	185b      	adds	r3, r3, r1
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	1cfb      	adds	r3, r7, #3
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	0019      	movs	r1, r3
 800803e:	0020      	movs	r0, r4
 8008040:	f7fe fd6a 	bl	8006b18 <USBD_LL_DataOutStage>
}
 8008044:	46c0      	nop			@ (mov r8, r8)
 8008046:	46bd      	mov	sp, r7
 8008048:	b003      	add	sp, #12
 800804a:	bd90      	pop	{r4, r7, pc}

0800804c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b082      	sub	sp, #8
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	000a      	movs	r2, r1
 8008056:	1cfb      	adds	r3, r7, #3
 8008058:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	23b6      	movs	r3, #182	@ 0xb6
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	58d0      	ldr	r0, [r2, r3]
 8008062:	1cfb      	adds	r3, r7, #3
 8008064:	781a      	ldrb	r2, [r3, #0]
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	0013      	movs	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	189b      	adds	r3, r3, r2
 800806e:	00db      	lsls	r3, r3, #3
 8008070:	18cb      	adds	r3, r1, r3
 8008072:	3324      	adds	r3, #36	@ 0x24
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	1cfb      	adds	r3, r7, #3
 8008078:	781b      	ldrb	r3, [r3, #0]
 800807a:	0019      	movs	r1, r3
 800807c:	f7fe fdce 	bl	8006c1c <USBD_LL_DataInStage>
}
 8008080:	46c0      	nop			@ (mov r8, r8)
 8008082:	46bd      	mov	sp, r7
 8008084:	b002      	add	sp, #8
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	23b6      	movs	r3, #182	@ 0xb6
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	58d3      	ldr	r3, [r2, r3]
 8008098:	0018      	movs	r0, r3
 800809a:	f7fe ff05 	bl	8006ea8 <USBD_LL_SOF>
}
 800809e:	46c0      	nop			@ (mov r8, r8)
 80080a0:	46bd      	mov	sp, r7
 80080a2:	b002      	add	sp, #8
 80080a4:	bd80      	pop	{r7, pc}

080080a6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080a6:	b580      	push	{r7, lr}
 80080a8:	b084      	sub	sp, #16
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80080ae:	230f      	movs	r3, #15
 80080b0:	18fb      	adds	r3, r7, r3
 80080b2:	2201      	movs	r2, #1
 80080b4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	795b      	ldrb	r3, [r3, #5]
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d001      	beq.n	80080c2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 80080be:	f7f8 fe29 	bl	8000d14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	23b6      	movs	r3, #182	@ 0xb6
 80080c6:	009b      	lsls	r3, r3, #2
 80080c8:	58d2      	ldr	r2, [r2, r3]
 80080ca:	230f      	movs	r3, #15
 80080cc:	18fb      	adds	r3, r7, r3
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	0019      	movs	r1, r3
 80080d2:	0010      	movs	r0, r2
 80080d4:	f7fe fea7 	bl	8006e26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080d8:	687a      	ldr	r2, [r7, #4]
 80080da:	23b6      	movs	r3, #182	@ 0xb6
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	58d3      	ldr	r3, [r2, r3]
 80080e0:	0018      	movs	r0, r3
 80080e2:	f7fe fe58 	bl	8006d96 <USBD_LL_Reset>
}
 80080e6:	46c0      	nop			@ (mov r8, r8)
 80080e8:	46bd      	mov	sp, r7
 80080ea:	b004      	add	sp, #16
 80080ec:	bd80      	pop	{r7, pc}
	...

080080f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b082      	sub	sp, #8
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	23b6      	movs	r3, #182	@ 0xb6
 80080fc:	009b      	lsls	r3, r3, #2
 80080fe:	58d3      	ldr	r3, [r2, r3]
 8008100:	0018      	movs	r0, r3
 8008102:	f7fe fea1 	bl	8006e48 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	7a5b      	ldrb	r3, [r3, #9]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800810e:	4b05      	ldr	r3, [pc, #20]	@ (8008124 <HAL_PCD_SuspendCallback+0x34>)
 8008110:	691a      	ldr	r2, [r3, #16]
 8008112:	4b04      	ldr	r3, [pc, #16]	@ (8008124 <HAL_PCD_SuspendCallback+0x34>)
 8008114:	2106      	movs	r1, #6
 8008116:	430a      	orrs	r2, r1
 8008118:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800811a:	46c0      	nop			@ (mov r8, r8)
 800811c:	46bd      	mov	sp, r7
 800811e:	b002      	add	sp, #8
 8008120:	bd80      	pop	{r7, pc}
 8008122:	46c0      	nop			@ (mov r8, r8)
 8008124:	e000ed00 	.word	0xe000ed00

08008128 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b082      	sub	sp, #8
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7a5b      	ldrb	r3, [r3, #9]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008138:	4b09      	ldr	r3, [pc, #36]	@ (8008160 <HAL_PCD_ResumeCallback+0x38>)
 800813a:	691a      	ldr	r2, [r3, #16]
 800813c:	4b08      	ldr	r3, [pc, #32]	@ (8008160 <HAL_PCD_ResumeCallback+0x38>)
 800813e:	2106      	movs	r1, #6
 8008140:	438a      	bics	r2, r1
 8008142:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8008144:	f000 fa18 	bl	8008578 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008148:	687a      	ldr	r2, [r7, #4]
 800814a:	23b6      	movs	r3, #182	@ 0xb6
 800814c:	009b      	lsls	r3, r3, #2
 800814e:	58d3      	ldr	r3, [r2, r3]
 8008150:	0018      	movs	r0, r3
 8008152:	f7fe fe91 	bl	8006e78 <USBD_LL_Resume>
}
 8008156:	46c0      	nop			@ (mov r8, r8)
 8008158:	46bd      	mov	sp, r7
 800815a:	b002      	add	sp, #8
 800815c:	bd80      	pop	{r7, pc}
 800815e:	46c0      	nop			@ (mov r8, r8)
 8008160:	e000ed00 	.word	0xe000ed00

08008164 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b082      	sub	sp, #8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800816c:	4a23      	ldr	r2, [pc, #140]	@ (80081fc <USBD_LL_Init+0x98>)
 800816e:	23b6      	movs	r3, #182	@ 0xb6
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	23b0      	movs	r3, #176	@ 0xb0
 800817a:	009b      	lsls	r3, r3, #2
 800817c:	491f      	ldr	r1, [pc, #124]	@ (80081fc <USBD_LL_Init+0x98>)
 800817e:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8008180:	4b1e      	ldr	r3, [pc, #120]	@ (80081fc <USBD_LL_Init+0x98>)
 8008182:	4a1f      	ldr	r2, [pc, #124]	@ (8008200 <USBD_LL_Init+0x9c>)
 8008184:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008186:	4b1d      	ldr	r3, [pc, #116]	@ (80081fc <USBD_LL_Init+0x98>)
 8008188:	2208      	movs	r2, #8
 800818a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800818c:	4b1b      	ldr	r3, [pc, #108]	@ (80081fc <USBD_LL_Init+0x98>)
 800818e:	2202      	movs	r2, #2
 8008190:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008192:	4b1a      	ldr	r3, [pc, #104]	@ (80081fc <USBD_LL_Init+0x98>)
 8008194:	2202      	movs	r2, #2
 8008196:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008198:	4b18      	ldr	r3, [pc, #96]	@ (80081fc <USBD_LL_Init+0x98>)
 800819a:	2200      	movs	r2, #0
 800819c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800819e:	4b17      	ldr	r3, [pc, #92]	@ (80081fc <USBD_LL_Init+0x98>)
 80081a0:	2200      	movs	r2, #0
 80081a2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80081a4:	4b15      	ldr	r3, [pc, #84]	@ (80081fc <USBD_LL_Init+0x98>)
 80081a6:	2200      	movs	r2, #0
 80081a8:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80081aa:	4b14      	ldr	r3, [pc, #80]	@ (80081fc <USBD_LL_Init+0x98>)
 80081ac:	0018      	movs	r0, r3
 80081ae:	f7f8 ffdf 	bl	8001170 <HAL_PCD_Init>
 80081b2:	1e03      	subs	r3, r0, #0
 80081b4:	d001      	beq.n	80081ba <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 80081b6:	f7f8 fdad 	bl	8000d14 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	23b0      	movs	r3, #176	@ 0xb0
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	58d0      	ldr	r0, [r2, r3]
 80081c2:	2318      	movs	r3, #24
 80081c4:	2200      	movs	r2, #0
 80081c6:	2100      	movs	r1, #0
 80081c8:	f7fa fd78 	bl	8002cbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	23b0      	movs	r3, #176	@ 0xb0
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	58d0      	ldr	r0, [r2, r3]
 80081d4:	2358      	movs	r3, #88	@ 0x58
 80081d6:	2200      	movs	r2, #0
 80081d8:	2180      	movs	r1, #128	@ 0x80
 80081da:	f7fa fd6f 	bl	8002cbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 80081de:	687a      	ldr	r2, [r7, #4]
 80081e0:	23b0      	movs	r3, #176	@ 0xb0
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	58d0      	ldr	r0, [r2, r3]
 80081e6:	2380      	movs	r3, #128	@ 0x80
 80081e8:	005b      	lsls	r3, r3, #1
 80081ea:	2200      	movs	r2, #0
 80081ec:	2181      	movs	r1, #129	@ 0x81
 80081ee:	f7fa fd65 	bl	8002cbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	0018      	movs	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	b002      	add	sp, #8
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000790 	.word	0x20000790
 8008200:	40005c00 	.word	0x40005c00

08008204 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008204:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800820c:	210f      	movs	r1, #15
 800820e:	187b      	adds	r3, r7, r1
 8008210:	2200      	movs	r2, #0
 8008212:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008214:	260e      	movs	r6, #14
 8008216:	19bb      	adds	r3, r7, r6
 8008218:	2200      	movs	r2, #0
 800821a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	23b0      	movs	r3, #176	@ 0xb0
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	58d3      	ldr	r3, [r2, r3]
 8008224:	000d      	movs	r5, r1
 8008226:	187c      	adds	r4, r7, r1
 8008228:	0018      	movs	r0, r3
 800822a:	f7f9 f895 	bl	8001358 <HAL_PCD_Start>
 800822e:	0003      	movs	r3, r0
 8008230:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008232:	19bc      	adds	r4, r7, r6
 8008234:	197b      	adds	r3, r7, r5
 8008236:	781b      	ldrb	r3, [r3, #0]
 8008238:	0018      	movs	r0, r3
 800823a:	f000 f9a4 	bl	8008586 <USBD_Get_USB_Status>
 800823e:	0003      	movs	r3, r0
 8008240:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008242:	19bb      	adds	r3, r7, r6
 8008244:	781b      	ldrb	r3, [r3, #0]
}
 8008246:	0018      	movs	r0, r3
 8008248:	46bd      	mov	sp, r7
 800824a:	b005      	add	sp, #20
 800824c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800824e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800824e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008250:	b085      	sub	sp, #20
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
 8008256:	000c      	movs	r4, r1
 8008258:	0010      	movs	r0, r2
 800825a:	0019      	movs	r1, r3
 800825c:	1cfb      	adds	r3, r7, #3
 800825e:	1c22      	adds	r2, r4, #0
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	1cbb      	adds	r3, r7, #2
 8008264:	1c02      	adds	r2, r0, #0
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	003b      	movs	r3, r7
 800826a:	1c0a      	adds	r2, r1, #0
 800826c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800826e:	260f      	movs	r6, #15
 8008270:	19bb      	adds	r3, r7, r6
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008276:	250e      	movs	r5, #14
 8008278:	197b      	adds	r3, r7, r5
 800827a:	2200      	movs	r2, #0
 800827c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800827e:	687a      	ldr	r2, [r7, #4]
 8008280:	23b0      	movs	r3, #176	@ 0xb0
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	58d0      	ldr	r0, [r2, r3]
 8008286:	19bc      	adds	r4, r7, r6
 8008288:	1cbb      	adds	r3, r7, #2
 800828a:	781d      	ldrb	r5, [r3, #0]
 800828c:	003b      	movs	r3, r7
 800828e:	881a      	ldrh	r2, [r3, #0]
 8008290:	1cfb      	adds	r3, r7, #3
 8008292:	7819      	ldrb	r1, [r3, #0]
 8008294:	002b      	movs	r3, r5
 8008296:	f7f9 f9f3 	bl	8001680 <HAL_PCD_EP_Open>
 800829a:	0003      	movs	r3, r0
 800829c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800829e:	250e      	movs	r5, #14
 80082a0:	197c      	adds	r4, r7, r5
 80082a2:	19bb      	adds	r3, r7, r6
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	0018      	movs	r0, r3
 80082a8:	f000 f96d 	bl	8008586 <USBD_Get_USB_Status>
 80082ac:	0003      	movs	r3, r0
 80082ae:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80082b0:	197b      	adds	r3, r7, r5
 80082b2:	781b      	ldrb	r3, [r3, #0]
}
 80082b4:	0018      	movs	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b005      	add	sp, #20
 80082ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082bc <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082be:	b085      	sub	sp, #20
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	000a      	movs	r2, r1
 80082c6:	1cfb      	adds	r3, r7, #3
 80082c8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ca:	210f      	movs	r1, #15
 80082cc:	187b      	adds	r3, r7, r1
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082d2:	260e      	movs	r6, #14
 80082d4:	19bb      	adds	r3, r7, r6
 80082d6:	2200      	movs	r2, #0
 80082d8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	23b0      	movs	r3, #176	@ 0xb0
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	58d2      	ldr	r2, [r2, r3]
 80082e2:	000d      	movs	r5, r1
 80082e4:	187c      	adds	r4, r7, r1
 80082e6:	1cfb      	adds	r3, r7, #3
 80082e8:	781b      	ldrb	r3, [r3, #0]
 80082ea:	0019      	movs	r1, r3
 80082ec:	0010      	movs	r0, r2
 80082ee:	f7f9 fa36 	bl	800175e <HAL_PCD_EP_Close>
 80082f2:	0003      	movs	r3, r0
 80082f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082f6:	19bc      	adds	r4, r7, r6
 80082f8:	197b      	adds	r3, r7, r5
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	0018      	movs	r0, r3
 80082fe:	f000 f942 	bl	8008586 <USBD_Get_USB_Status>
 8008302:	0003      	movs	r3, r0
 8008304:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008306:	19bb      	adds	r3, r7, r6
 8008308:	781b      	ldrb	r3, [r3, #0]
}
 800830a:	0018      	movs	r0, r3
 800830c:	46bd      	mov	sp, r7
 800830e:	b005      	add	sp, #20
 8008310:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008312 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008312:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008314:	b085      	sub	sp, #20
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	000a      	movs	r2, r1
 800831c:	1cfb      	adds	r3, r7, #3
 800831e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008320:	210f      	movs	r1, #15
 8008322:	187b      	adds	r3, r7, r1
 8008324:	2200      	movs	r2, #0
 8008326:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008328:	260e      	movs	r6, #14
 800832a:	19bb      	adds	r3, r7, r6
 800832c:	2200      	movs	r2, #0
 800832e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	23b0      	movs	r3, #176	@ 0xb0
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	58d2      	ldr	r2, [r2, r3]
 8008338:	000d      	movs	r5, r1
 800833a:	187c      	adds	r4, r7, r1
 800833c:	1cfb      	adds	r3, r7, #3
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	0019      	movs	r1, r3
 8008342:	0010      	movs	r0, r2
 8008344:	f7f9 facf 	bl	80018e6 <HAL_PCD_EP_SetStall>
 8008348:	0003      	movs	r3, r0
 800834a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800834c:	19bc      	adds	r4, r7, r6
 800834e:	197b      	adds	r3, r7, r5
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	0018      	movs	r0, r3
 8008354:	f000 f917 	bl	8008586 <USBD_Get_USB_Status>
 8008358:	0003      	movs	r3, r0
 800835a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800835c:	19bb      	adds	r3, r7, r6
 800835e:	781b      	ldrb	r3, [r3, #0]
}
 8008360:	0018      	movs	r0, r3
 8008362:	46bd      	mov	sp, r7
 8008364:	b005      	add	sp, #20
 8008366:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008368 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008368:	b5f0      	push	{r4, r5, r6, r7, lr}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	000a      	movs	r2, r1
 8008372:	1cfb      	adds	r3, r7, #3
 8008374:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008376:	210f      	movs	r1, #15
 8008378:	187b      	adds	r3, r7, r1
 800837a:	2200      	movs	r2, #0
 800837c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800837e:	260e      	movs	r6, #14
 8008380:	19bb      	adds	r3, r7, r6
 8008382:	2200      	movs	r2, #0
 8008384:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	23b0      	movs	r3, #176	@ 0xb0
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	58d2      	ldr	r2, [r2, r3]
 800838e:	000d      	movs	r5, r1
 8008390:	187c      	adds	r4, r7, r1
 8008392:	1cfb      	adds	r3, r7, #3
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	0019      	movs	r1, r3
 8008398:	0010      	movs	r0, r2
 800839a:	f7f9 fb00 	bl	800199e <HAL_PCD_EP_ClrStall>
 800839e:	0003      	movs	r3, r0
 80083a0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a2:	19bc      	adds	r4, r7, r6
 80083a4:	197b      	adds	r3, r7, r5
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	0018      	movs	r0, r3
 80083aa:	f000 f8ec 	bl	8008586 <USBD_Get_USB_Status>
 80083ae:	0003      	movs	r3, r0
 80083b0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80083b2:	19bb      	adds	r3, r7, r6
 80083b4:	781b      	ldrb	r3, [r3, #0]
}
 80083b6:	0018      	movs	r0, r3
 80083b8:	46bd      	mov	sp, r7
 80083ba:	b005      	add	sp, #20
 80083bc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080083be <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b084      	sub	sp, #16
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
 80083c6:	000a      	movs	r2, r1
 80083c8:	1cfb      	adds	r3, r7, #3
 80083ca:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083cc:	687a      	ldr	r2, [r7, #4]
 80083ce:	23b0      	movs	r3, #176	@ 0xb0
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	58d3      	ldr	r3, [r2, r3]
 80083d4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083d6:	1cfb      	adds	r3, r7, #3
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	b25b      	sxtb	r3, r3
 80083dc:	2b00      	cmp	r3, #0
 80083de:	da0c      	bge.n	80083fa <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083e0:	1cfb      	adds	r3, r7, #3
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	227f      	movs	r2, #127	@ 0x7f
 80083e6:	401a      	ands	r2, r3
 80083e8:	68f9      	ldr	r1, [r7, #12]
 80083ea:	0013      	movs	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	189b      	adds	r3, r3, r2
 80083f0:	00db      	lsls	r3, r3, #3
 80083f2:	18cb      	adds	r3, r1, r3
 80083f4:	3312      	adds	r3, #18
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	e00d      	b.n	8008416 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083fa:	1cfb      	adds	r3, r7, #3
 80083fc:	781b      	ldrb	r3, [r3, #0]
 80083fe:	227f      	movs	r2, #127	@ 0x7f
 8008400:	401a      	ands	r2, r3
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	23a9      	movs	r3, #169	@ 0xa9
 8008406:	0059      	lsls	r1, r3, #1
 8008408:	0013      	movs	r3, r2
 800840a:	009b      	lsls	r3, r3, #2
 800840c:	189b      	adds	r3, r3, r2
 800840e:	00db      	lsls	r3, r3, #3
 8008410:	18c3      	adds	r3, r0, r3
 8008412:	185b      	adds	r3, r3, r1
 8008414:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008416:	0018      	movs	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	b004      	add	sp, #16
 800841c:	bd80      	pop	{r7, pc}

0800841e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800841e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008420:	b085      	sub	sp, #20
 8008422:	af00      	add	r7, sp, #0
 8008424:	6078      	str	r0, [r7, #4]
 8008426:	000a      	movs	r2, r1
 8008428:	1cfb      	adds	r3, r7, #3
 800842a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842c:	210f      	movs	r1, #15
 800842e:	187b      	adds	r3, r7, r1
 8008430:	2200      	movs	r2, #0
 8008432:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008434:	260e      	movs	r6, #14
 8008436:	19bb      	adds	r3, r7, r6
 8008438:	2200      	movs	r2, #0
 800843a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800843c:	687a      	ldr	r2, [r7, #4]
 800843e:	23b0      	movs	r3, #176	@ 0xb0
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	58d2      	ldr	r2, [r2, r3]
 8008444:	000d      	movs	r5, r1
 8008446:	187c      	adds	r4, r7, r1
 8008448:	1cfb      	adds	r3, r7, #3
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	0019      	movs	r1, r3
 800844e:	0010      	movs	r0, r2
 8008450:	f7f9 f8ec 	bl	800162c <HAL_PCD_SetAddress>
 8008454:	0003      	movs	r3, r0
 8008456:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008458:	19bc      	adds	r4, r7, r6
 800845a:	197b      	adds	r3, r7, r5
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	0018      	movs	r0, r3
 8008460:	f000 f891 	bl	8008586 <USBD_Get_USB_Status>
 8008464:	0003      	movs	r3, r0
 8008466:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008468:	19bb      	adds	r3, r7, r6
 800846a:	781b      	ldrb	r3, [r3, #0]
}
 800846c:	0018      	movs	r0, r3
 800846e:	46bd      	mov	sp, r7
 8008470:	b005      	add	sp, #20
 8008472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008474 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008474:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008476:	b087      	sub	sp, #28
 8008478:	af00      	add	r7, sp, #0
 800847a:	60f8      	str	r0, [r7, #12]
 800847c:	0008      	movs	r0, r1
 800847e:	607a      	str	r2, [r7, #4]
 8008480:	0019      	movs	r1, r3
 8008482:	230b      	movs	r3, #11
 8008484:	18fb      	adds	r3, r7, r3
 8008486:	1c02      	adds	r2, r0, #0
 8008488:	701a      	strb	r2, [r3, #0]
 800848a:	2408      	movs	r4, #8
 800848c:	193b      	adds	r3, r7, r4
 800848e:	1c0a      	adds	r2, r1, #0
 8008490:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008492:	2117      	movs	r1, #23
 8008494:	187b      	adds	r3, r7, r1
 8008496:	2200      	movs	r2, #0
 8008498:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800849a:	2516      	movs	r5, #22
 800849c:	197b      	adds	r3, r7, r5
 800849e:	2200      	movs	r2, #0
 80084a0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	23b0      	movs	r3, #176	@ 0xb0
 80084a6:	009b      	lsls	r3, r3, #2
 80084a8:	58d0      	ldr	r0, [r2, r3]
 80084aa:	193b      	adds	r3, r7, r4
 80084ac:	881d      	ldrh	r5, [r3, #0]
 80084ae:	000e      	movs	r6, r1
 80084b0:	187c      	adds	r4, r7, r1
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	230b      	movs	r3, #11
 80084b6:	18fb      	adds	r3, r7, r3
 80084b8:	7819      	ldrb	r1, [r3, #0]
 80084ba:	002b      	movs	r3, r5
 80084bc:	f7f9 f9d7 	bl	800186e <HAL_PCD_EP_Transmit>
 80084c0:	0003      	movs	r3, r0
 80084c2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084c4:	2516      	movs	r5, #22
 80084c6:	197c      	adds	r4, r7, r5
 80084c8:	19bb      	adds	r3, r7, r6
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	0018      	movs	r0, r3
 80084ce:	f000 f85a 	bl	8008586 <USBD_Get_USB_Status>
 80084d2:	0003      	movs	r3, r0
 80084d4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80084d6:	197b      	adds	r3, r7, r5
 80084d8:	781b      	ldrb	r3, [r3, #0]
}
 80084da:	0018      	movs	r0, r3
 80084dc:	46bd      	mov	sp, r7
 80084de:	b007      	add	sp, #28
 80084e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084e2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80084e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084e4:	b087      	sub	sp, #28
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	0008      	movs	r0, r1
 80084ec:	607a      	str	r2, [r7, #4]
 80084ee:	0019      	movs	r1, r3
 80084f0:	230b      	movs	r3, #11
 80084f2:	18fb      	adds	r3, r7, r3
 80084f4:	1c02      	adds	r2, r0, #0
 80084f6:	701a      	strb	r2, [r3, #0]
 80084f8:	2408      	movs	r4, #8
 80084fa:	193b      	adds	r3, r7, r4
 80084fc:	1c0a      	adds	r2, r1, #0
 80084fe:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008500:	2117      	movs	r1, #23
 8008502:	187b      	adds	r3, r7, r1
 8008504:	2200      	movs	r2, #0
 8008506:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008508:	2516      	movs	r5, #22
 800850a:	197b      	adds	r3, r7, r5
 800850c:	2200      	movs	r2, #0
 800850e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	23b0      	movs	r3, #176	@ 0xb0
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	58d0      	ldr	r0, [r2, r3]
 8008518:	193b      	adds	r3, r7, r4
 800851a:	881d      	ldrh	r5, [r3, #0]
 800851c:	000e      	movs	r6, r1
 800851e:	187c      	adds	r4, r7, r1
 8008520:	687a      	ldr	r2, [r7, #4]
 8008522:	230b      	movs	r3, #11
 8008524:	18fb      	adds	r3, r7, r3
 8008526:	7819      	ldrb	r1, [r3, #0]
 8008528:	002b      	movs	r3, r5
 800852a:	f7f9 f969 	bl	8001800 <HAL_PCD_EP_Receive>
 800852e:	0003      	movs	r3, r0
 8008530:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008532:	2516      	movs	r5, #22
 8008534:	197c      	adds	r4, r7, r5
 8008536:	19bb      	adds	r3, r7, r6
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	0018      	movs	r0, r3
 800853c:	f000 f823 	bl	8008586 <USBD_Get_USB_Status>
 8008540:	0003      	movs	r3, r0
 8008542:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8008544:	197b      	adds	r3, r7, r5
 8008546:	781b      	ldrb	r3, [r3, #0]
}
 8008548:	0018      	movs	r0, r3
 800854a:	46bd      	mov	sp, r7
 800854c:	b007      	add	sp, #28
 800854e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008550 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008558:	4b02      	ldr	r3, [pc, #8]	@ (8008564 <USBD_static_malloc+0x14>)
}
 800855a:	0018      	movs	r0, r3
 800855c:	46bd      	mov	sp, r7
 800855e:	b002      	add	sp, #8
 8008560:	bd80      	pop	{r7, pc}
 8008562:	46c0      	nop			@ (mov r8, r8)
 8008564:	20000a6c 	.word	0x20000a6c

08008568 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]

}
 8008570:	46c0      	nop			@ (mov r8, r8)
 8008572:	46bd      	mov	sp, r7
 8008574:	b002      	add	sp, #8
 8008576:	bd80      	pop	{r7, pc}

08008578 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008578:	b580      	push	{r7, lr}
 800857a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800857c:	f7f8 f968 	bl	8000850 <SystemClock_Config>
}
 8008580:	46c0      	nop			@ (mov r8, r8)
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008586:	b580      	push	{r7, lr}
 8008588:	b084      	sub	sp, #16
 800858a:	af00      	add	r7, sp, #0
 800858c:	0002      	movs	r2, r0
 800858e:	1dfb      	adds	r3, r7, #7
 8008590:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008592:	230f      	movs	r3, #15
 8008594:	18fb      	adds	r3, r7, r3
 8008596:	2200      	movs	r2, #0
 8008598:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800859a:	1dfb      	adds	r3, r7, #7
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d017      	beq.n	80085d2 <USBD_Get_USB_Status+0x4c>
 80085a2:	dc1b      	bgt.n	80085dc <USBD_Get_USB_Status+0x56>
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d00f      	beq.n	80085c8 <USBD_Get_USB_Status+0x42>
 80085a8:	dc18      	bgt.n	80085dc <USBD_Get_USB_Status+0x56>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <USBD_Get_USB_Status+0x2e>
 80085ae:	2b01      	cmp	r3, #1
 80085b0:	d005      	beq.n	80085be <USBD_Get_USB_Status+0x38>
 80085b2:	e013      	b.n	80085dc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80085b4:	230f      	movs	r3, #15
 80085b6:	18fb      	adds	r3, r7, r3
 80085b8:	2200      	movs	r2, #0
 80085ba:	701a      	strb	r2, [r3, #0]
    break;
 80085bc:	e013      	b.n	80085e6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80085be:	230f      	movs	r3, #15
 80085c0:	18fb      	adds	r3, r7, r3
 80085c2:	2202      	movs	r2, #2
 80085c4:	701a      	strb	r2, [r3, #0]
    break;
 80085c6:	e00e      	b.n	80085e6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80085c8:	230f      	movs	r3, #15
 80085ca:	18fb      	adds	r3, r7, r3
 80085cc:	2201      	movs	r2, #1
 80085ce:	701a      	strb	r2, [r3, #0]
    break;
 80085d0:	e009      	b.n	80085e6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80085d2:	230f      	movs	r3, #15
 80085d4:	18fb      	adds	r3, r7, r3
 80085d6:	2202      	movs	r2, #2
 80085d8:	701a      	strb	r2, [r3, #0]
    break;
 80085da:	e004      	b.n	80085e6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80085dc:	230f      	movs	r3, #15
 80085de:	18fb      	adds	r3, r7, r3
 80085e0:	2202      	movs	r2, #2
 80085e2:	701a      	strb	r2, [r3, #0]
    break;
 80085e4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80085e6:	230f      	movs	r3, #15
 80085e8:	18fb      	adds	r3, r7, r3
 80085ea:	781b      	ldrb	r3, [r3, #0]
}
 80085ec:	0018      	movs	r0, r3
 80085ee:	46bd      	mov	sp, r7
 80085f0:	b004      	add	sp, #16
 80085f2:	bd80      	pop	{r7, pc}

080085f4 <memset>:
 80085f4:	0003      	movs	r3, r0
 80085f6:	1882      	adds	r2, r0, r2
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d100      	bne.n	80085fe <memset+0xa>
 80085fc:	4770      	bx	lr
 80085fe:	7019      	strb	r1, [r3, #0]
 8008600:	3301      	adds	r3, #1
 8008602:	e7f9      	b.n	80085f8 <memset+0x4>

08008604 <__libc_init_array>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	2600      	movs	r6, #0
 8008608:	4c0c      	ldr	r4, [pc, #48]	@ (800863c <__libc_init_array+0x38>)
 800860a:	4d0d      	ldr	r5, [pc, #52]	@ (8008640 <__libc_init_array+0x3c>)
 800860c:	1b64      	subs	r4, r4, r5
 800860e:	10a4      	asrs	r4, r4, #2
 8008610:	42a6      	cmp	r6, r4
 8008612:	d109      	bne.n	8008628 <__libc_init_array+0x24>
 8008614:	2600      	movs	r6, #0
 8008616:	f000 f819 	bl	800864c <_init>
 800861a:	4c0a      	ldr	r4, [pc, #40]	@ (8008644 <__libc_init_array+0x40>)
 800861c:	4d0a      	ldr	r5, [pc, #40]	@ (8008648 <__libc_init_array+0x44>)
 800861e:	1b64      	subs	r4, r4, r5
 8008620:	10a4      	asrs	r4, r4, #2
 8008622:	42a6      	cmp	r6, r4
 8008624:	d105      	bne.n	8008632 <__libc_init_array+0x2e>
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	00b3      	lsls	r3, r6, #2
 800862a:	58eb      	ldr	r3, [r5, r3]
 800862c:	4798      	blx	r3
 800862e:	3601      	adds	r6, #1
 8008630:	e7ee      	b.n	8008610 <__libc_init_array+0xc>
 8008632:	00b3      	lsls	r3, r6, #2
 8008634:	58eb      	ldr	r3, [r5, r3]
 8008636:	4798      	blx	r3
 8008638:	3601      	adds	r6, #1
 800863a:	e7f2      	b.n	8008622 <__libc_init_array+0x1e>
 800863c:	080087ac 	.word	0x080087ac
 8008640:	080087ac 	.word	0x080087ac
 8008644:	080087b0 	.word	0x080087b0
 8008648:	080087ac 	.word	0x080087ac

0800864c <_init>:
 800864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800864e:	46c0      	nop			@ (mov r8, r8)
 8008650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008652:	bc08      	pop	{r3}
 8008654:	469e      	mov	lr, r3
 8008656:	4770      	bx	lr

08008658 <_fini>:
 8008658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865a:	46c0      	nop			@ (mov r8, r8)
 800865c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800865e:	bc08      	pop	{r3}
 8008660:	469e      	mov	lr, r3
 8008662:	4770      	bx	lr
